# Embedded file name: DQEAddressMatchV9.py
import sys, traceback
_python25 = sys.version_info[0] == 2 and sys.version_info[1] == 5
_python27 = sys.version_info[0] == 2 and sys.version_info[1] == 7
_python3x = sys.version_info[0] == 3
import cPickle
import numpy, csv
_table_carreaux = []
_fl_tab_carreaux = True
bandes_x = {}
bandes_y = {}
_table_vecteurs = {}
_table_encadrement = []
_table_idk = {}
_flag_geoconvert = False
import sha, shutil, string, re
import random, socket, time, shelve, bsddb
if _python25:
    import editdist
else:
    import Levenshtein as editdist
import pickle, datetime
import os, urllib2, urllib
import UserDict, pprint, math, subprocess
from threading import Timer
import codecs
_timeout = 15
for i in sys.argv:
    if 'TIMEOUT:' in i.upper():
        _timeout = int(i.split(':')[1])

socket.setdefaulttimeout(_timeout)
__author__ = 'DQE SOFTWARE'
__date__ = '22/04/2021'
__version__ = '3.9i'
_gestiondeslicences = 300
_duree_sauvegarde = 120
_tiret_moyen = u'\u2013'.encode('utf-8')
_tiret_long = u'\u2014'.encode('utf-8')
_lecture_licence = True
_flag_recup_count_cp = True
_temp_activite = []
_avec_voie = True
latin_1 = {'D': '\xd0',
 'A': '\xe2\xe3\xe4\xe5\xe6\xe0\xe1\xc5\xc6\xc0\xc1\xc2\xc3',
 'C': '\xe7\xc7',
 'E': '\xe8\xe9\xea\xeb\xc9\xca\xcb\xc8',
 'I': '\xec\xed\xee\xef\xce\xcf\xcc\xcd',
 'N': '\xf1\xd1',
 'O': '\xf2\xf3\xf4\xf5\xf6\xf0\xd3\xd4\xd5\xd6\xd2',
 '0': '\xf8\xd8',
 'U': '\xf9\xfa\xfb\xfc\xd9\xda\xdb\xdc',
 'Y': '\xfd\xff\xdd\xa5',
 'P': '\xfe\xde',
 '\xdf': 'SS'}
_ficmail = ''
ip = '127.0.0.1'
try:
    if _python25:
        import common.sqlite3shelve
    else:
        import common27.sqlite3shelve
except:
    sqlite3shelve = None

try:
    import integerToWords_fr
except:
    integerToWords_fr = None

try:
    import wordsToInteger_fr
except:
    wordsToInteger_fr = None

_protocol = 0
_pays = 'FRA'
_rep_pays = ''
_Taille_adresse = 38
for i in sys.argv:
    if i.upper().find('-PAYS:') == 0:
        _pays = i.split(':')[1]
        if _pays.upper() != 'FRA':
            _Taille_adresse = 500
    if i.upper().find('-REP_PAYS:') == 0:
        _rep_pays = i.split(':')[1]
        break

if _rep_pays == '':
    _rep_pays = _pays
_fwrite_error = None
_pathinitial = sys.argv[0][0:-len(os.path.basename(sys.argv[0]))]
if _pathinitial == '':
    _pathinitial = os.getcwd().replace('\\', '/')
if _pathinitial == '':
    _pathinitial = './'
if _pathinitial[-1] != '/' and _pathinitial[-1] != '\\':
    _pathinitial += '/'

def write_error(nature, fonction, texte):
    global _fwrite_error
    if _fwrite_error != None:
        _fwrite_error.write('%s\t\t%s\t%s\t%s\n' % (str(datetime.datetime.now()),
         nature,
         fonction,
         texte))
        _fwrite_error.flush()
    return


for i in sys.argv:
    if i.upper().find('-PATH_ERROR') >= 0:
        try:
            if ':' in i:
                st = os.path.dirname(':'.join(i.split(':')[1:]))
                _fwrite_error = open(st + '/log' + str(datetime.datetime.now()).replace('-', '').replace(':', '').replace(' ', '_').replace('.', '_') + '.txt', 'wb')
            else:
                if not os.path.isdir(_pathinitial + 'log'):
                    os.mkdir(_pathinitial + '/log')
                _fwrite_error = open(_pathinitial + '/log' + str(datetime.datetime.now()).replace('-', '').replace(':', '').replace(' ', '_').replace('.', '_') + '.txt', 'wb')
        except:
            if not os.path.isdir(_pathinitial + 'log'):
                os.mkdir(_pathinitial + '/log')
            _fwrite_error = open(_pathinitial + '/log' + str(datetime.datetime.now()).replace('-', '').replace(':', '').replace(' ', '_').replace('.', '_') + '.txt', 'wb')

        write_error('start', '', '')
    if i.upper().find('-PAYS:') == 0:
        _pays = i.split(':')[1]
        if _pays.upper() != 'FRA':
            _Taille_adresse = 500
        break

_demo = False
_new_compteur = True
_flag_rnvpextend = False
_flag_ExtFRA = False
_flag_soap_v2 = False
_flag_extend = False
_flag_sqlite = os.path.isfile(_pathinitial + 'licencev2.sql')
if _flag_sqlite:
    _nomfichierlicence = 'licencev2.sql'
else:
    _nomfichierlicence = 'licence.sql'
_log_file = True
from string import maketrans
try:
    from common import makelicence2
except:
    makelicence2 = None

if '-OLDHTTP' in sys.argv:
    from wsgi_soap import SimpleWSGISoapApp
    from service import soapmethod, soapexternal_url
    from serializers.primitive import String, Integer, Array, Boolean
    from serializers.clazz import ClassSerializer
else:
    try:
        if _python25:
            from common.soaplib_DQE.wsgi_soap import SimpleWSGISoapApp
            from common.soaplib_DQE.service import soapmethod, soapexternal_url
            from common.soaplib_DQE.serializers.primitive import String, Integer, Array, Boolean
            from common.soaplib_DQE.serializers.clazz import ClassSerializer
        else:
            from common27.soaplib_DQE.wsgi_soap import SimpleWSGISoapApp
            from common27.soaplib_DQE.service import soapmethod, soapexternal_url
            from common27.soaplib_DQE.serializers.primitive import String, Integer, Array, Boolean
            from common27.soaplib_DQE.serializers.clazz import ClassSerializer
    except:
        try:
            from wsgi_soap import SimpleWSGISoapApp
            from service import soapmethod, soapexternal_url
            from serializers.primitive import String, Integer, Array, Boolean
            from serializers.clazz import ClassSerializer
        except:
            pass

try:
    _maxbufferlines = 100
    if _python25:
        from common.dqesyslog import log as cronos_log, logflush as cronos_logflush
    else:
        from common27.dqesyslog import log as cronos_log, logflush as cronos_logflush
    rn = random.randint(1000, 9999)

    def portlog(s, port = '9000'):
        global _maxbufferlines
        if _log_file:
            cronos_log(s, logfn='%s\\%%s_%s_%s.log' % (_pathinitial + 'stat', port, rn), dopid=0, douuid=0, kind='', doflush=0, doprint=0, maxbufferlines=_maxbufferlines, timestampmask='%Y%m%d%H', simpleline=True)


except:

    def portlog(s, port = '9000'):
        return ''


_flag_rnvp = False
if _python25:
    from common.DQECompile import Compile
    import common.convertUTFISO as convertUTFISO
    import common.clientinter
else:
    from common27.DQECompile import Compile
    import common27.convertUTFISO as convertUTFISO
    import common27.clientinter
if _python25:
    import simplejson
else:
    import json as simplejson
try:
    import ServerDQEMail2V2 as ServerDQEMail
except:
    try:
        import ServerDQEMail2 as ServerDQEMail
    except:
        ServerDQEMail2 = None
        ServerDQEMail = None

try:
    import ServerDQETel
except:
    ServerDQETel = None

if _python25:
    from common.DQETools import log, _, logAndRaise, combineListIntoList
else:
    from common27.DQETools import log, _, logAndRaise, combineListIntoList
_compteur = 0
NomFichierLicence = ''
Licence = None
GLicence = []
_lenCP = 5
_lenCompteur = 100
_PosAdrNumero = 'L'
_lenDepartement = 2
_flag_bodacc = False
_dicopaysiso = {}
_flagdicopaysiso = False
_dicomelissa = {}
_flag_melissa = False
_dicobiteplant = {}
_dicoinfobip = {}
_comptevoie = {}
_flag_optel = False
_acao = ''
_json_acao = ''
_cpvilleInter = {}
_port_num = '7790'
_urltampon = ''
_urllicence = ''
_ipelfy = ''
_ipmail = ''
_flag_dbmail = False
_flag_mapcherchetypevoie = False
_flag_mapcherchevoie = False
_flag__mapinseecommune = False
_flag_comptevoie = False
_ipServeur = '127.0.0.1'
_patholdinsee = ''
_OldInseeTab = {}
_OldInseeValeurs = {}
_flag_debug = False
bodacc = {}
EXTspecial = None
_cns = 100
_flag_rnvpextend = False
_flag_ExtFRA = False
if _demo:
    sys.argv = []
    sys.argv.append('-pays:FRA')
    sys.argv.append('-IP:127.0.0.1')
    sys.argv.append('-PORT:8000')
    _lenCP = 5
for i in sys.argv:
    if i.upper().find('-CNS:') == 0:
        _cns = int(i.split(':')[1])
        _flag_recup_count_cp = _cns != 0
    elif i.upper().find('-SOAP_V2') == 0:
        _flag_soap_v2 = True
    elif i.upper().find('-CP_EXTEND') == 0:
        _flag_extend = True
    elif i.upper().find('-OPTIONS:') == 0:
        v = i.split(':')[1]
        for v1 in v.split(','):
            if v1 != '':
                if v1.upper() == 'RNVPEXTEND':
                    _flag_rnvpextend = True
                elif v1.upper() == 'FRAEXTEND':
                    _flag_ExtFRA = True

if _flag_rnvpextend:
    _flag_soap_v2 = True

def getMap(ko, ok):
    pasglop = ''.join([ chr(i) for i in range(256) if chr(i) not in ko ])
    pasglop += '\xc3\xc4\xc5'
    d = {}
    [ d.setdefault(k, v) for k, v in zip(ko, ok) ]
    table = ''.join([ d.get(chr(i), chr(i)) for i in range(256) ])
    return (table, pasglop)


_utf = '\xbe\xa7\xb1\x9f\xa1\xa0\xa2\xa4\xa3\xa5\xa6\xa9\xa8\xaa\xab\xad\xac\xae\xaf\xb3\xb2\xb4\xb6\xb5\xb8\xba\xb9\xbb\xbc\xbd\xbf\x87\x91\x81\x80\x82\x84\x85\x83\x86\x89\x88\x8a\x8b\x8d\x8c\x8e\x8f\x93\x92\x94\x96\x95\x9a\x99\x9b\x9c\x9d'
maps, notwanted = getMap(_utf + 'abcdefghijklmnopqrstuvwxyz\xe7\xf1\xdf\xe1\xe0\xe2\xe4\xe3\xe5\xe6\xe9\xe8\xea\xeb\xed\xec\xee\xef\xf3\xf2\xf4\xf6\xf5\xf8?\xfa\xf9\xfb\xfc\xfd\xff\xc7\xd1\xc1\xc0\xc2\xc4\xc5\xc3\xc6\xc9\xc8\xca\xcb\xcd\xcc\xce\xcf\xd3\xd2\xd4\xd6\xd5\xd8?\xda\xd9\xdb\xdc\xdd?ABCDEFGHIJKLMNOPQRSTUVWXYZ -+/:_\'"()[]{}0123456789\xa4,;.', 'ZCNBAAAAAAAEEEEIIIIOOOOOOUUUUYYCNAAAAAAEEEEEIIIIOOOOOUUUUY' + 'ABCDEFGHIJKLMNOPQRSTUVWXYZCN\xdfAAAAAAAEEEEIIIIOOOOO\xd8?UUUUYYCNAAAAAAEEEEEIIIIOOOOO\xd8?UUUUY?ABCDEFGHIJKLMNOPQRSTUVWXYZ              0123456789\xa4   ')
maps2, notwanted2 = getMap(_utf + 'abcdefghijklmnopqrstuvwxyz\xe7\xf1\xdf\xe1\xe0\xe2\xe4\xe3\xe5\xe6\xe9\xe8\xea\xeb\xed\xec\xee\xef\xf3\xf2\xf4\xf6\xf5\xf8?\xfa\xf9\xfb\xfc\xfd\xff\xc7\xd1\xc1\xc0\xc2\xc4\xc5\xc3\xc6\xc9\xc8\xca\xcb\xcd\xcc\xce\xcf\xd3\xd2\xd4\xd6\xd5\xd8?\xda\xd9\xdb\xdc\xdd?ABCDEFGHIJKLMNOPQRSTUVWXYZ ', 'ZCNBAAAAAAAEEEEIIIIOOOOOOUUUUYYCNAAAAAAEEEEEIIIIOOOOOUUUUY' + 'ABCDEFGHIJKLMNOPQRSTUVWXYZCN\xdfAAAAAAAEEEEIIIIOOOOO\xd8?UUUUYYCNAAAAAAEEEEEIIIIOOOOO\xd8?UUUUY?ABCDEFGHIJKLMNOPQRSTUVWXYZ ')
maps_voyelles, notwanted_voyelles = getMap('AEIOUY', '     ')
_38_abreviation = [{'ALLEE': 'ALL',
  'AVENUE': 'AV',
  'BOULEVARD': 'BD',
  'CENTRE': 'CTRE',
  'CENTRE COMMERCIAL': 'CCAL',
  'IMMEUBLE': 'IMM',
  'IMMEUBLES': 'IMM',
  'LIEU DIT': 'LD',
  'LOTISSEMENT': 'LOT',
  'PASSAGE': 'PAS',
  'PLACE': 'PL',
  'RESIDENCE': 'RES',
  'ROND POINT': 'RPT',
  'ROUTE': 'RTE',
  'SQUARE': 'SQ',
  'VILLAGE': 'VLGE',
  'ZONE D ACTIVITE': 'ZA',
  'IMPASSE': 'IMP',
  'ZONE D AMENAGEMENT CONCERTE': 'ZAC',
  'ZONE D AMENAGEMENT DIFFERE': 'ZAD',
  'ZONE INDUSTRIELLE': 'ZI',
  'ABBAYE': 'ABBA',
  'CARREFOUR': 'CARR',
  'AGGLOMERATION': 'AGGL',
  'CARRIERE': 'CARR',
  'AIRE': 'AIRE',
  'CARRIERES': 'CARR',
  'AIRES': 'AIRE',
  'CASTEL': 'CAST',
  'ALLEES': 'ALLE',
  'CAVEE': 'CAVE',
  'CHALET': 'CHAL',
  'ANCIENNES ROUTES': 'ANCI',
  'CHAPELLE': 'CHAP',
  'ANCIENS CHEMINS': 'ANCI',
  'CHARMILLE': 'CHAR',
  'ANSE': 'ANSE',
  'CHATEAU': 'CHAT',
  'ARCADE': 'ARCA',
  'CHAUSSEE': 'CHAU',
  'ARCADES': 'ARCA',
  'CHAUSSEES': 'CHAU',
  'AUTOROUTE': 'AUTO',
  'CHEMIN': 'CHEM',
  'BARRIERE': 'BARR',
  'CHEMIN VICINAL': 'CHEM',
  'BARRIERES': 'BARR',
  'CHEMINEMENT': 'CHEM',
  'BAS CHEMIN': 'BAS',
  'CHEMINEMENTS': 'CHEM',
  'BASTIDE': 'BAST',
  'CHEMINS': 'CHEM',
  'BASTION': 'BAST',
  'CHEMINS VICINAUX': 'CHEM',
  'BEGUINAGE': 'BEGU',
  'CHEZ': 'CHEZ',
  'BEGUINAGES': 'BEGU',
  'CITE': 'CITE',
  'BERGE': 'BERG',
  'CITES': 'CITE',
  'BERGES': 'BERG',
  'CLOITRE': 'CLOI',
  'BOIS': 'BOIS',
  'CLOS': 'CLOS',
  'BOUCLE': 'BOUC',
  'COL': 'COL',
  'BOURG': 'BOUR',
  'COLLINE': 'COLL',
  'BUTTE': 'BUTT',
  'COLLINES': 'COLL',
  'CALE': 'CALE',
  'CONTOUR': 'CONT',
  'CAMP': 'CAMP',
  'CORNICHE': 'CORN',
  'CAMPAGNE': 'CAMP',
  'CORNICHES': 'CORN',
  'CAMPING': 'CAMP',
  'COTE': 'COTE',
  'CARRE': 'CARR',
  'COTEAU': 'COTE',
  'CARREAU': 'CARR',
  'COTTAGE': 'COTT',
  'COTTAGES': 'COTT',
  'FOSSE': 'FOSS',
  'COUR': 'COUR',
  'FOSSES': 'FOSS',
  'COURS': 'COUR',
  'FOYER': 'FOYE',
  'DARSE': 'DARS',
  'GALERIE': 'GALE',
  'DEGRE': 'DEGR',
  'GALERIES': 'GALE',
  'DEGRES': 'DEGR',
  'GARE': 'GARE',
  'DESCENTE': 'DESC',
  'GARENNE': 'GARE',
  'DESCENTES': 'DESC',
  'GRAND BOULEVARD': 'GRAN',
  'DIGUE': 'DIGU',
  'GRAND ENSEMBLE': 'GRAN',
  'DIGUES': 'DIGU',
  'GRAND RUE': 'GRAN',
  'DOMAINE': 'DOMA',
  'GRANDE RUE': 'GRAN',
  'DOMAINES': 'DOMA',
  'GRANDES RUES': 'GRAN',
  'ECLUSE': 'ECLU',
  'GRANDS ENSEMBLES': 'GRAN',
  'ECLUSES': 'ECLU',
  'GRILLE': 'GRIL',
  'EGLISE': 'EGLI',
  'GRIMPETTE': 'GRIM',
  'ENCEINTE': 'ENCE',
  'GROUPE': 'GROU',
  'ENCLAVE': 'ENCL',
  'GROUPEMENT': 'GROU',
  'ENCLOS': 'ENCL',
  'GROUPES': 'GROU',
  'ESCALIER': 'ESCA',
  'HALLE': 'HALL',
  'ESCALIERS': 'ESCA',
  'HALLES': 'HALL',
  'ESPACE': 'ESPA',
  'HAMEAU': 'HAME',
  'ESPLANADE': 'ESPL',
  'HAMEAUX': 'HAME',
  'ESPLANADES': 'ESPL',
  'HAUT CHEMIN': 'HAUT',
  'ETANG': 'ETAN',
  'HAUTS CHEMINS': 'HAUT',
  'FAUBOURG': 'FAUB',
  'HIPPODROME': 'HIPP',
  'FERME': 'FERM',
  'HLM': 'HLM',
  'FERMES': 'FERM',
  'ILE': 'ILE',
  'FONTAINE': 'FONT',
  'IMPASSES': 'IMPA',
  'FORT': 'FORT',
  'JARDIN': 'JARD',
  'FORUM': 'FORU',
  'JARDINS': 'JARD',
  'JETEE': 'JETE',
  'PERIPHERIQUE': 'PERI',
  'JETEES': 'JETE',
  'PERISTYLE': 'PERI',
  'LEVEE': 'LEVE',
  'PETIT CHEMIN': 'PETI',
  'LOTISSEMENTS': 'LOTI',
  'PETITE ALLEE': 'PETI',
  'MAIL': 'MAIL',
  'PETITE AVENUE': 'PETI',
  'MAISON FORESTIERE': 'MAIS',
  'PETITE IMPASSE': 'PETI',
  'MANOIR': 'MANO',
  'PETITE ROUTE': 'PETI',
  'MARCHE': 'MARC',
  'PETITE RUE': 'PETI',
  'MARCHES': 'MARC',
  'PETITES ALLEES': 'PETI',
  'MAS': 'MAS',
  'PLACIS': 'PLAC',
  'METRO': 'METR',
  'PLAGE': 'PLAG',
  'MONTEE': 'MONT',
  'PLAGES': 'PLAG',
  'MONTEES': 'MONT',
  'PLAINE': 'PLAI',
  'MOULIN': 'MOUL',
  'PLAN': 'PLAN',
  'MOULINS': 'MOUL',
  'PLATEAU': 'PLAT',
  'MUSEE': 'MUSE',
  'PLATEAUX': 'PLAT',
  'NOUVELLE ROUTE': 'NOUV',
  'POINTE': 'POIN',
  'PALAIS': 'PALA',
  'PONT': 'PONT',
  'PARC': 'PARC',
  'PONTS': 'PONT',
  'PARCS': 'PARC',
  'PORCHE': 'PORC',
  'PARKING': 'PARK',
  'PORT': 'PORT',
  'PARVIS': 'PARV',
  'PORTE': 'PORT',
  'PASSAGE A NIVEAU': 'PASS',
  'PORTIQUE': 'PORT',
  'PASSE': 'PASS',
  'PORTIQUES': 'PORT',
  'PASSERELLE': 'PASS',
  'POTERNE': 'POTE',
  'PASSERELLES': 'PASS',
  'POURTOUR': 'POUR',
  'PASSES': 'PASS',
  'PRE': 'PRE',
  'PATIO': 'PATI',
  'PRESQU ILE': 'PRES',
  'PAVILLON': 'PAVI',
  'PROMENADE': 'PROM',
  'PAVILLONS': 'PAVI',
  'QUAI': 'QUAI',
  'QUARTIER': 'QUAR',
  'TERRASSES': 'TERR',
  'RACCOURCI': 'RACC',
  'TERRE PLEIN': 'TERR',
  'RAIDILLON': 'RAID',
  'TERTRE': 'TERT',
  'RAMPE': 'RAMP',
  'TERTRES': 'TERT',
  'REMPART': 'REMP',
  'TOUR': 'TOUR',
  'RESIDENCES': 'RESI',
  'TRAVERSE': 'TRAV',
  'ROC': 'ROC',
  'VAL': 'VAL',
  'ROCADE': 'ROCA',
  'VALLEE': 'VALL',
  'ROQUET': 'ROQU',
  'VALLON': 'VALL',
  'ROTONDE': 'ROTO',
  'VENELLE': 'VENE',
  'ROUTES': 'ROUT',
  'VENELLES': 'VENE',
  'RUE': 'RUE',
  'VIA': 'VIA',
  'RUELLE': 'RUEL',
  'VIEILLE ROUTE': 'VIEI',
  'RUELLES': 'RUEL',
  'VIEUX CHEMIN': 'VIEU',
  'RUES': 'RUES',
  'VILLA': 'VILL',
  'SENTE': 'SENT',
  'VILLAGES': 'VILL',
  'SENTES': 'SENT',
  'VILLAS': 'VILL',
  'SENTIER': 'SENT',
  'VOIE': 'VOIE',
  'SENTIERS': 'SENT',
  'VOIES': 'VOIE',
  'STADE': 'STAD',
  'ZONE': 'ZONE',
  'STATION': 'STAT',
  'ZONE A URBANISER EN PRIORITE': 'ZONE',
  'TERRAIN': 'TERR',
  'ZONE ARTISANALE': 'ZONE',
  'TERRASSE': 'TERR'},
 {'ADJUDANT': 'ADJ',
  'AERODROME': 'AERD',
  'AEROGARE': 'AERG',
  'AERONAUTIQUE': 'AERN',
  'AEROPORT': 'AERP',
  'AGENCE': 'AGCE',
  'AGRICOLE': 'AGRIC',
  'ANCIEN': 'ANC',
  'ANCIENNEMENT': 'ANC',
  'ANCIENNE': 'ANC',
  'ANCIENNES': 'ANC',
  'APPARTEMENT': 'APP',
  'APPARTEMENTS': 'APP',
  'ARMEMENT': 'ARMT',
  'ARRONDISSEMENT': 'ARR',
  'ASPIRANT': 'ASP',
  'ASSOCIATION': 'ASSOC',
  'ASSURANCE': 'ASSUR',
  'ATELIER': 'AT',
  'BARAQUEMENT': 'BRQ',
  'BASSE': 'BAS',
  'BASSES': 'BAS',
  'BATAILLON': 'BTN',
  'BATAILLONS': 'BTN',
  'BIS': 'B',
  'BOITE POSTALE': 'BP',
  'CABINET': 'CAB',
  'CANTON': 'CANT',
  'CANTONAL': 'CANT',
  'CARDINAL': 'CDL',
  'CASE POSTALE': 'CP',
  'CHAMBRE': 'CHBR',
  'CITADELLE': 'CTD',
  'COLLEGE': 'COLL',
  'COLONEL': 'CNL',
  'COLONIE': 'COLO',
  'COMITE': 'CTE',
  'COMMANDANT': 'CDT',
  'COMMERCIAL': 'CIAL',
  'COMMUNE': 'COM',
  'COMMUNAL': 'COM',
  'COMMUNAUX': 'COM',
  'COMPAGNIE': 'CIE',
  'COMPAGNON': 'COMP',
  'COMPAGNONS': 'COMP',
  'COOPERATIVE': 'COOP',
  'COURSE SPECIALE': 'CS',
  'CROIX': 'CRX',
  'DEPARTEMENTAL': 'DEP',
  'DEPARTEMENTAUX': 'DEP',
  'DIRECTION': 'DIR',
  'DIRECTEUR': 'DIR',
  'DIVISION': 'DIV',
  'DOCTEUR': 'DR',
  'DELEGATION': 'DELEG',
  'ECONOMIE': 'ECO',
  'ECONOMIQUE': 'ECO',
  'ECRIVAIN': 'ECRIV',
  'ECRIVAINS': 'ECRIV',
  'ENSEIGNEMENT': 'ENST',
  'ENSEMBLE': 'ENS',
  'ENTREE': 'ENT',
  'ENTREES': 'ENT',
  'ENTREPRISE': 'ENTR',
  'ENTREPRISES': 'ENTR',
  'EPOUX': 'EP',
  'EPOUSE': 'EP',
  'ETABLISSEMENT': 'ETS',
  'ETABLISSEMENTS': 'ETS',
  'ETAGE': 'ETG',
  'ETAGES': 'ETG',
  'ETAT MAJOR': 'EM',
  'EVEQUE': 'EVQ',
  'FACULTE': 'FAC',
  'FORET': 'FOR',
  'FORESTIER': 'FOR',
  'FRANCAIS': 'FR',
  'FRANCAISE': 'FR',
  'FUSILIERS': 'FUS',
  'GENERAL': 'GAL',
  'GENDARMERIE': 'GEND',
  'GOUVERNEUR': 'GOU',
  'GROUVERNEMENT': 'GOUV',
  'GOUVERNEMENTAL': 'GOUV',
  'GRAND': 'GD',
  'GRANDE': 'GDE',
  'GRANDES': 'GDES',
  'GRANDS': 'GDS',
  'HAUT': 'HT',
  'HAUTE': 'HTE',
  'HAUTES': 'HTES',
  'HAUTS': 'HTS',
  'HOPITAL': 'HOP',
  'HOPITAUX': 'HOP',
  'HOSPICE': 'HOSP',
  'HOSPITALIER': 'HOSP',
  'HOTEL': 'HOT',
  'INFANTERIE': 'INFANT',
  'INFERIEUR': 'INF',
  'INGENIEUR': 'ING',
  'INSPECTEUR': 'INSP',
  'INSTITUT': 'INST',
  'INTERNATIONAL': 'INTERN',
  'INTERNATIONALE': 'INTERN',
  'LABORATOIRE': 'LABO',
  'LIEUTENANT': 'LT',
  'LIEUTENANT DE VAISSEAU': 'LTDV',
  'MADAME': 'MME',
  'MADEMOISELLE': 'MLLE',
  'MAGASIN': 'MAG',
  'MAISON': 'MAIS',
  'MAITRE': 'ME',
  'MARECHAL': 'MAL',
  'MARITIME': 'MAR',
  'MEDECIN': 'MED',
  'MEDICAL': 'MED',
  'MESDAMES': 'MMES',
  'MESDEMOISELLES': 'MLLES',
  'MESSIEURS': 'MM',
  'MILITAIRE': 'MIL',
  'MINISTERE': 'MIN',
  'MONSIEUR': 'M',
  'MONSEIGNEUR': 'MGR',
  'MUNICIPAL': 'MUN',
  'MUTUEL': 'MUT',
  'NATIONAL': 'NAL',
  'NOTRE DAME': 'ND',
  'NOUVEAU': 'NOUV',
  'NOUVELLE': 'NOUV',
  'OBSERVATOIRE': 'OBS',
  'PASTEUR': 'PAST',
  'PETIT': 'PT',
  'PETITE': 'PTE',
  'PETITS': 'PTS',
  'PETITES': 'PTES',
  'POLICE': 'POL',
  'PREFET': 'PREF',
  'PREFECTURE': 'PREF',
  'PRESIDENT': 'PDT',
  'PROFESSEUR': 'PR',
  'PROFESSIONNEL': 'PROF',
  'PROFESSIONNELLE': 'PROF',
  'PROLONGE': 'PROL',
  'PROLONGEE': 'PROL',
  'PROPRIETE': 'PROP',
  'QUATER': 'Q',
  'QUINQUIES': 'C',
  'RECTEUR': 'RECT',
  'REGIMENT': 'RGT',
  'REGION': 'REG',
  'REGIONAL': 'REG',
  'REPUBLIQUE': 'REP',
  'RESTAURENT': 'REST',
  'SANATORIUM': 'SANA',
  'SAINT': 'ST',
  'SAINTE': 'STE',
  'SAINTES': 'STES',
  'SAINTS': 'STS',
  'SERGENT': 'SGT',
  'SERVICE': 'SCE',
  'SOCIETE': 'SOC',
  'SOUS PREFET': 'SPREF',
  'SOUS PREFECTURE': 'SPREF',
  'SOUS COUVERT': 'SC',
  'SUPERIEUR': 'SUP',
  'SUPERIEURE': 'SUP',
  'SYNDICAT': 'SYND',
  'TECHNICIEN': 'TECH',
  'TECHNIQUE': 'TECH',
  'TER': 'T',
  'TRI SERVICE ARRIVEE': 'TSA',
  'TUNNEL': 'TUN',
  'UNIVERSITE': 'UNIV',
  'UNIVERSITAIRE': 'UNVT',
  'VELODROME': 'VELOD',
  'VEUVE': 'VVE',
  'VIEILLE': 'VIEL',
  'VIEILLES': 'VIEL',
  'VIEUX': 'VX',
  'ADJ': 'ADJ',
  'AGRIC': 'AGRIC',
  'ARR': 'ARR',
  'BRQ': 'BRQ',
  'CAB': 'CAB',
  'CTD': 'CTD',
  'CIAL': 'CIAL',
  'COMP': 'COMP',
  'DIR': 'DIR',
  'ECO': 'ECO',
  'ENT': 'ENT',
  'ETS': 'ETS',
  'FAC': 'FAC',
  'GEND': 'GEND',
  'GDES': 'GDES',
  'HOP': 'HOP',
  'ING': 'ING',
  'LABO': 'LABO',
  'MAG': 'MAG',
  'MMES': 'MMES',
  'MGR': 'MGR',
  'OBS': 'OBS',
  'PREF': 'PREF',
  'PROL': 'PROL',
  'RGT': 'RGT',
  'ST': 'ST',
  'SPREF': 'SPREF',
  'SYND': 'SYND',
  'TUN': 'TUN',
  'VIEL': 'VIEL',
  'AERG': 'AERG',
  'ANC': 'ANC',
  'ASSOC': 'ASSOC',
  'BAS': 'BAS',
  'CANT': 'CANT',
  'CNL': 'CNL',
  'COM': 'COM',
  'CS': 'CS',
  'DIV': 'DIV',
  'ECRIV': 'ECRIV',
  'ENTR': 'ENTR',
  'ETG': 'ETG',
  'FOR': 'FOR',
  'GOUV': 'GOUV',
  'HT': 'HT',
  'HOSP': 'HOSP',
  'INST': 'INST',
  'LTDV': 'LTDV',
  'ME': 'ME',
  'MM': 'MM',
  'MUT': 'MUT',
  'PT': 'PT',
  'PDT': 'PDT',
  'PROP': 'PROP',
  'REG': 'REG',
  'STES': 'STES',
  'SC': 'SC',
  'TECH': 'TECH',
  'UNVT': 'UNVT',
  'AERP': 'AERP',
  'ANC': 'ANC',
  'AT': 'AT',
  'BTN': 'BTN',
  'CP': 'CP',
  'CTE': 'CTE',
  'CIE': 'CIE',
  'DEP': 'DEP',
  'DELEG': 'DELEG',
  'ENS': 'ENS',
  'EP': 'EP',
  'EM': 'EM',
  'FR': 'FR',
  'GD': 'GD',
  'HTES': 'HTES',
  'INFANT': 'INFANT',
  'INTERN': 'INTERN',
  'MLLE': 'MLLE',
  'MAR': 'MAR',
  'MIN': 'MIN',
  'ND': 'ND',
  'PTS': 'PTS',
  'PROF': 'PROF',
  'C': 'C',
  'REST': 'REST',
  'SGT': 'SGT',
  'SUP': 'SUP',
  'TSA': 'TSA',
  'VVE': 'VVE',
  'APP': 'APP',
  'BP': 'BP',
  'GAL': 'GAL',
  'HOP': 'HOP',
  'MED': 'MED',
  'NOUV': 'NOUV',
  'POL': 'POL',
  'SOC': 'SOC',
  'DEP': 'DEP',
  'VVE': 'VVE',
  'PTES': 'PTES',
  'ETS': 'ETS',
  'GDES': 'GDES',
  'REP': 'REP',
  'TECH': 'TECH',
  'DR': 'DR',
  'SYND': 'SYND',
  'DIR': 'DIR',
  'PREF': 'PREF',
  'FR': 'FR',
  'GAL': 'GAL',
  'BRQ': 'BRQ',
  'PROF': 'PROF',
  'COMP': 'COMP',
  'GOUV': 'GOUV',
  'SPREF': 'SPREF',
  'ANC': 'ANC',
  'MIL': 'MIL',
  'MUT': 'MUT',
  'MAG': 'MAG',
  'MGR': 'MGR',
  'FOR': 'FOR',
  'VELOD': 'VELOD',
  'PROL': 'PROL',
  'RECT': 'RECT',
  'NAL': 'NAL',
  'TECH': 'TECH',
  'MAR': 'MAR',
  'PROP': 'PROP',
  'ECO': 'ECO',
  'ST': 'ST',
  'ANC': 'ANC',
  'INTERN': 'INTERN',
  'CP': 'CP',
  'MIN': 'MIN',
  'HOP': 'HOP',
  'ETG': 'ETG',
  'HTS': 'HTS',
  'REG': 'REG',
  'ANC': 'ANC',
  'EP': 'EP',
  'ND': 'ND',
  'COLL': 'COLL',
  'HOSP': 'HOSP',
  'BP': 'BP',
  'ENT': 'ENT',
  'NOUV': 'NOUV',
  'ANC': 'ANC',
  'ARR': 'ARR',
  'PREF': 'PREF',
  'COLO': 'COLO',
  'LT': 'LT',
  'HTES': 'HTES',
  'PROF': 'PROF',
  'INSP': 'INSP',
  'ENT': 'ENT',
  'STES': 'STES',
  'PT': 'PT',
  'GD': 'GD',
  'MED': 'MED',
  'SOC': 'SOC',
  'HOSP': 'HOSP',
  'LTDV': 'LTDV',
  'COOP': 'COOP',
  'FUS': 'FUS',
  'INFANT': 'INFANT',
  'APP': 'APP',
  'AERD': 'AERD',
  'AERG': 'AERG',
  'ECRIV': 'ECRIV',
  'HT': 'HT',
  'INF': 'INF',
  'SGT': 'SGT',
  'SANA': 'SANA',
  'ECRIV': 'ECRIV',
  'PAST': 'PAST',
  'LABO': 'LABO',
  'APP': 'APP',
  'MAL': 'MAL',
  'SUP': 'SUP',
  'MLLE': 'MLLE',
  'Q': 'Q',
  'CHBR': 'CHBR',
  'CDL': 'CDL',
  'AGCE': 'AGCE',
  'AGRIC': 'AGRIC',
  'ENTR': 'ENTR',
  'SCE': 'SCE',
  'BAS': 'BAS',
  'REG': 'REG',
  'CIAL': 'CIAL',
  'MMES': 'MMES',
  'GEND': 'GEND',
  'COM': 'COM',
  'GDS': 'GDS',
  'ECO': 'ECO',
  'FR': 'FR',
  'TUN': 'TUN',
  'DEP': 'DEP',
  'PR': 'PR',
  'HOT': 'HOT',
  'VIEL': 'VIEL',
  'CAB': 'CAB',
  'CS': 'CS',
  'GDE': 'GDE',
  'EP': 'EP',
  'T': 'T',
  'ASSOC': 'ASSOC',
  'ING': 'ING',
  'BTN': 'BTN',
  'BAS': 'BAS',
  'SPREF': 'SPREF',
  'M': 'M',
  'PTE': 'PTE',
  'PROL': 'PROL',
  'ADJ': 'ADJ',
  'DELEG': 'DELEG',
  'PTS': 'PTS',
  'PDT': 'PDT',
  'C': 'C',
  'MM': 'MM',
  'HOP': 'HOP',
  'INST': 'INST',
  'EVQ': 'EVQ',
  'ETG': 'ETG',
  'REST': 'REST',
  'COMP': 'COMP',
  'OBS': 'OBS',
  'ENS': 'ENS',
  'GOU': 'GOU',
  'CTD': 'CTD',
  'BTN': 'BTN',
  'MLLES': 'MLLES',
  'COM': 'COM',
  'CNL': 'CNL',
  'MED': 'MED',
  'FOR': 'FOR',
  'RGT': 'RGT',
  'SUP': 'SUP',
  'ASSUR': 'ASSUR',
  'COM': 'COM',
  'UNVT': 'UNVT',
  'CRX': 'CRX',
  'VIEL': 'VIEL',
  'HTE': 'HTE',
  'FAC': 'FAC',
  'CDT': 'CDT',
  'CANT': 'CANT',
  'DIR': 'DIR',
  'EM': 'EM',
  'MAIS': 'MAIS',
  'ME': 'ME',
  'UNIV': 'UNIV',
  'INTERN': 'INTERN',
  'CTE': 'CTE',
  'GOUV': 'GOUV',
  'B': 'B',
  'DIV': 'DIV',
  'TSA': 'TSA',
  'ENST': 'ENST',
  'AERN': 'AERN',
  'CIE': 'CIE',
  'ETS': 'ETS',
  'NOUV': 'NOUV',
  'AT': 'AT',
  'ENTR': 'ENTR',
  'POL': 'POL',
  'ARMT': 'ARMT',
  'MUN': 'MUN',
  'SC': 'SC',
  'STS': 'STS',
  'MME': 'MME',
  'AERP': 'AERP',
  'VX': 'VX',
  'STE': 'STE',
  'ASP': 'ASP',
  'CANT': 'CANT'},
 {'COOPERATIVE D UTILISATION DE MATERIEL AGRICOLE EN COMMUN': 'CUMA',
  'ETABLISSEMENT PUBLIC ADMINISTRATIF': 'EPA',
  'ETABLISSEMENT PUBLIC A CARACTERE INDUSTRIEL ET COMMERCIAL': 'EPIC',
  'GROUPEMENT AGRICOLE D EXPLOITATION EN COMMUN': 'GAEC',
  'GROUPEMENT EUROPEEN D INTERET ECONOMIQUE': 'GEIE',
  'GROUPEMET D INTERET ECONOMIQUE': 'GIE',
  'GROUPEMENT D INTERET PUBLIC': 'GIP',
  'OFFICE PUBLIC D HABITATION A LOYER MODERE': 'OPHLM',
  'SOCIETE ANONYME': 'SA',
  'SOCIETE D AMENAGEMENT FONCIER ET D EQUIPEMENT RURAL': 'SAFER',
  'SOCIETE A RESPONSABILITE LIMITEE': 'SARL',
  'SOCIETE COOPERATIVE OUVRIERE DE PRODUCTION ET DE CREDIT': 'SCOP',
  'SOCIETE SIVILE PROFESSIONELLE': 'SCP',
  'SOCIETE CIVILE DE PLACEMENT COLLECTIF IMMOBILIER': 'SCPI',
  'SOCIETE D ECONOMIE MIXTE': 'SEM',
  'SOCIETE D INTERET COLLECTIF AGRICOLE': 'SICA',
  'SOCIETE D INVESTISSEMENT A CAPITAL VARIABLE': 'SICAV',
  'SOCIETE IMMOBILIERE POUR LE COMMERCE ET L INDUSTRIE': 'SICOMI',
  'SYNDICAT INTERCOMMUNAL A VOCATION MULTIPLE': 'SIVOM',
  'SYNDICAT INTERCOMMUNAL A VOCATION UNIQUE': 'SIVU',
  'SOCIETE MIXTE D INTERET AGRICOLE': 'SMIA',
  'SOCIETE EN NOM COLLECTIF': 'SNC'},
 {'PREMIER': '1E',
  'DEUXIEME': '2E',
  'TROISIEME': '3E',
  'QUATRIEME': '4E',
  'CINQUIEME': '5E',
  'SIXIEME': '6E',
  'SEPTIEME': '7E',
  'HUITIEME': '8E',
  'NEUVIEME': '9E',
  'DIXIEME': '10E',
  'ONZIEME': '11E',
  'DOUZIEME': '12E',
  'TREIZIEME': '13E',
  'QUATORZIEME': '14E',
  'QUINZIEME': '15E',
  'SEIZIEME': '16E',
  'DIXSEPTIEME': '17E',
  'DIXHUITIEME': '18E',
  'DIXNEUVIEME': '19E',
  'VINGTIEME': '20E',
  '1E': 'PREMIER',
  '2E': 'DEUXIEME',
  '3E': 'TROISIEME',
  '4E': 'QUATRIEME',
  '5E': 'CINQUIEME',
  '6E': 'SIXIEME',
  '7E': 'SEPTIEME',
  '8E': 'HUITIEME',
  '9E': 'NEUVIEME',
  '10E': 'DIXIEME',
  '11E': 'ONZIEME',
  '12E': 'DOUZIEME',
  '13E': 'TREIZIEME',
  '14E': 'QUATORZIEME',
  '15E': 'QUINZIEME',
  '16E': 'SEIZIEME',
  '17E': 'DIXSEPTIEME',
  '18E': 'DIXHUITIEME',
  '19E': 'DIXNEUVIEME',
  '20E': 'VINGTIEME'}]
_38_prenoms = {'ABRIEL': 1,
 'ACHILLE': 1,
 'ADALBERT': 1,
 'ADALGIS': 1,
 'ADALRIC': 1,
 'ADALRIK': 1,
 'ADELAIDE': 1,
 'ADELARD': 1,
 'ADELE': 1,
 'ADELIN': 1,
 'ADELINE': 1,
 'ADEMAR': 1,
 'ADOLPHE': 1,
 'ADONIS': 1,
 'ADRIEN': 1,
 'AGATHE': 1,
 'AGNES': 1,
 'AIME': 1,
 'AIMERIC': 1,
 'AIMERSENDE': 1,
 'AJAX': 1,
 'ALAIN': 1,
 'ALAN': 1,
 'ALANN': 1,
 'ALARIC': 1,
 'ALARIK': 1,
 'ALBAN': 1,
 'ALBERIC': 1,
 'ALBERT': 1,
 'ALBERTIN': 1,
 'ALCESTE': 1,
 'ALCIBIADE': 1,
 'ALCUIN': 1,
 'ALDEGONDE': 1,
 'ALEXANDRE': 1,
 'ALFRED': 1,
 'ALICE': 1,
 'ALISTAIR': 1,
 'ALIX': 1,
 'ALLAN': 1,
 'ALON': 1,
 'ALPHONSE': 1,
 'ALRIC': 1,
 'ALRIK': 1,
 'AMAEL': 1,
 'AMAND': 1,
 'AMAURY': 1,
 'AMEDEE': 1,
 'AMELIE': 1,
 'ANFRAY': 1,
 'ANGER': 1,
 'ANNAIG': 1,
 'ANNICK': 1,
 'ANSELME': 1,
 'ANTHELME': 1,
 'ANTHONY': 1,
 'ANTOINE': 1,
 'ANTONIN': 1,
 'APHRODITE': 1,
 'APOLLON': 1,
 'ARCHIBALD': 1,
 'ARDUIN': 1,
 'ARES': 1,
 'ARISTIDE': 1,
 'ARISTOPHANE': 1,
 'ARISTOTE': 1,
 'ARLETTE': 1,
 'ARMAND': 1,
 'ARMEL': 1,
 'ARMELLE': 1,
 'ARNALD': 1,
 'ARNAUD': 1,
 'ARNEGONDE': 1,
 'ARNOLD': 1,
 'ARNOUL': 1,
 'ARNVALD': 1,
 'ARTEMIS': 1,
 'ARTHUR': 1,
 'ARWEN': 1,
 'ARZEL': 1,
 'ASPASIE': 1,
 'ASSELIN': 1,
 'ASTRID': 1,
 'ATHENA': 1,
 'AUBERT': 1,
 'AUBIN': 1,
 'AUBOURG': 1,
 'AUBREE': 1,
 'AUBREY': 1,
 'AUBRY': 1,
 'AUDE': 1,
 'AUDRAN': 1,
 'AUDREY': 1,
 'AUGUSTE': 1,
 'AURELIEN': 1,
 'AURIANE': 1,
 'AURORE': 1,
 'AUSTIN': 1,
 'AUVRAY': 1,
 'AYMAR': 1,
 'BARNABE': 1,
 'BATHILDE': 1,
 'BAUDOUIN': 1,
 'BAUDRY': 1,
 'BENEDICTE': 1,
 'BENJAMIN': 1,
 'BENOIT': 1,
 'BEOWULF': 1,
 'BERANGER': 1,
 'BERENGER': 1,
 'BERENICE': 1,
 'BERNADETTE': 1,
 'BERNARD': 1,
 'BERNARDETTE': 1,
 'BERNARDIN': 1,
 'BERTHE': 1,
 'BERTHILDE': 1,
 'BERTHOLD': 1,
 'BERTILLE': 1,
 'BERTIN': 1,
 'BERTRAND': 1,
 'BLANCHE': 1,
 'BRANDON': 1,
 'BRAYAN': 1,
 'BRIAC': 1,
 'BRIAN': 1,
 'BRICE': 1,
 'BRIEUC': 1,
 'BRUNEHILDE': 1,
 'BRUNHILD': 1,
 'BRUNIMONDE': 1,
 'BRUNISSENDE': 1,
 'BRUNO': 1,
 'BRYAN': 1,
 'BRYCE': 1,
 'CALVIN': 1,
 'CARIBERT': 1,
 'CARINA': 1,
 'CARINE': 1,
 'CARL': 1,
 'CARLOMAN': 1,
 'CARMEN': 1,
 'CAROLE': 1,
 'CAROLINE': 1,
 'CASSANDRE': 1,
 'CATHERINE': 1,
 'CECILE': 1,
 'CECILIA': 1,
 'CEDRIC': 1,
 'CELESTIN': 1,
 'CELINE': 1,
 'CELIO': 1,
 'CESAR': 1,
 'CHARLES': 1,
 'CHARLOTTE': 1,
 'CHILDERIC': 1,
 'CHILPERIC': 1,
 'CLAUDE': 1,
 'CLAUDINE': 1,
 'CLEMENCE': 1,
 'CLEMENT': 1,
 'CLIO': 1,
 'CLODOMIR': 1,
 'CLOTAIRE': 1,
 'CLOTHILDE': 1,
 'CLOTILDE': 1,
 'CLOVIS': 1,
 'CONRAD': 1,
 'CONSTANCE': 1,
 'CORALIE': 1,
 'CORALINE': 1,
 'CORALY': 1,
 'CORANTIN': 1,
 'CORENTIN': 1,
 'CORENTINE': 1,
 'CUNEGONDE': 1,
 'CYRIL': 1,
 'DAGMAR': 1,
 'DAGOBERT': 1,
 'DANAE': 1,
 'DEIRDRE': 1,
 'DELWYN': 1,
 'DIANE': 1,
 'DIDRIC': 1,
 'DIDRIK': 1,
 'DILWEN': 1,
 'DOMINIQUE': 1,
 'DONOVAN': 1,
 'DOUGLAS': 1,
 'DUNCAN': 1,
 'DYCLAN': 1,
 'EDDY': 1,
 'EDERN': 1,
 'EDGAR': 1,
 'EDMOND': 1,
 'EDOUARD': 1,
 'EDWIGE': 1,
 'EDWIN': 1,
 'EGBERT': 1,
 'EGMONT': 1,
 'ELFRIEDE': 1,
 'ELVIRE': 1,
 'EMELINE': 1,
 'EMERIC': 1,
 'EMILE': 1,
 'EMILIENNE': 1,
 'ENGUERRAND': 1,
 'EPHISE': 1,
 'ERIC': 1,
 'ERMELINDE': 1,
 'ERMENGARDE': 1,
 'ERWAN': 1,
 'ERWANN': 1,
 'ERWIN': 1,
 'ESCHYLE': 1,
 'EUDES': 1,
 'EVRARD': 1,
 'EWALD': 1,
 'FABIEN': 1,
 'FABIOLA': 1,
 'FELIX': 1,
 'FERDINAND': 1,
 'FERNAND': 1,
 'FIACRE': 1,
 'FIORE': 1,
 'FLAVIE': 1,
 'FLORE': 1,
 'FLORENT': 1,
 'FOUCART': 1,
 'FOULQUES': 1,
 'FRANCE': 1,
 'FRANCK': 1,
 'FRANCOIS': 1,
 'FRANCOISE': 1,
 'FRANCON': 1,
 'FRANK': 1,
 'FRANZ': 1,
 'FREDEGONDE': 1,
 'FREDERIC': 1,
 'FROBERT': 1,
 'FULRAD': 1,
 'GABIN': 1,
 'GAEL': 1,
 'GANAEL': 1,
 'GANELON': 1,
 'GARANGER': 1,
 'GARY': 1,
 'GASTON': 1,
 'GAUDERIC': 1,
 'GAUDERIQUE': 1,
 'GAUTIER': 1,
 'GENEVIEVE': 1,
 'GEOFFREY': 1,
 'GEOFFROY': 1,
 'GERALD': 1,
 'GERARD': 1,
 'GERAUD': 1,
 'GERMONDA': 1,
 'GERSENDE': 1,
 'GERTRUDE': 1,
 'GHISLAIN': 1,
 'GILBERT': 1,
 'GILDAS': 1,
 'GINA': 1,
 'GISELBERT': 1,
 'GISELE': 1,
 'GLADYS': 1,
 'GLENN': 1,
 'GODARD': 1,
 'GODEFROID': 1,
 'GODEFROY': 1,
 'GODERIC': 1,
 'GODERICK': 1,
 'GODFROY': 1,
 'GONDACRE': 1,
 'GONTHIER': 1,
 'GONTRAN': 1,
 'GONZALVE': 1,
 'GORDIUS': 1,
 'GOULVEN': 1,
 'GOULWEN': 1,
 'GREGOIRE': 1,
 'GRIMAUT': 1,
 'GRIMOALD': 1,
 'GUDRUN': 1,
 'GUDULE': 1,
 'GUENIEVRE': 1,
 'GUENOLE': 1,
 'GUERRIC': 1,
 'GUILLAUME': 1,
 'GUNDA': 1,
 'GUNTER': 1,
 'GURVAN': 1,
 'GUY': 1,
 'GWENAEL': 1,
 'GWENAELLE': 1,
 'GWENDAL': 1,
 'GWENDOLINE': 1,
 'GWENOLA': 1,
 'GWIDEL': 1,
 'GWLADYS': 1,
 'HAMELIN': 1,
 'HAROLD': 1,
 'HEBERT': 1,
 'HECTOR': 1,
 'HECUBE': 1,
 'HEGESIPPE': 1,
 'HELENE': 1,
 'HELESINDE': 1,
 'HELLOUIN': 1,
 'HENRI': 1,
 'HENRY': 1,
 'HERACLES': 1,
 'HERBERT': 1,
 'HERCULE': 1,
 'HERLE': 1,
 'HERLUIN': 1,
 'HERMANN': 1,
 'HERMES': 1,
 'HERVE': 1,
 'HEUDEBERT': 1,
 'HEUDEBOURG': 1,
 'HILDEBOLD': 1,
 'HILDEBRAND': 1,
 'HILDEBURG IS ': 1,
 'HILDEGARDE': 1,
 'HUBERT': 1,
 'HUE': 1,
 'HUGO': 1,
 'HUGUES': 1,
 'HUMBERT': 1,
 'IGNACE': 1,
 'IGNAT': 1,
 'IGOR': 1,
 'INGE': 1,
 'INGO': 1,
 'INGOLF': 1,
 'INGONDE': 1,
 'INGRID': 1,
 'INGULF': 1,
 'ISAAC': 1,
 'ISAMBERT': 1,
 'ISEMBARD': 1,
 'ISEMBERT': 1,
 'ISOLDE': 1,
 'JACOB': 1,
 'JAOUEN': 1,
 'JASON': 1,
 'JENNIFER': 1,
 'JEROME': 1,
 'JESUS': 1,
 'JOACHIM': 1,
 'JOSUE': 1,
 'JUDICAEL': 1,
 'JULES': 1,
 'JULIAN': 1,
 'JULIE': 1,
 'JULIEN': 1,
 'JULVEN': 1,
 'JUNIEN': 1,
 'JUSTIN': 1,
 'JEAN': 1,
 'JEANNE': 1,
 'KARL': 1,
 'KELVIN': 1,
 'KEN': 1,
 'KENAN': 1,
 'KENNY': 1,
 'KERIAN': 1,
 'KEVIN': 1,
 'KILIAN': 1,
 'KILLIAN': 1,
 'KILLYAN': 1,
 'KILYAN': 1,
 'KLERVI': 1,
 'KNUT': 1,
 'KRIEMHILD': 1,
 'KUNIGUNDA': 1,
 'LAMBERT': 1,
 'LATITIA': 1,
 'LAURA': 1,
 'LAURE': 1,
 'LAURENT': 1,
 'LAURY': 1,
 'LAZARE': 1,
 'LEONARD': 1,
 'LEONIDAS': 1,
 'LEOPOLD': 1,
 'LILIAN': 1,
 'LIVIA': 1,
 'LOAN': 1,
 'LOANN': 1,
 'LOGAN': 1,
 'LOHAN': 1,
 'LOTHAIRE': 1,
 'LOTHART': 1,
 'LOUIS': 1,
 'LOUISE': 1,
 'LUAN': 1,
 'LUC': 1,
 'LUCIEN LUCE': 1,
 'LUDIVINE': 1,
 'LUDOVIC': 1,
 'LUDWEG': 1,
 'LUDWIG': 1,
 'LYDERIC': 1,
 'MACLOU': 1,
 'MAE': 1,
 'MAEL': 1,
 'MAELLE': 1,
 'MAIWENN': 1,
 'MALAURIE': 1,
 'MALAURY': 1,
 'MALLAURY': 1,
 'MALLORY': 1,
 'MALO': 1,
 'MALORIE': 1,
 'MALORY': 1,
 'MALOU': 1,
 'MALVINA': 1,
 'MANFRED': 1,
 'MARC': 1,
 'MARCEL': 1,
 'MARIE': 1,
 'MARINE': 1,
 'MARIUS': 1,
 'MATHILDE': 1,
 'MAUD': 1,
 'MAUDAN': 1,
 'MAUDE': 1,
 'MAUGER': 1,
 'MAURICE': 1,
 'MAXIME': 1,
 'MELWYN': 1,
 'MERLIN': 1,
 'METIG': 1,
 'MOISE': 1,
 'MORGAN': 1,
 'MORGANE': 1,
 'MOSES': 1,
 'MOSHE': 1,
 'MYRIAM': 1,
 'NANTHILDE': 1,
 'NARCISSE': 1,
 'NATHALIE': 1,
 'NELLY': 1,
 'NICOLAS': 1,
 'NIGEL': 1,
 'NOLAN': 1,
 'NOLANN': 1,
 'NORBERT': 1,
 'NORMAN': 1,
 'OCTAVE': 1,
 'ODETTE': 1,
 'ODILE': 1,
 'ODILON': 1,
 'ODON': 1,
 'OLIVIER': 1,
 'ONFRAY': 1,
 'ONFROI': 1,
 'ONFROY': 1,
 'OSBERN': 1,
 'OSCAR': 1,
 'OSMOND': 1,
 'OSWALD': 1,
 'OTHMAR': 1,
 'OTHON': 1,
 'PAMPHILE': 1,
 'PARIS': 1,
 'PAUL': 1,
 'PENELOPE': 1,
 'PHILBERT': 1,
 'PHILIBERT': 1,
 'PHILIPPE': 1,
 'PIA': 1,
 'PIERRE': 1,
 'PRISCA': 1,
 'QUENTIN': 1,
 'QUINCTILE': 1,
 'QUINT': 1,
 'QUINTILIEN': 1,
 'QUINTILLE': 1,
 'RADEGONDE': 1,
 'RAGENVALD': 1,
 'RAGNAR': 1,
 'RALF': 1,
 'RAOUL': 1,
 'RAYMOND': 1,
 'REGINALD': 1,
 'REGIS': 1,
 'REMI': 1,
 'REMY': 1,
 'RENAN': 1,
 'RENARD': 1,
 'RENAUD': 1,
 'RENIER': 1,
 'RIAN': 1,
 'RICHARD': 1,
 'RICHER': 1,
 'RIGOMER': 1,
 'RIVOAL': 1,
 'RIVOUAL': 1,
 'RIWALENN': 1,
 'RIWANN': 1,
 'RIWANON': 1,
 'ROBERT': 1,
 'RODERIC': 1,
 'RODOLPHE': 1,
 'RODRIGUE': 1,
 'ROGER': 1,
 'ROLAND': 1,
 'ROLF': 1,
 'ROMAIN': 1,
 'ROMARIC': 1,
 'ROMPHAIRE': 1,
 'RONAN': 1,
 'ROWEEN': 1,
 'ROWEN': 1,
 'ROWENA': 1,
 'RUDOLF': 1,
 'RUDOLPH': 1,
 'RUNAHILD': 1,
 'RUNHILD': 1,
 'RYAN': 1,
 'SABIN': 1,
 'SANDRINE': 1,
 'SATURNIN': 1,
 'SEBASTIEN': 1,
 'SEVERINE': 1,
 'SEYLAN': 1,
 'SIEGDEBERT': 1,
 'SIEGFRIED': 1,
 'SIEGRID': 1,
 'SIEGRUN': 1,
 'SIEGRUNA': 1,
 'SIGHILD': 1,
 'SIGISMOND': 1,
 'SIGMOND': 1,
 'SIGMUND': 1,
 'SIGRID': 1,
 'SIGURD': 1,
 'SIOBHAN': 1,
 'SIXTE  SEXTUS EN LATIN ': 1,
 'SOLEN': 1,
 'SOLENE': 1,
 'SOLENN': 1,
 'SOPHOCLE': 1,
 'STEPHANE': 1,
 'STERENN': 1,
 'SYLVAIN': 1,
 'SYLVIE': 1,
 'TANCRED': 1,
 'TANCREDE': 1,
 'TANGI': 1,
 'TANGUY': 1,
 'THEODEBERT': 1,
 'THEODORIC': 1,
 'THEUDESINDE': 1,
 'THEUDIGISEL': 1,
 'THIBAULT': 1,
 'THIBERT': 1,
 'THIERRY': 1,
 'THORLAK': 1,
 'THURIEN': 1,
 'TIBERE': 1,
 'TITIEN': 1,
 'TRISTAN': 1,
 'TUAL': 1,
 'TUGDUAL': 1,
 'ULRIC': 1,
 'ULRIKE': 1,
 'ULVEI': 1,
 'ULYSSE': 1,
 'URSICIN': 1,
 'VALDEMAR': 1,
 'VALERE': 1,
 'VALERIE': 1,
 'VALERY': 1,
 'VARANGER': 1,
 'VAUBURGE': 1,
 'VAUQUELIN': 1,
 'VICTOR': 1,
 'VINCENT': 1,
 'VIRGILE': 1,
 'VIRGINIE': 1,
 'VIVIEN': 1,
 'VULFRAN': 1,
 'WALBURGA': 1,
 'WALDEMAR': 1,
 'WALTRAUD': 1,
 'WANDRILLE': 1,
 'WERNER': 1,
 'WILFRIED': 1,
 'WILLHELM': 1,
 'WILLIAM': 1,
 'WIVINE': 1,
 'WOLFGANG': 1,
 'WOLFRAM': 1,
 'WULF': 1,
 'WULFAR ': 1,
 'WULFRAN': 1,
 'XANTHOS': 1,
 'XAVIER': 1,
 'XENA': 1,
 'XENIA': 1,
 'XENOPHON': 1,
 'YVES': 1,
 'YVON': 1,
 'YVONNE': 1,
 'ZENON': 1,
 'ZEUS': 1,
 'ANNE': 1,
 'CLAIRE': 1}
taille_abrev = []
_abrev_table = [{}, {}]
for i in [0, 1, 2]:
    taille_abrev.append([])
    for j in _38_abreviation[i].keys():
        t = len(j.split())
        if not t in taille_abrev[-1]:
            taille_abrev[-1].append(t)

    taille_abrev[-1].sort()
    taille_abrev[-1].reverse()

for i in [0, 1]:
    for j in _38_abreviation[i].keys():
        ta = _38_abreviation[i][j]
        if ta != j:
            if ta in _abrev_table[i]:
                _abrev_table[i][ta] += [j]
            else:
                _abrev_table[i][ta] = [j]

def file_exists(valfic):
    retour = False
    if os.path.isfile(valfic):
        retour = True
    return retour


def test_geo_licence(val):
    global Licence
    retour = [val, False]
    try:
        if Licence == {} or list != type(Licence.client_ref):
            retour[1] = True
        elif val[:3].upper() == 'XY_':
            retour[0] = val[3:]
            retour[1] = True
        else:
            retour[0] = val
            retour[1] = False
    except Exception as e:
        retour = [val, False]

    return retour


def trace_debug(position, texte, efface = False):
    fichier = _pathinitial + 'trace_debug.log'
    if efface:
        os.remove(fichier)
    ff = open(fichier, 'a')
    ff.write(str(position) + ' --> ' + texte + '\n')
    ff.close()


def NormaliseTaille(Valeur, taille_max = 38):
    global _flag_bodacc
    global _pays

    def VerifTaille2(valeur, motdir):
        tab = valeur.split()
        pos_motdir = 1
        if motdir:
            if tab[-1] in ('PROLONGEE', 'PROLONGE'):
                tab[-1] = 'PROL'
                valeur = ' '.join(tab)
                pos_motdir = 2
            if tab[-1] in ('INFERIEURE', 'INFERIEUR'):
                tab[-1] = 'INF'
                valeur = ' '.join(tab)
                pos_motdir = 2
            if tab[-1] in ('SUPERIEURE', 'SUPERIEUR'):
                tab[-1] = 'SUPP'
                valeur = ' '.join(tab)
                pos_motdir = 2
        pos_voie = -1
        if len(valeur) > taille_max:
            for i in taille_abrev[0]:
                if i < len(tab):
                    while True:
                        fl_trouve = False
                        for j in range(0, len(tab) - pos_motdir - i):
                            ch = ' '.join(tab[j:j + i])
                            if _38_abreviation[0].has_key(ch) and ch != _38_abreviation[0][ch]:
                                valeur = valeur.replace(ch, _38_abreviation[0][ch])
                                fl_trouve = True
                                pos_voie = j
                                tab = valeur.split()
                                break

                        if not fl_trouve or i >= len(tab):
                            break

            valeur = ' '.join(tab)
        if len(valeur) > taille_max:
            for i in taille_abrev[1]:
                if i < len(tab):
                    while True:
                        fl_trouve = False
                        for j in range(pos_voie + 1, len(tab) - pos_motdir - i):
                            ch = ' '.join(tab[j:j + i])
                            if _38_abreviation[1].has_key(ch) and ch != _38_abreviation[1][ch]:
                                valeur = valeur.replace(ch, _38_abreviation[1][ch])
                                fl_trouve = True
                                tab = valeur.split()
                                break

                        if not fl_trouve or i >= len(tab):
                            break

        fl_modif = -1
        if len(valeur) > taille_max:
            supp = 0
            for i in range(pos_voie + 1, len(tab) - pos_motdir):
                if _38_prenoms.has_key(tab[i]):
                    supp = supp + len(tab[i]) - 1
                    tab[i] = tab[i][0]
                    fl_modif = i
                    if len(valeur) - supp <= taille_max:
                        break

            if fl_modif != -1:
                valeur = ' '.join(tab)
        if len(valeur) > taille_max:
            if fl_modif == -1:
                fl_r = range(pos_voie + 1, len(tab) - pos_motdir)
            else:
                fl_r = range(pos_voie + 1, fl_modif)
            supp = 0
            for i in fl_r:
                if tab[i] in ('LE', 'LA', 'LES', 'UN', 'UNE', 'DES', 'DU', 'DE'):
                    supp += len(tab[i])
                    tab.pop(i)
                    fl_modif = fl_modif - 1
                    break

            valeur = ' '.join(tab)
        if len(valeur) > taille_max:
            if fl_modif >= 0:
                fl_r = range(fl_modif + 1, len(tab) - pos_motdir)
            else:
                fl_r = range(pos_voie + 1, len(tab) - pos_motdir)
            supp = 0
            for i in fl_r:
                if len(tab[i]) > 1 and tab[i] not in ('LE', 'LA', 'LES', 'UN', 'UNE', 'DES', 'DU', 'DE') and not tab[i][0].isdigit():
                    supp += len(tab[i]) - 1
                    tab[i] = tab[i][0]
                    if len(valeur) - supp <= taille_max:
                        break

            valeur = ' '.join(tab)
        if len(valeur) > taille_max:
            valeur = valeur[0:taille_max]
        return valeur

    if _flag_bodacc or _pays != 'FRA':
        return Valeur
    elif Valeur != '' and len(Valeur) > taille_max:
        return VerifTaille2(Valeur, True)
    else:
        return Valeur


_MAJ_SQL = ''
_MAJ_DQL = 0
_MAJ_BASES = 0
_MAJ_MQL = ''

def maj_maj_sql():
    global _MAJ_SQL
    global _nomfichierlicence
    _MAJ_SQL = ''
    new_licence = _pathinitial + _nomfichierlicence
    if os.path.isfile(new_licence):
        try:
            if _flag_sqlite:
                if _python25:
                    ff = common.sqlite3shelve.open(new_licence)
                else:
                    ff = common27.sqlite3shelve.open(new_licence)
            else:
                ff = shelve.open(new_licence)
            _MAJ_SQL = str(ff['ADR']['Date'])[0:19]
            ff.close()
        except:
            pass


maj_maj_sql()

class LicenceNew():
    """Nouvelle Licence"""
    client_ref = []
    client_name = ''
    client_date = ()
    exp_date = (2099, 1, 1)

    def __init__(this, Nomfichier, lequel):
        if _flag_sqlite:
            if _python25:
                ff = common.sqlite3shelve.open(Nomfichier)
            else:
                ff = common27.sqlite3shelve.open(Nomfichier)
        else:
            ff = shelve.open(Nomfichier)
        if ff.has_key(lequel):
            this.client_ref = ff[lequel]['client_ref']
            ad = ff[lequel]
            key = ad['Key']
            vkey = sha.sha('a8978BZ!' + str(ad['client_ref']) + '98@29bzh3').hexdigest().upper()
            if vkey != key:
                this.client_ref = []
                this.client_name = ''
                this.client_date = ()
            else:
                this.client_name = 'DQE'
                this.client_date = ff[lequel]['Date']
        else:
            ff[lequel] = {}
            ff[lequel]['client_ref'] = []
            ff[lequel]['client_name'] = 'DQE'
            ff[lequel]['Date'] = (2016, 1, 1)
            ff[lequel]['Key'] = ''
            this.client_ref = []
            this.client_name = ''
            this.client_date = ()
        ff.close()


def MiseAJourLicence(fl_exec = True):
    global ServerDQETel
    global _MAJ_SQL
    global _MAJ_MQL
    global _rep_pays
    global ip
    global _MAJ_DQL
    global _MAJ_BASES
    global Licence
    global _urllicence
    global _lecture_licence
    if _lecture_licence:
        fl1 = False
        fl2 = False
        fls = False
        fl_new = False
        fl_majbase = False
        new_licence = _pathinitial + _nomfichierlicence
        print ('---> GESTION DES LICENCES', _urllicence)
        if '.sql' in new_licence and os.path.isfile(new_licence):
            if _urllicence != '':
                if _urllicence[-1] == '/':
                    vurl = _urllicence + 'DQEDATEMAJ/?lequel=ADR'
                else:
                    vurl = _urllicence + '/DQEDATEMAJ/?lequel=ADR'
                retour = ''
                _dateServeur = ''
                try:
                    _opu = urllib2.urlopen(vurl)
                    _dateServeur = _opu.read()
                except Exception as e:
                    pass

                try:
                    _opu.close()
                except:
                    pass

                if _dateServeur != '':
                    fls = _MAJ_SQL != _dateServeur
                    _MAJ_SQL = _dateServeur
                new_licence = _pathinitial + _nomfichierlicence
                if os.path.isfile(new_licence):
                    _dateLocale = ''
                    try:
                        if _flag_sqlite:
                            if _python25:
                                ff = common.sqlite3shelve.open(Nomfichier)
                            else:
                                ff = common27.sqlite3shelve.open(Nomfichier)
                        else:
                            ff = shelve.open(new_licence)
                        _dateLocale = str(ff['ADR']['Date'])[0:19]
                        ff.close()
                    except:
                        pass

                if _dateLocale != _dateServeur:
                    _cle = sha.sha('a8978BZ!ADR' + _ipServeur + ip + _port_num + '98@29bzh3').hexdigest().upper()
                    _f = {'NatureCompteur': 'ADR',
                     'AdresseServeur': _ipServeur,
                     'AdresseService': ip,
                     'Port': _port_num,
                     'Cle': _cle}
                    if _urllicence[-1] == '/':
                        vurl = _urllicence + 'DQEReadLicence/?' + urllib.urlencode(_f)
                    else:
                        vurl = _urllicence + '/DQEReadLicence/?' + urllib.urlencode(_f)
                    _key = ''
                    _Licence = ''
                    _res = ''
                    try:
                        try:
                            _opu = urllib2.urlopen(vurl)
                            _res = _opu.read()
                        except:
                            _res = ''

                        try:
                            _opu.close()
                        except:
                            pass

                        fls = True
                        if _res != '':
                            resu = eval(_res)
                            if resu['Status'] == 'OK':
                                resu = eval(resu['Licence'])
                                _key = resu['Key']
                        else:
                            resu = {'Licence': '',
                             'Status': 'KO'}
                    except:
                        resu = {'Licence': '',
                         'Status': 'KO'}

                    if resu.has_key('client_ref'):
                        _sh = resu['client_ref']
                    else:
                        _sh = ''
                    _v = sha.sha('a8978BZ!' + str(_sh) + '98@29bzh3').hexdigest().upper()
                    if _key != '' and _v == _key:
                        fls = False
                        for i in range(0, 10):
                            if os.path.isdir(_pathinitial + '_licserveur'):
                                for _ti in range(0, 2000000):
                                    _ti1 = _ti

                            else:
                                try:
                                    os.mkdir(_pathinitial + '_licserveur')
                                    try:
                                        if _flag_sqlite:
                                            if _python25:
                                                ff = common.sqlite3shelve.open(new_licence)
                                            else:
                                                ff = common27.sqlite3shelve.open(new_licence)
                                        else:
                                            ff = shelve.open(new_licence)
                                        ff['ADR'] = resu
                                        _MAJ_SQL = str(ff['ADR']['Date'])[0:19]
                                        ff.close()
                                        print '----> Mise \xe0 jour de la table licence.dql effectu\xe9'
                                    finally:
                                        os.rmdir(_pathinitial + '_licserveur')

                                    break
                                except:
                                    for _ti in range(0, 2000000):
                                        _ti1 = _ti

                        fls = True
                    else:
                        for i in range(0, 5):
                            if os.path.isdir(_pathinitial + '_licserveur'):
                                for _ti in range(0, 2000000):
                                    _ti1 = _ti

                            else:
                                try:
                                    os.mkdir(_pathinitial + '_licserveur')
                                    try:
                                        print '-----> ERREUR KEY # '
                                        if _flag_sqlite:
                                            if _python25:
                                                ff = common.sqlite3shelve.open(new_licence)
                                            else:
                                                ff = common27.sqlite3shelve.open(new_licence)
                                        else:
                                            ff = shelve.open(new_licence)
                                        _MAJ_SQL = str(ff['ADR']['Date'])[0:19]
                                        ff.close()
                                    finally:
                                        os.rmdir(_pathinitial + '_licserveur')

                                    fls = True
                                    break
                                except:
                                    for _ti in range(0, 2000000):
                                        _ti1 = _ti

            if fls:
                print '-----> Mise a jour des Licences '
                new_licence = _pathinitial + _nomfichierlicence
                Licence = None
                Licence = LicenceNew(new_licence, 'ADR')
                chargement_licence_melissa()
                chargement_licence_OP()
                if ServerDQETel is not None:
                    ServerDQETel.chargement_basetel()
        else:
            nfc = _pathinitial + 'licence.mql'
            if os.path.isfile(nfc):
                nbs = os.path.getmtime(nfc)
                if _MAJ_MQL != nbs:
                    _MAJ_MQL = nbs
                    fl1 = True
            nfc = _pathinitial + 'licence.dql'
            if os.path.isfile(nfc):
                nbs = os.path.getmtime(nfc)
                if _MAJ_DQL != nbs:
                    _MAJ_DQL = nbs
                    fl1 = True
            nfc = _pathinitial + 'International/' + _rep_pays + '/mapadresse1.dqe'
            if os.path.isfile(nfc):
                nbs = os.path.getmtime(nfc)
                if _MAJ_BASES != nbs:
                    _MAJ_BASES = nbs
                    fl2 = True
            if fl_exec and fl1:
                print '-----> Chargement des Licences '
                VerifLicence()
            if fl_exec and fl2:
                print ('-----> Fermeture des bases ', _pays)
                fermeture()
                print ('-----> Ouverture des bases ', _pays)
                if not chargement(_pays):
                    print 'Arret'
                    write_error('end', 'chargement', 'serveur stoppe' + str(e))
                    exit()
        print '<--- GESTION DES LICENCES'
        Timer(_gestiondeslicences, MiseAJourLicence).start()
    return


def VerifLicence():
    global Licence
    global _lecture_licence
    try:
        try:
            lequel = 0
            if NomFichierLicence != '':
                if os.path.isfile(NomFichierLicence):
                    _lecture_licence = False
                    if NomFichierLicence.upper().find('.MQL') >= 0:
                        lequel = 1
                        exec Compile().unxipfromfile(NomFichierLicence, 'dql')
                    else:
                        lequel = 2
                        exec Compile().unxipfromfile(NomFichierLicence, 'dql')
            elif os.path.isfile(_pathinitial + _nomfichierlicence):
                lequel = 3
                _NomLicenceDQE = _pathinitial + _nomfichierlicence
            elif os.path.isfile(_pathinitial + 'licence.mql'):
                lequel = 1
                exec Compile().unxipfromfile(_pathinitial + 'licence.mql', 'dql')
                _lecture_licence = False
            else:
                lequel = 2
                exec Compile().unxipfromfile(_pathinitial + 'licence.dql', 'dql')
                _lecture_licence = False
        except Exception as e:
            exec open(_pathinitial + 'licence.dqc').read()

        if lequel == 3:
            Licence = LicenceNew(_NomLicenceDQE, 'ADR')
        else:
            Licence = TestDQELicence()
        if lequel == 1:
            try:
                Licence.client_ref = str(Licence.client_ref)
                Licence.client_ref = eval(Licence.client_ref)
            except:
                print 'ko'

    except Exception as ex:
        info = str(ex)
        info_fields = info.split(';')
        if len(info_fields) > 1:
            s = 'Probleme avec la Licence : \n%(problem)s' % {'problem': info_fields[1].strip('"')}
            print s
        else:
            s = 'Licence inconnue.'
            print s
        return 0


def jsonp(func):

    def ftemp(self, *args, **kwargs):
        callback, _ = (None, None)
        if 'callback' in kwargs and '_' in kwargs:
            callback, _ = kwargs['callback'], kwargs['_']
            del kwargs['callback']
            del kwargs['_']
        ret = func(self, *args, **kwargs)
        if callback is not None:
            ret = '%s(%s)' % (callback, simplejson.dumps(ret))
        return ret

    return ftemp


BDconn_cpte = 0
_numclient = {}
_lock_numclient = [1, [None, 0, []], [None, 0, []]]
_voie_transfo = {}
_voie_decoupe = {}
cp_234 = {}
cp_234_count = {}
cp_234U = {}
cp_234_ladr = {}
prov_234 = {}
cpld_234 = {}
maptelephone = {}
prefixetel = {}
geoloczipcode = {}
geoaddress = {}
_flag_geoloczipcode = False
_geoTab = {}
mapville = {}
mapville2 = {}
mapville3 = {}
mapville4 = {}
mapville5 = {}
mapville6 = {}
_flag_roudis = False
maproudis = {}
base_geoCity_BAN = {}
ff_values = {}
ff_bandesX = {}
ff_bandesY = {}
fcp_polygone = {}
mapcp = {}
adresse = {}
mapadresse = {}
mapcherchetypevoie = {}
changenomvoie = {}
_cedexa = {}
_tps_max = 60
_flag_upu = False
_flag_geopost = False
_change_mots = []
_identifier = {}
_articles = []
_articles_debutmot = []
_mapnumvoie = {}
_mapnumvoiecp = {}
_mapnumvoiecle = {}
_mapcomplement = {}
_mapgeocodage = {}
_mapgeoconvert = {}
_mapcherchevoie = {}
_mapinseecommune = {}
_map_inter = {}
_suppdernier = []
_abreviation = []
_flag_mapgeocodage = False
_flag_log = False
_replog = _pathinitial
_ipcpville = {}
_flag_irisilot = False
_irisilot = {}
_geoCZip = {}
_geoCCity = {}
_fip1 = {}
_fip2 = {}
_fipo = 0
_maxnbIP = 0
_mapnouveaunom = {}
_mapbornes = {}
_flag_init = False
_flag_soap = True
_flag_batch = False
_flag_format = False
_flag_new = True
_flag_lieuditvoie = False
_flag_json = False
_flag_https = False
_tps_rep = 10
_hexacle = ''
_hexavia = ''
_hexaposte = ''
_hexacedex = ''
_hexaligne3 = ''
_hexaprovince = ''
_flag_no_rnvp_init = True
_traite_file = {}
for i in sys.argv:
    if i.upper().find('-PAYS:') == 0:
        _pays = i.split(':')[1]
    if i.upper().find('-REP_PAYS:') == 0:
        _rep_pays = i.split(':')[1]
    if i.upper().find('-INIT:') == 0:
        _flag_init = i.split(':')[1] == 'True'
        _flag_soap = not _flag_init
    if i.upper().find('-INITRNVP:') == 0:
        _flag_init = i.split(':')[1] == 'True'
        _flag_soap = not _flag_init
        _flag_no_rnvp_init = False
    if i.upper().find('-RNVP_FILE') == 0:
        _flag_rnvp = True
        jr = i.split(':')
        _traite_file['FILE'] = ':'.join(jr[1:])
    if i.upper().find('-SEP') == 0:
        jr = i.split(':')
        _traite_file['SEP'] = ':'.join(jr[1:])
    if i.upper().find('-IN_DESCRIPTION') == 0:
        jr = i.split(':')
        _traite_file['IN_DESCRIPTION'] = ':'.join(jr[1:])
    if i.upper().find('-OUT_DESCRIPTION') == 0:
        jr = i.split(':')
        _traite_file['OUT_DESCRIPTION'] = ':'.join(jr[1:])
    if i.upper().find('-OUTPUT_FILE') == 0:
        jr = i.split(':')
        _traite_file['OUTPUT'] = ':'.join(jr[1:])
    if i.upper().find('-UPU:') == 0:
        _flag_upu = i.split(':')[1].upper() == 'TRUE'
    if i.upper().find('-GEOPOST:') == 0:
        _flag_geopost = i.split(':')[1].upper() == 'TRUE'
    if i.upper().find('-BATCH:') == 0:
        _flag_init = False
        _flag_soap = False
        _flag_batch = i.split(':')[1] == 'True'
    if i.upper().find('-HEXAPOSTE:') == 0:
        _hexaposte = i.split(':')[1]
    if i.upper().find('-HEXALIGNE3:') == 0:
        _hexaligne3 = i.split(':')[1]
    if i.upper().find('-HEXAVIA:') == 0:
        _hexavia = i.split(':')[1]
    if i.upper().find('-HEXACLE:') == 0:
        _hexacle = i.split(':')[1]
    if i.upper().find('-HEXACEDEX:') == 0:
        _hexacedex = i.split(':')[1]
    if i.upper().find('-HEXAPROVINCE:') == 0:
        _hexaprovince = i.split(':')[1]
    if i.upper().find('-OLD') == 0:
        _flag_new = False
    if i.upper().find('-NEW') == 0:
        _flag_new = True
    if i.upper().find('-LDVOIE') == 0:
        _flag_lieuditvoie = True
    if i.upper().find('-LOG') == 0:
        _flag_log = True
    if i.upper().find('-JSON:') == 0:
        _flag_json = True
    if i.upper().find('-NOLOGFILE') == 0:
        _log_file = False
    if i.upper().find('-REPLOG:') == 0:
        _replog = ':'.join(i.split(':')[1:])
        _replog = _replog.replace('\\', '/')
        if _replog[-1] != '/':
            _replog += '/'
    if i.upper().find('-NBVOIE:') == 0:
        try:
            _lenCompteur = int(i.split(':')[1])
        except:
            _lenCompteur = 100

    if i.upper().find('-PORT:') == 0:
        try:
            _port_num = str(int(i.split(':')[1]))
        except:
            _port_num = '9000'

    if i.upper().find('-HTTPS:') == 0:
        _flag_https = True

if _rep_pays == '':
    _rep_pays = _pays
sys.path.insert(0, './International/' + _rep_pays + '/tables')
sys.path.insert(0, './International/' + _rep_pays + '/RN')
sys.path.insert(0, _pathinitial + 'International/' + _rep_pays + '/tables')
sys.path.insert(0, _pathinitial + 'International/' + _rep_pays + '/RN')
try:
    import AnalyseZip
except:
    AnalyseZip = None

try:
    from phonetics import Phonems
except:

    def Phonems(chaine):
        if _pays in ('FRA', 'MAR'):
            r = chaine.replace('Y', 'I')
            r = re.sub('([^PCS]|^)H', '\\1', r)
            r = r.replace('PH', 'F')
            r = re.sub('(.*)(IS|ES|ET|PS|TS|[STX])$', '\\1', r)
            r = re.sub('G(AI?[NM])', 'K\\1', r)
            r = re.sub('[AE]I[NM]([AEIOU])', 'YN\\1', r)
            r = r.replace('EAU', 'O')
            r = r.replace('OUA', '2')
            r = r.replace('EIN', '4')
            r = r.replace('AIN', '4')
            r = r.replace('EIM', '4')
            r = r.replace('AIM', '4')
            r = r.replace('AY', 'E')
            r = r.replace('RGM', 'RM')
            r = r.replace('OE', 'E')
            r = r.replace('EU', 'E')
            r = r.replace('\xe9', 'E')
            r = r.replace('\xe8', 'E')
            r = r.replace('\xea', ' E')
            r = r.replace('\xeb', 'E')
            r = r.replace('AI', 'E')
            r = r.replace('EI', 'E')
            r = r.replace('ER', 'YR')
            r = r.replace('ESS', 'YS')
            r = r.replace('ES', 'E')
            r = r.replace('ET', 'YT')
            r = r.replace('EZ', 'YZ')
            r = re.sub('AN([^AEIOU1234])', '1\\1', r)
            r = re.sub('ON([^AEIOU1234])', '1\\1', r)
            r = re.sub('AM([^AEIOU1234])', '1\\1', r)
            r = re.sub('EN([^AEIOU1234])', '1\\1', r)
            r = re.sub('EM([^AEIOU1234])', '1\\1', r)
            r = re.sub('IN([^AEIOU1234])', '4\\1', r)
            r = re.sub('([AEIOUY1234])S([AEIOUY1234])', '\\1Z\\2', r)
            r = r.replace('UN', '4')
            r = r.replace('AU', 'O')
            r = r.replace('OI', '2')
            r = r.replace('OY', '2')
            r = r.replace('OU', '3')
            r = r.replace('CH', '5')
            r = r.replace('SCH', '5')
            r = r.replace('SH', '5')
            r = r.replace('SS', 'S')
            r = r.replace('SC', 'S')
            r = re.sub('C([AOU])', 'K\\1', r)
            r = re.sub('C([EIY])', 'S\\1', r)
            r = r.replace('C', 'K')
            r = r.replace('Q', 'K')
            r = r.replace('QU', 'K')
            return r
        else:
            return chaine


try:
    from phonetics import MajPhonems
except:

    def MajPhonems(liste):
        return liste


try:
    from phonetics import FormatCP
except:

    def FormatCP(valeur):
        return valeur


_flag_mapnumero = True
_flag_mapnumerocp = False
_flag_mapcomplement = True

def tailleIP(valeur):
    if len(valeur) == 1:
        return '00' + valeur
    elif len(valeur) == 2:
        return '0' + valeur
    else:
        return valeur


def ajusteIP(valeur):
    tb = valeur.split('.')
    if len(tb) < 4:
        return '255255255255'
    else:
        return tailleIP(tb[0]) + tailleIP(tb[1]) + tailleIP(tb[2]) + tailleIP(tb[3])


def rechercheDicoIP(valeur, fichier, nbmax, appel1, appel2):
    if valeur.count('.') != 3:
        return ['??',
         '????????',
         0,
         0]
    if nbmax == 0:
        return ['??',
         '????????',
         0,
         0]
    va1 = ajusteIP(valeur)
    pos = nbmax / 2
    dep = nbmax / 4
    if dep <= 0:
        dep = 0
    avant = 0
    apres = 0
    resu = valeur
    arret = False
    cvaleur = 0
    while cvaleur < 150:
        cvaleur += 1
        fichier.seek(pos * 15)
        va2 = ajusteIP(fichier.read(15).strip())
        if va2 == va1:
            resu = va2
            break
        elif va1 > va2:
            apres = 1
            arret = False
            va3 = ajusteIP(fichier.read(15).strip())
            if va1 <= va3:
                if va1 == va3:
                    resu = va3
                else:
                    resu = va2
                break
            else:
                pos += dep
        else:
            apres = 2
            pos -= dep
        if avant != apres:
            dep /= 2
            avant = apres
        if dep <= 0:
            dep = 1
        if pos <= 0:
            if arret:
                resu = va2
                break
            pos = 0
            arret = True
        elif pos >= nbmax:
            pos = nbmax - 1

    if cvaleur >= 150:
        resu = ['??',
         '????????',
         0,
         0]
    else:
        try:
            v1 = appel1[resu]
            v2 = appel2[str(v1)]
            resu = v2
            resu[1] = resu[1].upper()
        except:
            resu = ['??',
             '????????',
             0,
             0]

    return resu


def capital(valeur, vpays = '', retjson = True):
    try:
        if not retjson:
            a = valeur.encode('utf-8')
        else:
            a = valeur.decode('utf-8')
    except:
        a = valeur

    return a


def netAdresse(val, choix = 1):
    retour = ''
    if str(type(val)) == "<type 'NoneType'>":
        retour = ''
    else:
        if choix == 1:
            val = val.replace('*', '%2A')
            val = val.replace('#', '%23')
            val = val.replace('&', '%26')
            val = val.replace('%', '%25')
            val = val.replace('$', '%28')
            val = val.replace(' ', '%20')
        else:
            val = val.replace('%2A', '*')
            val = val.replace('%23', '#')
            val = val.replace('%26', '&')
            val = val.replace('%25', '%')
            val = val.replace('%28', '$')
            val = val.replace('%20', ' ')
        retour = val.strip()
    return retour


def controlecode(vliste):
    vok = True
    ret = 'OK'
    lib = 'Adresse Valide'
    code = '0'
    code_elfy = '10'
    for cc in vliste:
        if cc in ('AS09', 'AE01', 'AE04', 'AE12', 'AE13', 'AE14', 'AE17'):
            ret = 'KO'
            vok = False
            code = '1'
            code_elfy = '80'
            lib = 'AUCUNE CORRESPONDANCE'
            break
        if cc in ('AE02', 'AE03', 'AE05', 'AE19', 'AE20'):
            ret = 'KO'
            vok = False
            code = '3'
            lib = 'REPONSES MULTIPLES LIE A UN MANQUE D INFORMATION'
            code_elfy = '50'
            break
        if cc in ('AE07', 'AE08', 'AE09', 'AE10', 'AE11', 'AS02', 'AS22'):
            ret = 'KO'
            vok = False
            lib = 'NUMERO INEXISTANT DANS LA VOIE ou MANQUANT'
            code = '4'
            code_elfy = '24'
            break

    return [vok,
     ret,
     code,
     lib,
     code_elfy]


def libelle_statut(vliste):
    vretour = ''
    for cc in vliste:
        if cc in ('AC01',):
            vretour += 'Code postal Modifie - '
        if cc in ('AC02',):
            vretour += 'Province Modifie - '
        if cc in ('AC03', 'AC09'):
            vretour += 'Ville Modifie - '
        if cc in ('GE01', 'GE02'):
            vretour += 'Code postal invalide - '
        if cc in ('AC10', 'AC11', 'AC12'):
            vretour += 'Adresse Modifie - '
        if cc in ('AC18',):
            vretour += 'Boite postal Modifie - '
        if cc in ('AC20',):
            vretour += 'Numero Modifie - '
        if cc in ('DEJA',):
            vretour += 'Adresse Deja Traitee - '

    if vretour[-3:] == ' - ':
        vretour = vretour[:-3]
    return vretour


def addr_line(val, vcp):
    retour = ''
    if vcp != '' and vcp in val:
        retour = ''
    else:
        retour = val
    return retour


def NormaliseBodacc(texte, voie = False):
    global bodacc
    global _articles
    global _voie_decoupe
    ch = ''
    mot1 = ''
    if texte == '':
        return ''
    tx = texte.split()
    if voie:
        vx = 'v_'
    else:
        vx = 'c_'
    if True:
        if _voie_decoupe.has_key(tx[0]):
            for j in _voie_decoupe[tx[0]]:
                if ' '.join(j) == ' '.join(tx[0:len(j)]):
                    tx = tx[len(j):][:]
                    for i in j:
                        if bodacc.has_key(vx + i):
                            if ch == '':
                                ch = bodacc[vx + i].lower()
                            else:
                                ch += ' ' + bodacc[vx + i].lower()
                        elif ch == '':
                            ch = i.lower()
                        else:
                            ch += ' ' + i.lower()

                    break

    for mot in tx:
        if mot == 'D':
            mot1 = "d'"
        elif mot == 'L':
            mot1 = "l'"
        else:
            romain = True
            for v in mot:
                if v not in 'XIVCL':
                    romain = False
                    break

            if not romain:
                if mot in _articles:
                    if ch == '':
                        ch = mot1 + mot.lower()
                    else:
                        ch += ' ' + mot1 + mot.lower()
                elif bodacc.has_key(vx + mot):
                    bd = bodacc[vx + mot].decode('utf-8')
                    bd1 = (bd.upper()[0] + bd[1:]).encode('utf-8')
                    if ch == '':
                        ch = mot1 + bd1
                    else:
                        ch += ' ' + mot1 + bd1
                elif mot[-2:] == 'EE':
                    if ch == '':
                        ch = mot1 + mot[0] + mot[1:-2].lower() + '\xe9e'.decode('iso-8859-1').encode('utf-8')
                    else:
                        ch += ' ' + mot1 + mot[0] + mot[1:-2].lower() + '\xe9e'.decode('iso-8859-1').encode('utf-8')
                elif mot[-4:] == 'IERE':
                    if ch == '':
                        ch = mot1 + mot[0] + mot[1:-4].lower() + 'i\xe8re'.decode('iso-8859-1').encode('utf-8')
                    else:
                        ch += ' ' + mot1 + mot[0] + mot[1:-4].lower() + 'i\xe8re'.decode('iso-8859-1').encode('utf-8')
                elif mot[-3:] == 'EES':
                    if ch == '':
                        ch = mot1 + mot[0] + mot[1:-3].lower() + '\xe9es'.decode('iso-8859-1').encode('utf-8')
                    else:
                        ch += ' ' + mot1 + mot[0] + mot[1:-3].lower() + '\xe9es'.decode('iso-8859-1').encode('utf-8')
                elif ch == '':
                    ch = mot1 + mot[0] + mot[1:].lower()
                else:
                    ch += ' ' + mot1 + mot[0] + mot[1:].lower()
                mot1 = ''
            else:
                if ch == '':
                    ch = mot
                else:
                    ch += ' ' + mot
                mot1 = ''

    return ch


def romanToArabic(n):
    n, num, i, dict = (n.lower(),
     0,
     0,
     {'i': 1,
      'v': 5,
      'x': 10,
      'l': 50,
      'c': 100,
      'd': 500,
      'm': 1000})
    while i < len(n):
        if i + 1 < len(n) and dict[n[i + 1]] > dict[n[i]]:
            num += dict[n[i + 1]] - dict[n[i]]
            i += 1
        else:
            num += dict[n[i]]
        i += 1

    return num


def ArabicToroman(nb):
    res = ''
    if nb >= 50:
        res += 'L'
        nb -= 50
    while nb >= 10:
        res += 'X'
        nb -= 10

    if nb == 9:
        res += 'IX'
        nb -= 9
    if nb >= 5:
        res += 'V'
        nb -= 5
    if nb == 4:
        res += 'IV'
        nb -= 4
    while nb > 0:
        res += 'I'
        nb -= 1

    return res


def isAlpha(valeur):
    nb = True
    for i in valeur:
        if i in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'):
            nb = False
            break

    return nb


def tri2_lettres(chaine, tadresse, md_lettres, md_roman, motdir = ''):
    i1 = len(tadresse)
    dep = 0
    if i1 > 2:
        if tadresse[0].isdigit():
            dep = 1
    adr0 = tadresse[dep:]
    _adr = tadresse[dep:-1]
    adr1 = _adr + md_lettres.split()
    adr2 = _adr + [md_roman]
    md0 = tadresse[-1]
    va1 = []
    va2 = []
    va3 = []
    _t0 = len(adr0)
    _t1 = len(adr1)
    _t2 = len(adr2)
    jl = ' '.join(tadresse)
    for i in chaine:
        tb = i[0].split()
        if tb[-_t0:] == adr0:
            va1.append(i)
        elif tb[-_t1:] == adr1:
            va1.append(i)
        elif tb[-_t2:] == adr2:
            va1.append(i)
        elif md0 in tb:
            va2.append(i)
        elif md_lettres in i[0]:
            va2.append(i)
        elif ' ' + md_roman + ' ' in i[0] + ' ':
            va2.append(i)
        elif motdir != '' and motdir in i[0]:
            va1.append(i)
        elif isRomain(tb[-1]):
            tb[-1] = str(romanToArabic(tb[-1]))
            if tb[-_t0:] == adr0:
                va1.append(i)
            elif tb[-_t1:] == adr1:
                va1.append(i)
            elif tb[-_t2:] == adr2:
                va1.append(i)
            elif jl in ' '.join(tb):
                va1.append(i)
            elif md0 in tb:
                va2.append(i)
            elif md_lettres in i[0]:
                va2.append(i)
            elif ' ' + md_roman + ' ' in i[0] + ' ':
                va2.append(i)
            elif motdir != '' and motdir in i[0]:
                va1.append(i)

    return va1 + va2


def tri_adr(saisie, liste):
    global _voie_transfo
    _saisie = saisie.upper().split()
    if len(_saisie) >= 1:
        mt = _saisie[0]
        if mt in _voie_decoupe:
            try:
                type0 = _voie_transfo[mt]
            except:
                type0 = mt

            resu_1 = []
            resu_2 = []
            for i in liste:
                type1 = i[0].split()[0]
                if type1 in _voie_decoupe:
                    type1 = _voie_decoupe[type1][0]
                    if type1 == type0:
                        resu_1.append(i)
                    else:
                        resu_2.append(i)

            return resu_1 + resu_2
        else:
            return liste
    else:
        return liste


def isRomain(valeur):
    nb = True
    for i in valeur:
        if i not in ('X', 'I', 'C', 'V', 'L', 'M'):
            nb = False
            break

    return nb


def MajChiffres(valeur):
    tb = valeur.split()
    if isRomain(tb[-1]):
        tb[-1] = str(romanToArabic(tb[-1]))
        return ' '.join(tb)
    if tb[-1][0] in '123456789':
        g1 = ''
        g2 = ''
        lq = True
        for i in tb[-1]:
            if lq and i in '0123456789':
                g1 += i
            else:
                lq = False
                g2 += i

        if g2 in ('IEME', 'EME', 'ER', 'IE', 'EM'):
            tb[-1] = g1[:]
        return ' '.join(tb)
    return valeur


def recuproudis(idvoie, numero):
    global maproudis
    resu = ''
    if idvoie in maproudis:
        num = ''
        for i in numero:
            if i in '0123456789':
                num += i
            else:
                break

        if num == '':
            num = 0
        else:
            num = int(num)
        v = maproudis[idvoie]
        if len(v) == 1:
            resu = v[0][-1]
        else:
            p = num % 2 == 0
            for i in v:
                if p:
                    if num >= i[2] and num <= i[3]:
                        resu = i[-1]
                        break
                elif num >= i[0] and num <= i[1]:
                    resu = i[-1]
                    break

    else:
        resu = ''
    return resu


def geoIGN(lon, lat):

    def dms(valeur):
        v1 = int(valeur)
        valeur -= v1
        v2 = int(valeur * 60)
        valeur = valeur * 60 - v2
        v3 = valeur * 60
        return u'%02d\xb0%02d?%2.3f?'.encode('utf-8') % (v1, v2, v3)

    lo = 'E'
    if lon < 0.0:
        lo = 'O'
        lon = -lon
    la = 'N'
    if lat < 0.0:
        la = 'S'
        lat = -lat
    return [lo + ' ' + dms(lon), la + ' ' + dms(lat)]


def point_in_poly(x, y, poly):
    if (x, y) in poly:
        return True
    else:
        for i in range(len(poly)):
            p1 = None
            p2 = None
            if i == 0:
                p1 = poly[0]
                p2 = poly[1]
            else:
                p1 = poly[i - 1]
                p2 = poly[i]
            if p1[1] == p2[1] and p1[1] == y and x > min(p1[0], p2[0]) and x < max(p1[0], p2[0]):
                return True

        n = len(poly)
        inside = False
        p1x, p1y = poly[0]
        for i in range(n + 1):
            p2x, p2y = poly[i % n]
            if y > min(p1y, p2y):
                if y <= max(p1y, p2y):
                    if x <= max(p1x, p2x):
                        if p1y != p2y:
                            xints = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x
                        if p1x == p2x or x <= xints:
                            inside = not inside
            p1x, p1y = p2x, p2y

        return inside


def WGSLam93(latitude, longitude):
    c = 11754255.426096
    e = 0.0818191910428158
    n = 0.725607765053267
    xs = 700000
    ys = 12655612.049876
    lat_rad = latitude / 180 * math.pi
    lat_iso = math.atanh(math.sin(lat_rad)) - e * math.atanh(e * math.sin(lat_rad))
    x = c * math.exp(-n * lat_iso) * math.sin(n * (longitude - 3) / 180 * math.pi) + xs
    y = ys - c * math.exp(-n * lat_iso) * math.cos(n * (longitude - 3) / 180 * math.pi)
    return [x, y]


def search_carreaux(latitude, longitude, idlocalite = '', tx = 4, ty = 4):
    global _table_vecteurs
    global _table_idk
    global _table_carreaux
    global _table_encadrement
    global _fl_tab_carreaux
    global bandes_x
    global bandes_y
    if latitude != None and latitude != '' and longitude != None and longitude != '':
        trouve = False
        x0 = float(longitude)
        y0 = float(latitude)
        _utm = False
        for enr in _table_encadrement:
            if x0 >= enr[1] and x0 <= enr[3] and y0 >= enr[2] and y0 <= enr[4]:
                _utm = enr[0] == 'UTM'
                break

        x, y = WGSLam93(y0, x0)
        search_x = str(x)[0:tx]
        search_y = str(y)[0:ty]
        if search_x in bandes_x and search_y in bandes_y:
            vx = bandes_x[search_x]
            vy = bandes_y[search_y]
            resu = numpy.intersect1d(vx, vy)
            for vecteur in resu:
                ListeVecteurs = cPickle.loads(_table_vecteurs[str(vecteur)])
                for vecteurs in ListeVecteurs:
                    if point_in_poly(x0, y0, vecteurs):
                        trouve = True
                        break

                if trouve:
                    break

        if trouve:
            if _fl_tab_carreaux:
                v0 = _table_carreaux[vecteur]
            else:
                v0 = _table_carreaux[str(vecteur)]
            rec = _table_idk[v0[0]]
            for i in range(0, len(rec)):
                if rec[i] is None:
                    rec[i] = '0.0'

            tableau1 = {'idk': v0[0],
             'idInspire': v0[3],
             'id': v0[4],
             'ind_c': float(v0[1]),
             'nbcar': float(v0[2])}
            try:
                tableau2 = {'men': float(rec[0]),
                 'men_surf': float(rec[1]),
                 'men_occ5': float(rec[2]),
                 'men_coll': float(rec[3]),
                 'men_5ind': float(rec[4]),
                 'men_1ind': float(rec[5]),
                 'i_1ind': float(rec[6]),
                 'men_prop': rec[7],
                 'i_prop': float(rec[8]),
                 'men_basr': rec[9],
                 'i_basr': float(rec[10]),
                 'ind_r': rec[11],
                 'ind_age1': float(rec[12]),
                 'ind_age2': float(rec[13]),
                 'ind_age3': float(rec[14]),
                 'ind_age4': float(rec[15]),
                 'ind_age5': float(rec[16]),
                 'ind_age6': float(rec[17]),
                 'ind_age7': float(rec[18]),
                 'i_age7': str(rec[19]),
                 'ind_age8': float(rec[20]),
                 'i_age8': str(rec[21]),
                 'ind_srf': float(rec[22]),
                 'nbcar': float(rec[23])}
            except:
                tableau2 = {'men': 0.0,
                 'men_surf': 0,
                 'men_occ5': 0,
                 'men_coll': 0,
                 'men_5ind': 0,
                 'men_1ind': 0,
                 'i_1ind': 0,
                 'men_prop': '',
                 'i_prop': 0,
                 'men_basr': '',
                 'i_basr': 0,
                 'ind_r': '',
                 'ind_age1': 0,
                 'ind_age2': 0,
                 'ind_age3': 0,
                 'ind_age4': 0,
                 'ind_age5': 0,
                 'ind_age6': 0,
                 'ind_age7': 0,
                 'i_age7': 0,
                 'ind_age8': 0,
                 'i_age8': '',
                 'ind_srf': 0,
                 'nbcar': 0}

            return {'Result': 'OK',
             'Carreaux': tableau1,
             'Stat': tableau2}
        else:
            return {'Result': 'KO'}
    else:
        return {'Result': 'KO'}
    return


def TestCP(cp, autrepays = '', Etendue = 'N'):
    global _lenCP

    def adrIP(valeur):
        resu = ''
        ret = True
        mem = ''
        for i in valeur:
            if i == '.':
                resu += '.'
                mem = ''
            elif i >= '0' and i <= '9':
                if mem == '':
                    resu += '9'
                    mem = '9'
            else:
                ret = False
                break

        if not ret:
            return ret
        else:
            return resu == '9.9.9.9'

    if autrepays != '':
        _vp = autrepays
    else:
        _vp = _pays
    ret = False
    if cp != '':
        if adrIP(cp):
            return True
        if _vp == 'GBR':
            if len(cp) >= 3:
                a1 = cp.upper()
                k = a1[0] >= 'A' and a1[0] <= 'Z' and a1[1] >= 'A' and a1[1] <= 'Z' and a1[2] >= '0' and a1[2] <= '9' or a1[0] >= 'A' and a1[0] <= 'Z' and a1[1] >= '0' and a1[1] <= '9'
                return k
        elif _vp == 'NLD':
            cp = cp.replace('-', '').replace(' ', '').replace('_', '')
            if len(cp) == 6 and cp[0:4].isdigit() and cp[4:].isalpha():
                i0 = ''
                i1 = ''
                for i in cp:
                    if i1 == '':
                        if i in '0123456789':
                            i0 += i
                        else:
                            i1 = i
                    else:
                        i1 += i

                if len(i0) == 4:
                    return True
                else:
                    return False
            else:
                return False
        elif _vp == 'LUX':
            if len(cp) >= 4:
                dem = 0
                k = 0
                if cp[0].upper() == 'L':
                    dem = 1
                    if cp[1] in ('-', ' ', '/', '_'):
                        dem = 2
                for i in cp[dem:]:
                    if i in '0123456789':
                        k += 1

                return k == 4
            else:
                return False
        elif _vp in ('FRA', 'DEU', 'ITA', 'PRT', 'ESP', 'MAR', 'AUT'):
            cp = cp.replace('-', '').replace(' ', '').replace('_', '')
            if cp != '' and cp[0] in '0123456789':
                k = ''
                for i in cp:
                    if i in '0123456789':
                        k += i

                ret = len(k) == _lenCP or _vp == 'FRA' and Etendue == 'Y'
            else:
                ret = False
        elif _vp in ('BEL',):
            cp = cp.replace('-', '').replace(' ', '').replace('_', '')
            if cp != '' and cp[0] in '0123456789':
                k = ''
                for i in cp:
                    if i in '0123456789':
                        k += i

                ret = len(k) == _lenCP
            else:
                ret = False
        else:
            cp = cp.replace('-', '').replace(' ', '').replace('_', '')
            ret = True
            for i in cp:
                if i not in '0123456789':
                    ret = False
                    break

    return ret


def encode(texte):
    res = ''
    mem = 3
    lq = True
    for i in texte:
        o = ord(i)
        if lq:
            res = res + chr(ord(i) + mem)
        else:
            res = res + chr(ord(i) - mem)
        lq = not lq
        mem = o % 7

    return res


def decode(texte):
    res = ''
    mem = 3
    lq = True
    for i in texte:
        o = ord(i) - mem
        res = res + chr(o)
        if lq:
            mem = -(o % 7)
        else:
            mem = +(o % 7)
        lq = not lq

    return res


def calcul_PE(mot1, mot2):
    mot1 = mot1.upper()
    mot2 = mot2.upper()
    if mot2 == '' or mot1 == '':
        return '0'
    else:
        mt2 = mot2.split()[-1]
        mt1 = mot1.split()[-1]
        _r = 0
        if mt2 in mot1 or mt1 in mot2:
            _r = 100
        else:
            _d1 = editdist.distance(mt2, mt1)
            _e0 = max(len(mt2), len(mt1))
            _r1 = (_e0 - _d1) * 1.0 / _e0 * 100
            _d2 = editdist.distance(mot1, mot2)
            _e0 = max(len(mot2), len(mot1))
            _r2 = (_e0 - _d2) * 1.0 / _e0 * 100
            _r = max(_r1, _r2)
        return '%5.2f' % _r


def calcul_MDFRA(adresse, mot_directeur):
    ll = len(adresse)
    if ll <= 0 or mot_directeur == '':
        return 0
    _avant = ''
    if ll > 1 and adresse[-1] in ('PROLONGEE', 'PROLONGE', 'INFERIEURE', 'INFERIEUR', 'SUPERIEURE', 'SUPERIEUR'):
        _md = adresse[-2]
        if ll > 2:
            _avant = adresse[-3]
    else:
        _md = adresse[-1]
        if ll > 1:
            _avant = adresse[-2]
    mdr0 = _md[:]
    mdr1 = mot_directeur
    ldt0 = len(mdr0)
    ldt1 = len(mdr1)
    dt = editdist.distance(mdr0, mdr1)
    _e0 = max(len(mdr0), len(mdr1))
    _rr1 = (_e0 - dt) * 1.0 / _e0 * 100
    _rr2 = round(_e0 * 0.15)
    if _rr1 >= 85:
        return _rr1
    if _e0 > 3 and dt <= _rr2:
        return 85.0
    fl_cont = True
    if mdr1.isdigit() and mdr0.isalpha() and isRomain(mdr0):
        if int(mdr1) == romanToArabic(mdr0):
            return 100.0
    elif mdr0.isdigit() and mdr1.isalpha() and isRomain(mdr1):
        if int(mdr0) == romanToArabic(mdr1):
            return 100.0
    else:
        for i in range(1, ll + 1):
            mdr0 = ''.join(adresse[i:])
            ldt0 = len(mdr0)
            dt = editdist.distance(mdr0, mdr1)
            _e0 = max(len(mdr0), len(mdr1))
            _r1 = (_e0 - dt) * 1.0 / _e0 * 100
            _r2 = round(_e0 * 0.15)
            if _r1 >= 85:
                return _r1
            if _e0 > 3 and dt <= _r2:
                return 85.0

        if len(mot_directeur) > 3:
            md1 = Combine([_md], False)
            for i in Combine([mot_directeur], False):
                if i in md1:
                    return 100.0

    return 0


def calcul_PEI(mot1, mot2):
    mot1 = mot1.upper()
    mot2 = mot2.upper()
    if mot2 == '' or mot1 == '':
        return 0
    else:
        mt2 = mot2.split()[-1]
        mt1 = mot1.split()[-1]
        _r = 0
        if mt2 in mot1 or mt1 in mot2:
            _r = 100
        else:
            _d1 = editdist.distance(mt2, mt1)
            _e0 = max(len(mt2), len(mt1))
            _r1 = (_e0 - _d1) * 1.0 / _e0 * 100
            _d2 = editdist.distance(mot1, mot2)
            _e0 = max(len(mot2), len(mot1))
            _r2 = (_e0 - _d2) * 1.0 / _e0 * 100
            _r = max(_r1, _r2)
        return _r


def distance(ref, b, supp1 = False):
    try:
        try:
            b1 = b.encode('utf-8')
            b = b1
        except:
            pass

        ref = ref.translate(maps, notwanted)
        b = b.translate(maps, notwanted)
        reflist = ref.split()
        blist = b.split()
        lreflist = len(reflist)
        lblist = len(blist)
        if lreflist == 0 or lblist == 0:
            d = editdist.distance(ref, b)
            return d
        if lreflist > lblist:
            reflist, blist = (blist, reflist)
            ref, b = (b, ref)
            lreflist, lblist = (lblist, lreflist)
        lmax = max(len(ref), len(b))
        d = 100.0
        d = 0
        for refw in reflist:
            if not refw in _articles:
                lrefw = len(refw)
                if lrefw == 1:
                    firstChar = refw[0]
                else:
                    firstChar = ''
                dists = [1.0]
                for bw in blist:
                    if not supp1 or len(bw) > 1:
                        if not bw in _articles:
                            if firstChar and bw.startswith(firstChar):
                                dists.append(0.0)
                            else:
                                lbw = len(bw)
                                if lbw == 1 and refw.startswith(bw[0]):
                                    dists.append(0.0)
                                else:
                                    _resu = 1.0
                                    nomv_bw = [bw]
                                    if bw in _38_abreviation[3]:
                                        nomv_bw.append(_38_abreviation[3][bw])
                                    for _bw in nomv_bw:
                                        dist = editdist.distance(refw, _bw)
                                        if dist == 0:
                                            _resu = 0.0
                                            break
                                        else:
                                            _resu0 = dist * 1.0 / max(lrefw, len(_bw))
                                            if _resu0 < _resu:
                                                _resu = _resu0

                                    dists.append(_resu)

                d += min(dists)

        d = int(round(d * max(len(ref), len(b))))
    finally:
        return d


class QuickSoundex():
    """QuickSoundex"""

    def __init__(this, length = 4):
        this.length = length
        charOrig = '\xc7\xd1\xe7\xf1bpckqdtlmnrgjxzsfvBPCKQDTLMNRGJXZSFV'
        charNew = '8585112223345567788899112223345567788899'
        this.charSkip = ''.join([ chr(char) for char in range(256) if chr(char) not in charOrig ])
        dict = {}
        [ dict.setdefault(key, value) for key, value in zip(charOrig, charNew) ]
        this.table = ''.join([ dict.get(chr(i), chr(i)) for i in range(256) ])

    def getKey(this, text):
        try:
            if text.strip() == '':
                return ['[]']
            try:
                t = text.decode('utf-8').encode('iso-8859-1')
            except:
                try:
                    t1 = convertUTFISO.convertUTF8(text).upper()
                    return [t1]
                except:
                    pass

                return [text]

            return [text.translate(this.table, this.charSkip)[0:this.length]]
        except Exception as ex:
            print ex
            return ['[]']


if _pays in ['FRA', 'MAR']:
    QSoundex = QuickSoundex(4)
else:
    try:
        import SoundCountry
        QSoundex = SoundCountry.QuickSoundex(2)
    except:
        QSoundex = QuickSoundex(2)

def VLicence(cle):
    vlistepays = ['*']
    if type(Licence.client_ref).__name__ == 'list':
        fl = False
        for i in Licence.client_ref:
            if i[1].strip() == cle.strip():
                dt = time.localtime()
                if i[2][0] > dt[0]:
                    fl = True
                elif i[2][0] == dt[0]:
                    if i[2][1] > dt[1]:
                        fl = True
                    elif i[2][1] == dt[1]:
                        fl = i[2][2] >= dt[2]
                if len(i) == 4:
                    if type(i[3]).__name__ == 'list':
                        vlistepays = i[3]
                    else:
                        try:
                            vlistepays = eval(str(i[3]))
                        except:
                            vlistepays = ['FRA']

                break

        return [fl, vlistepays]
    else:
        fl = Licence.client_ref == cle
        if fl:
            try:
                fl = False
                dt = time.localtime()
                if Licence.exp_date[0] > dt[0]:
                    fl = True
                elif Licence.exp_date[0] == dt[0]:
                    if Licence.exp_date[1] > dt[1]:
                        fl = True
                    elif Licence.exp_date[1] == dt[1]:
                        fl = Licence.exp_date[2] >= dt[2]
            except:
                fl = True

        return [fl, vlistepays]


def ExisteCompte(cle, compte, pays = 'FRA'):
    global _numclient
    if cle != None and cle != '':
        if '(' in cle:
            cle = cle[0:cle.index('(')].strip()
        fl = VLicence(cle)
        if fl[0] and compte != None and compte != '':
            if type(_numclient).__name__ != 'Cursor':
                fl[0] = _numclient.has_key(cle + '_' + compte)
        if fl[0]:
            if pays != '' and pays not in fl[1] and '*' not in fl[1]:
                fl[0] = False
            else:
                fl[0] = True
        return fl[0]
    else:
        return False
        return


def ExisteCompteInter(cle, pays = ''):
    retour = False
    if cle != None and cle != '':
        if '(' in cle:
            cle = cle[0:cle.index('(')].strip()
        fl = VLicence(cle)
        if fl[0]:
            if '*' not in fl[1] and pays not in fl[1]:
                retour = False
            else:
                retour = True
    return retour


def inlicence2(cle, valeur):
    resu = False
    if Licence == {}:
        return True
    if type(Licence.client_ref) is list:
        for i in Licence.client_ref:
            if i[1].strip() == cle.strip():
                resu = valeur in i[3]
                break

    else:
        resu = valeur == str(Licence.client_ref)
    return resu


def IncrementeCompte(cle, compte):
    if type(_numclient).__name__ != 'Cursor':
        reclicence = VLicence(cle)
        if cle != None and reclicence[0]:
            if _numclient.has_key(cle + '_'):
                _numclient[cle + '_'] = _numclient[cle + '_'] + 1
            else:
                _numclient[cle + '_'] = 1
        if reclicence[0] and compte != None and _numclient.has_key(cle + '_' + compte):
            _numclient[cle + '_' + compte] = _numclient[cle + '_' + compte] + 1
        _numclient.sync()
    return


def AjouteCompte(cle, compte):
    reclicence = VLicence(cle)
    if cle != None and cle != '' and reclicence[0]:
        if compte != None and compte != '' and not _numclient.has_key(cle + '_' + compte):
            _numclient[cle + '_' + compte] = 0
            _numclient.sync()
            return True
    return False


def SuppCompte(cle, compte):
    reclicence = VLicence(cle)
    if cle != None and cle != '' and reclicence[0]:
        if compte != None and compte != '' and _numclient.has_key(cle + '_' + compte):
            _numclient.pop(cle + '_' + compte)
            _numclient.sync()
            return True
    return False


def ListeCompte(cle, compte):
    resu = []
    reclicence = VLicence(cle)
    if cle != None and cle != '' and reclicence[0]:
        if compte == None or compte == '':
            for i in _numclient.keys():
                resu.append([cle, i.split('_')[1], _numclient[i]])

        elif compte != None and compte != '' and _numclient.has_key(cle + '_' + compte):
            resu.append([cle, compte, _numclient[cle + '_' + compte]])
    return resu


def MefNumVoie(tableau):
    resu = [[], []]
    ch = ''
    dep = -1
    mem = -1
    for i in tableau:
        if mem == -1:
            dep = i
            mem = i
        elif mem + 1 != i:
            if dep != mem:
                resu[0].append(str(dep) + '-' + str(mem))
            else:
                resu[1].append(str(dep))
            dep = i
            mem = i
        else:
            mem = i

    if mem != -1:
        if dep != mem:
            resu[0].append(str(dep) + '-' + str(mem))
        else:
            resu[1].append(str(dep))
    if resu == [[], []]:
        resu = []
    return resu


def MefNumero(numero, Pays):
    if Pays == 'FRA':
        if ' ' in numero:
            tb = numero.split()
            if tb[0].isdigit():
                if tb[1].isdigit():
                    return tb[0]
        return numero
    else:
        return numero


def rechCPInter(Ipays, Icp, Licence = ''):
    global _dicopaysiso
    global _geoCZip
    global _flag_melissa
    resu = []
    if _flag_melissa and Licence != '':
        rci = RecupCpInter()
        try:
            _resu0 = rci.index(Ipays, Icp, '1', Licence, Alpha='False')
            _resu = simplejson.loads(_resu0)
            for i in range(1, len(_resu) + 1):
                _r = _resu[str(i)]
                if _r != {}:
                    resu.append([_r['Localite'],
                     str(i),
                     _r['CodePostal'],
                     _r['Province']])

        except:
            resu = []

        rci = 0
    else:
        Icp = Icp.upper()
        if _dicopaysiso.has_key(Ipays) and _geoCZip.has_key(_dicopaysiso[Ipays] + '_' + Icp) or _geoCZip.has_key(Ipays + '_' + Icp):
            if _geoCZip.has_key(Ipays + '_' + Icp):
                f1 = _geoCZip[Ipays + '_' + Icp]
            else:
                f1 = _geoCZip[_dicopaysiso[Ipays] + '_' + Icp]
            for i in f1[1:]:
                resu.append([i,
                 '',
                 Icp,
                 f1[0]])

    return resu


def rechVilleInter(Ipays, Iville, Licence = '', retjson = True):
    global _geoCCity
    resu = []
    if _flag_melissa and Licence != '':
        rci = RecupCpInter()
        try:
            if retjson:
                _resu = eval(rci.index(Ipays, Iville, '1', Licence, Alpha='True'))
            else:
                _resu0 = rci.index(Ipays, Iville, '1', Licence, Alpha='True')
                _resu = simplejson.loads(_resu0)
            for i in range(1, len(_resu) + 1):
                _r = _resu[str(i)]
                if _r != {}:
                    if [_r['Localite'],
                     str(i),
                     _r['CodePostal'],
                     _r['Province']] not in resu:
                        resu.append([_r['Localite'],
                         str(i),
                         _r['CodePostal'],
                         _r['Province']])

        except Exception as e:
            resu = []

        rci = 0
    else:
        _villes = Iville.replace('-', ' ').replace('_', ' ').upper().split()
        for vi in _villes:
            if _dicopaysiso.has_key(Ipays) and _geoCCity.has_key(_dicopaysiso[Ipays] + '_' + vi) or _geoCCity.has_key(Ipays + '_' + vi):
                if _geoCCity.has_key(Ipays + '_' + vi):
                    f1 = _geoCCity[Ipays + '_' + vi]
                else:
                    f1 = _geoCCity[_dicopaysiso[Ipays] + '_' + vi]
                for i in f1:
                    a1 = [i[0],
                     '',
                     i[1],
                     i[2]]
                    resu.append(a1)

    return resu


def chargement_pays_iso():
    global _dicopaysiso
    global _flagdicopaysiso
    _dicopaysiso = {}
    try:
        if _python25:
            _pathcommon = _pathinitial + 'common'
        else:
            _pathcommon = _pathinitial + 'common27'
        if os.path.isfile(_pathcommon + '/paysref.dqe'):
            f = open(_pathcommon + '/paysref.dqe', 'rb')
            _dicopaysiso = pickle.load(f)
            f.close()
            _flagdicopaysiso = True
        elif os.path.isfile(_pathinitial + 'paysref.dqe'):
            f = open(_pathinitial + 'paysref.dqe', 'rb')
            _dicopaysiso = pickle.load(f)
            f.close()
            _flagdicopaysiso = True
        else:
            _dicopaysiso = {}
    except:
        write_error('log', 'chargement_pays_iso', 'erreur de chargement')
        return False

    return True


def chargement_licence_melissa():
    global _dicomelissa
    global _flag_melissa
    _dicomelissa = {}
    _flag_melissa = False
    if _python25:
        _pathcommon = _pathinitial + 'common'
    else:
        _pathcommon = _pathinitial + 'common27'
    try:
        f = open(_pathcommon + '/lic_melissa.dqe', 'rb')
        _dicomelissa = pickle.load(f)
        f.close()
        _flag_melissa = True
    except:
        _flag_melissa = False
        try:
            f = open('lic_melissa.dqe', 'rb')
            _dicomelissa = pickle.load(f)
            f.close()
            _flag_melissa = True
        except:
            _flag_melissa = False


def chargementtableoldinsee(fichier):
    global _OldInseeTab
    global _OldInseeValeurs
    ff = open(fichier)
    tl = True
    cpt = 1
    supp = ['DE',
     'EN',
     'ET',
     'SUR',
     'LE',
     'LA',
     'LES']
    for line in ff:
        if tl:
            if line != '':
                tb = line.strip().split(';')
                if tb >= 5:
                    insee = tb[0].strip()
                    localite = tb[1].strip().replace('-', ' ').replace("'", ' ').replace('  ', ' ').upper()
                    pays = tb[2]
                    tb3 = tb[3].split('-')
                    tb3[0] = int(tb3[0])
                    tb3[1] = int(tb3[1])
                    tb3[2] = int(tb3[2])
                    debut = datetime.datetime(*tuple(tb3))
                    tb3 = tb[4].split('-')
                    tb3[0] = int(tb3[0])
                    tb3[1] = int(tb3[1])
                    tb3[2] = int(tb3[2])
                    fin = datetime.datetime(*tuple(tb3))
                    cp = tb[5]
                    _OldInseeValeurs[cpt] = [insee,
                     localite,
                     pays,
                     debut,
                     fin,
                     cp]
                    loc = localite.split()[0]
                    for ii in range(3, len(loc) + 1):
                        loc0 = loc[0:ii]
                        if 'L_' + loc0 in _OldInseeTab:
                            _OldInseeTab['L_' + loc0] += [cpt]
                        else:
                            _OldInseeTab['L_' + loc0] = [cpt]

                    tb1 = localite.split()
                    if len(tb1) > 1:
                        for _mots in tb1[1:]:
                            if len(_mots) > 2:
                                for ii in range(3, len(_mots) + 1):
                                    loc0 = _mots[0:ii]
                                    if loc0 not in supp:
                                        if 'S_' + loc0 in _OldInseeTab:
                                            if cpt not in _OldInseeTab['S_' + loc0]:
                                                _OldInseeTab['S_' + loc0] += [cpt]
                                        else:
                                            _OldInseeTab['S_' + loc0] = [cpt]

                    for ii in range(3, 6):
                        insee0 = insee[0:ii]
                        if 'I_' + insee0 in _OldInseeTab:
                            _OldInseeTab['I_' + insee0] += [cpt]
                        else:
                            _OldInseeTab['I_' + insee0] = [cpt]

                    if cp.strip() != '':
                        for ii in range(3, 6):
                            cp0 = cp[0:ii]
                            if 'C_' + cp0 in _OldInseeTab:
                                _OldInseeTab['C_' + cp0] += [cpt]
                            else:
                                _OldInseeTab['C_' + cp0] = [cpt]

                    cpt += 1
        else:
            tl = True

    ff.close()


def chargement(pays):
    global _geoCCity
    global maproudis
    global _geoTab
    global geoloczipcode
    global _flag_mapnumero
    global mapadresse
    global _mapnumvoiecp
    global _table_carreaux
    global bandes_x
    global bandes_y
    global adresse
    global _numclient
    global _comptevoie
    global _cpvilleInter
    global _ipcpville
    global mapcp
    global _flag_mapnumerocp
    global _flag_mapcherchevoie
    global _mapbornes
    global cp_234U
    global _mapgeocodage
    global cp_234_ladr
    global _mapcomplement
    global _table_encadrement
    global cp_234
    global _flag_mapcomplement
    global _flag_mapcherchetypevoie
    global _mapinseecommune
    global _table_idk
    global mapcherchetypevoie
    global _flag_mapgeocodage
    global _cns
    global ff_values
    global _cedexa
    global _maxnbIP
    global _mapnumvoie
    global _fip1
    global fcp_polygone
    global _fip2
    global geoaddress
    global _mapnouveaunom
    global _flag_comptevoie
    global _mapgeoconvert
    global _mapcherchevoie
    global changenomvoie
    global bodacc
    global _fipo
    global mapville
    global cp_234_count
    global cpld_234
    global mapville3
    global mapville2
    global _mapnumvoiecle
    global _patholdinsee
    global mapville6
    global mapville5
    global mapville4
    global _flag_geoconvert
    global _table_vecteurs
    global _geoCZip
    global _irisilot
    global ff_bandesX
    global ff_bandesY
    global prov_234
    global _new_compteur
    global _map_inter
    global _flag_irisilot
    global _flag_roudis
    global _flag_geoloczipcode
    global _fl_tab_carreaux
    global base_geoCity_BAN
    if _pays == pays:
        if _rep_pays != pays:
            pays = _rep_pays
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/vecteur_carreaux.dqe'):
        print '-> chargement des carreaux INSEE FRA'
        try:
            _table_vecteurs = shelve.open(_pathinitial + 'International/' + _rep_pays + '/vecteur_carreaux.dqe')
            _table_idk = shelve.open(_pathinitial + 'International/' + _rep_pays + '/idk_carreaux.dqe')
            ff = open(_pathinitial + 'International/' + _rep_pays + '/carreaux.dqe', 'rb')
            _table_carreaux, bandes_x, bandes_y, _table_encadrement = cPickle.load(ff)
            ff.close()
            if len(_table_carreaux) == 0:
                _fl_tab_carreaux = False
                _table_carreaux = shelve.open(_pathinitial + 'International/' + _rep_pays + '/tab_carreaux.dqe')
        except Exception as e:
            write_error('log', 'chargement', 'erreur de chargement "vecteur_carreaux ' + str(e))
            return False

    cp_234 = {}
    print 'Chargement CP'
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_extend.dqe'):
        cp_234 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_extend.dqe')
    elif os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_234.mqe'):
        cp_234 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_234.mqe')
    elif os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_234.dqe'):
        try:
            f = open(_pathinitial + 'International/' + _rep_pays + '/cp_234.dqe', 'rb')
            cp_234 = pickle.load(f)
            f.close()
        except Exception as e:
            write_error('log', 'chargement', 'erreur de chargement "cp ' + str(e))
            return False

    try:
        cp_234_count = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_count.dqe'):
            cp_234_count = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_count.dqe')
        if _cns == 0:
            cp_234_ladr = {}
            if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_ladr.dqe'):
                cp_234_ladr = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_ladr.dqe')
        cp_234U = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_234U.dqe'):
            cp_234U = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_234U.dqe')
    except Exception as e:
        write_error('log', 'chargement', 'erreur de chargement "cp_count,cp_ladr,cp_234U ' + str(e))
        return False

    cpld_234 = {}
    print 'Chargement CPLD'
    try:
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cpld_234.dqe'):
            cpld_234 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cpld_234.dqe')
        prov_234 = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/prov_234.dqe'):
            prov_234 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/prov_234.dqe')
        _flag_comptevoie = False
        _comptevoie = {}
        print 'Chargement COUNTPOS'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_countpos.dqe'):
            f = open(_pathinitial + 'International/' + _rep_pays + '/cp_countpos.dqe', 'rb')
            _comptevoie = pickle.load(f)
            f.close()
            _flag_comptevoie = True
        mapcp = {}
        print 'Chargement IDNUM'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_IDnum.dqe'):
            mapcp = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_IDnum.dqe')
            if _flag_log:
                log('%s -> 3B - chargement CP NUM' % datetime.datetime.now())
    except Exception as e:
        write_error('log', 'chargement', 'erreur de chargement "cpld_234,prov_234,cp_countpos,IDNUM ' + str(e))
        return False

    try:
        mapville = {}
        print 'Chargement MAPVILLE'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville.dqe'):
            mapville = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapville.dqe')
            if _flag_log:
                log('%s -> 3 - chargement mapville' % datetime.datetime.now())
        mapville2 = {}
        print 'Chargement MAPVILLE2'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville2.dqe'):
            mapville2 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapville2.dqe')
            if _flag_log:
                log('%s -> 3 - chargement mapville2' % datetime.datetime.now())
        mapville3 = {}
        print 'Chargement MAPVILLE3'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville3.dqe'):
            mapville3 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapville3.dqe')
            if _flag_log:
                log('%s -> 3 - chargement mapville3' % datetime.datetime.now())
        print 'Chargement MAPVILLE4'
        mapville4 = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville4.dqe'):
            mapville4 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapville4.dqe')
        mapville5 = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville5.dqe'):
            ff = open(_pathinitial + 'International/' + _rep_pays + '/mapville5.dqe', 'rb')
            mapville5 = pickle.load(ff)
            ff.close()
        mapville6 = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville6.dqe'):
            mapville6 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapville6.dqe')
    except Exception as e:
        write_error('log', 'chargement', 'erreur de chargement "mapville1,mapville2,mapville3,mapville4,mapville5,mapville6" ' + str(e))
        return False

    try:
        mapadresse = {}
        print 'Chargement MAPAdresse1'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse1.dqe'):
            mapadresse = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse1.dqe')
            if _flag_log:
                log('%s -> 3 - chargement mapadresse1' % datetime.datetime.now())
        adresse = {}
        print 'Chargement MAPAdresse2'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse2.dqe'):
            adresse = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse2.dqe')
            if _flag_log:
                log('%s -> 3 - chargement mapadresse2' % datetime.datetime.now())
        print 'Chargement GeoConvert'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/convertGeo.dqe'):
            _mapgeoconvert = shelve.open(_pathinitial + 'International/' + _rep_pays + '/convertGeo.dqe')
            _flag_geoconvert = True
        maproudis = {}
        print 'Chargement roudis'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/roudis.dqe'):
            maproudis = shelve.open(_pathinitial + 'International/' + _rep_pays + '/roudis.dqe')
            _flag_roudis = True
            if _flag_log:
                log('%s -> 3 - chargement roudis' % datetime.datetime.now())
        if _new_compteur:
            _numclient = {}
            if _fwrite_error == None:
                if not os.path.isdir(_pathinitial + 'stat'):
                    os.mkdir(_pathinitial + 'stat')
        else:
            _numclient = {}
            if not os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/dqe.stat'):
                _numclient = shelve.open(_pathinitial + 'International/' + _rep_pays + '/dqe.stat', 'c', writeback=True)
                if _flag_log:
                    log('%s -> 3 - creation dqe.stat' % datetime.datetime.now())
            else:
                _numclient = shelve.open(_pathinitial + 'International/' + _rep_pays + '/dqe.stat', writeback=True)
        _mapnumvoie = {}
        _flag_mapnumero = False
        print 'Chargement MAPAdresse3'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3.dqe'):
            _mapnumvoie = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3.dqe')
            _flag_mapnumero = True
        _mapnumvoiecle = {}
        print 'Chargement MAPAdresse3a'
        if _flag_mapnumero and os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3a.dqe'):
            _mapnumvoiecle = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3a.dqe')
        _mapnumvoiecp = {}
        print 'Chargement MapAdresse3c'
        _flag_mapnumerocp = False
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3c.dqe'):
            _mapnumvoiecp = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3c.dqe')
            _flag_mapnumerocp = len(_mapnumvoiecp) > 1
        mapcherchetypevoie = {}
        _flag_mapcherchetypevoie = False
        print 'Chargement MAPAdresse3d'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3d.dqe'):
            mapcherchetypevoie = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3d.dqe')
            _flag_mapcherchetypevoie = True
        changenomvoie = {}
        print 'Chargement MAPAdresse3e'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3e2.dqe'):
            _cnv = open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3e2.dqe', 'rb')
            changenomvoie = pickle.load(_cnv)
            _cnv.close()
        elif os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3e.dqe'):
            _cnv = open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3e.dqe', 'rb')
            changenomvoie = pickle.load(_cnv)
            _cnv.close()
        _mapnouveaunom = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse4.dqe'):
            _mapnouveaunom = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse4.dqe')
        _mapbornes = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse4a.dqe'):
            ff = open(_pathinitial + 'International/' + _rep_pays + '/mapadresse4a.dqe')
            _mapbornes = pickle.load(ff)
            ff.close()
        _cedexa = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse5.dqe'):
            _cedexa = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse5.dqe')
        _mapgeocodage = {}
        _flag_mapgeocodage = False
        _mapcomplement = {}
        _flag_mapcomplement = False
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse6.dqe'):
            _mapcomplement = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse6.dqe')
            if _flag_log:
                log('%s -> 3 - chargement mapadresse6' % datetime.datetime.now())
            _flag_mapcomplement = True
        _mapcherchevoie = {}
        _flag_mapcherchevoie = False
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse7.dqe'):
            _mapcherchevoie = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse7.dqe')
            if _flag_log:
                log('%s -> 3 - chargement mapadresse7' % datetime.datetime.now())
            _flag_mapcherchevoie = True
        _mapinseecommune = {}
        _flag__mapinseecommune = False
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse7b.dqe'):
            _mapinseecommune = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse7b.dqe')
            if _flag_log:
                log('%s -> 3 - chargement mapadresse7b' % datetime.datetime.now())
            _flag__mapinseecommune = True
        bodacc = {}
        if _flag_bodacc:
            if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/bodacc.dqe'):
                f = open(_pathinitial + 'International/' + _rep_pays + '/bodacc.dqe', 'rb')
                bodacc = pickle.load(f)
                f.close()
                if _flag_log:
                    log('%s -> 3 - Chargement du BODACC effectue' % datetime.datetime.now())
    except Exception as e:
        write_error('log', 'chargement', 'erreur de chargement "Adresse" ' + str(e))
        return False

    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/geocodage.dqe'):
        _mapgeocodage = shelve.open(_pathinitial + 'International/' + _rep_pays + '/geocodage.dqe')
        _flag_mapgeocodage = True
    _fip1 = {}
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/geoiploc1.dqe'):
        _fip1 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/geoiploc1.dqe')
    _fip2 = {}
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/geoiploc2.dqe'):
        _fip2 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/geoiploc2.dqe')
    _fipo = 0
    _maxnbIP = 0
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/geoiploc0.dqe'):
        try:
            _maxnbIP = os.path.getsize(_pathinitial + 'International/' + _rep_pays + '/geoiploc0.dqe') / 15L
            _fipo = open(_pathinitial + 'International/' + _rep_pays + '/geoiploc0.dqe', 'rb')
        except:
            _maxnbIP = 0

    _geoCZip = {}
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/GeoCZip.dqe'):
        _geoCZip = shelve.open(_pathinitial + 'International/' + _rep_pays + '/GeoCZip.dqe')
    _geoCCity = {}
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/GeoCCity.dqe'):
        _geoCCity = shelve.open(_pathinitial + 'International/' + _rep_pays + '/GeoCCity.dqe')
    geoloczipcode = {}
    _flag_geoloczipcode = False
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/GeolocZipCode.dqe'):
        geoloczipcode = shelve.open(_pathinitial + 'International/' + _rep_pays + '/GeolocZipCode.dqe')
        _flag_geoloczipcode = True
    _geoTab = {}
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/geoIPDefault.dqe'):
        _geoTab = shelve.open(_pathinitial + 'International/' + _rep_pays + '/geoIPDefault.dqe')
    _map_inter = {}
    if os.path.isfile(_pathinitial + 'International/BaseInter.dqe'):
        _map_inter = shelve.open(_pathinitial + 'International/BaseInter.dqe')
    _ipcpville = {}
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/PositionVilleIP.dqe'):
        _ipcpville = shelve.open(_pathinitial + 'International/' + _rep_pays + '/PositionVilleIP.dqe')
    geoaddress = {}
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/geoaddress.dqe'):
        geoaddress = shelve.open(_pathinitial + 'International/' + _rep_pays + '/geoaddress.dqe')
    _irisilot = {}
    _flag_irisilot = False
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/irisilot.dqe'):
        _irisilot = shelve.open(_pathinitial + 'International/' + _rep_pays + '/irisilot.dqe')
        _flag_irisilot = True
    _cpvilleInter = {}
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cpvilleInter.dqe'):
        _cpvilleInter = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cpvilleInter.dqe')
    base_geoCity_BAN = {}
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/base_cp_ban.dqe'):
        base_geoCity_BAN = shelve.open(_pathinitial + 'International/' + _rep_pays + '/base_cp_ban.dqe')
    if _patholdinsee != '' and os.path.isfile(_patholdinsee):
        chargementtableoldinsee(_patholdinsee)
    print 'Chargement IRIS'
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/Iris_Values.dqe'):
        _flag_irisilot = True
        ff_values = shelve.open(_pathinitial + 'International/' + _rep_pays + '/Iris_Values.dqe')
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/Iris_BandesX.dqe'):
        ff_bandesX = shelve.open(_pathinitial + 'International/' + _rep_pays + '/Iris_BandesX.dqe')
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/Iris_BandesY.dqe'):
        ff_bandesY = shelve.open(_pathinitial + 'International/' + _rep_pays + '/Iris_BandesY.dqe')
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/Iris_polygons.dqe'):
        fcp_polygone = shelve.open(_pathinitial + 'International/' + _rep_pays + '/Iris_polygons.dqe')
    print 'Fin Chargement'
    return True


def rechercheIRIS(_lon, _lat, tx = 2, ty = 2, insee = ''):
    _lon = float(_lon)
    _lat = float(_lat)
    t_x = 10 ** tx
    t_y = 10 ** ty
    x0, y0 = WGSLam93(_lat, _lon)
    resuxy = [[x0, y0]]
    if insee != '':
        for _vlat, _vlon in [[0.000934, 0],
         [-0.000934, 0],
         [0, 0.001266],
         [0, -0.001266],
         [0.000660338, 0.000895062],
         [0.000660338, -0.000895062],
         [-0.000660338, 0.000895062],
         [-0.000660338, -0.000895062]]:
            resuxy.append(WGSLam93(_lat + _vlat, _lon + _vlon))

    for x2, y2 in resuxy:
        x3 = int(x2 / t_x) * t_x
        y3 = int(y2 / t_y) * t_y
        resultat = ''
        try:
            if str(x3) in ff_bandesX:
                if str(y3) in ff_bandesY:
                    a1 = cPickle.loads(ff_bandesX[str(x3)])
                    a2 = cPickle.loads(ff_bandesY[str(y3)])
                    inter = numpy.intersect1d(a1, a2)
                    for _resu in inter:
                        if str(_resu) in fcp_polygone:
                            if point_in_poly(x2, y2, cPickle.loads(fcp_polygone[str(_resu)])):
                                resultat = str(_resu)
                                break

        except Exception as e:
            write_error('log', 'rechercheIRIS', 'erreur ' + str(e))

        if insee != '' and resultat != '':
            r = ff_values[resultat]
            if r[0] == insee:
                return r

    if resultat != '':
        return ff_values[resultat]
    elif insee != '':
        return [insee,
         '0000',
         '',
         '']
    else:
        return ['00000',
         '0000',
         '',
         '']


def fermeture():
    global _mapnouveaunom
    global _fipo
    global _mapnumvoie
    global _fip1
    global _fip2
    global maproudis
    global geoaddress
    global _map_inter
    global _geoTab
    global changenomvoie
    global mapadresse
    global _mapnumvoiecp
    global mapville
    global cp_234_count
    global adresse
    global _numclient
    global cpld_234
    global mapville3
    global mapville2
    global _mapnumvoiecle
    global GeolocZipCode
    global mapville4
    global _ipcpville
    global mapcp
    global _irisilot
    global _mapgeocodage
    global _mapbornes
    global cp_234U
    global cp_234_ladr
    global _mapcomplement
    global cp_234
    global base_geoCity_BAN
    if _flag_log:
        log('%s -> fermeture des tables en cours ...' % datetime.datetime.now())
    try:
        cp_234.close()
    except:
        cp_234 = {}

    try:
        cp_234U.close()
    except:
        cp_234U = {}

    try:
        cpld_234.close()
    except:
        cpld_234 = {}

    try:
        cp_234_count.close()
    except:
        cp_234_count = {}

    try:
        cp_234_ladr.close()
    except:
        cp_234_ladr = {}

    try:
        mapcp.close()
    except:
        mapcp = {}

    try:
        mapville.close()
    except:
        mapville = {}

    try:
        mapville2.close()
    except:
        mapville2 = {}

    try:
        mapville3.close()
    except:
        mapville3 = {}

    try:
        mapville4.close()
    except:
        mapville4 = {}

    try:
        mapadresse.close()
    except:
        mapadresse = {}

    _flag_roudis = False
    try:
        maproudis.close()
    except:
        maproudis = {}

    try:
        adresse.close()
    except:
        adresse = {}

    try:
        _numclient.close()
    except:
        _numclient = {}

    try:
        _mapnumvoie.close()
    except:
        _mapnumvoie = {}

    try:
        _mapnumvoiecle.close()
    except:
        _mapnumvoiecle = {}

    try:
        _mapnumvoiecp.close()
    except:
        _mapnumvoiecp = {}

    try:
        _mapnouveaunom.close()
    except:
        _mapnouveaunom = {}

    try:
        _mapcomplement.close()
    except:
        _mapcomplement = {}

    try:
        _mapgeocodage.close()
    except:
        _mapgeocodage = {}

    try:
        _fipo.close()
    except:
        _fipo = {}

    try:
        _fip1.close()
    except:
        _fip1 = {}

    try:
        _fip2.close()
    except:
        _fip2 = {}

    try:
        _numclient.close()
    except:
        _numclient = {}

    try:
        GeolocZipCode.close()
    except:
        GeolocZipCode = {}

    try:
        _map_inter.close()
    except:
        _map_inter = {}

    try:
        _geoTab.close()
    except:
        _geoTab = {}

    try:
        _ipcpville.close()
    except:
        _ipcpville = {}

    try:
        geoaddress.close()
    except:
        geoaddress = {}

    try:
        _irisilot.close()
    except:
        _irisilot = {}

    changenomvoie = {}
    _mapbornes = {}
    try:
        base_geoCity_BAN.close()
    except:
        base_geoCity_BAN = {}

    if _flag_log:
        log('%s -> Fermeture des tables r\xe9ussie !' % datetime.datetime.now())


def PhonexCdr(text):
    global _trans
    if _pays in ('FRA', 'MAR'):
        try:
            t1 = text.decode('utf-8').encode('iso-8859-1')
            try:
                t2 = t1.translate(_trans, '')
                text = t2
            except:
                text = t1

        except:
            try:
                text = convertUTFISO.convertUTF8(text).upper()
            except:
                pass

            return [text]

        if text.strip() == '':
            return ['[]']
        trans = string.maketrans('\xe1\xe0\xe4\xe3\xe2\xc1\xc0\xc4\xc3\xc2\xfd\xff\xdd\xed\xec\xef\xee\xcd\xcc\xcf\xce\xf3\xf2\xf6\xf5\xf4\xd3\xd2\xd6\xd5\xd4\xfa\xf9\xfc\xfb\xda\xd9\xdc\xdb\xf1\xd1\xe7\xc7', 'AAAAAAAAAAYYYIIIIIIIIOOOOOOOOOOUUUUUUUUNNSS')
        chaine = text
        chaine = chaine.translate(trans, " -.+*/,:;_'`?~@#$%^& =()!=|{}[]")
        chaine = chaine.upper()
        chaine1 = ''
        mem = ''
        for i in chaine:
            if mem != i:
                mem = i
                chaine1 = chaine1 + i

        return [Phonems(chaine1)]
    else:
        return [text]


def PhonexCdrVille(text):
    if _pays in ('FRA', 'MAR'):
        try:
            t1 = text.decode('utf-8').encode('iso-8859-1').upper()
            try:
                t2 = t1.translate(_trans, '')
                text = t2
            except:
                text = t1

        except:
            try:
                t1 = convertUTFISO.convertUTF8(text).upper()
            except:
                return [text]

        if text.strip() == '':
            return ['[]']
        trans = string.maketrans('\xe1\xe0\xe4\xe3\xe2\xc1\xc0\xc4\xc3\xc2\xfd\xff\xdd\xed\xec\xef\xee\xcd\xcc\xcf\xce\xf3\xf2\xf6\xf5\xf4\xd3\xd2\xd6\xd5\xd4\xfa\xf9\xfc\xfb\xda\xd9\xdc\xdb\xf1\xd1\xe7\xc7', 'AAAAAAAAAAYYYIIIIIIIIOOOOOOOOOOUUUUUUUUNNSS')
        chaine = text
        chaine = chaine.translate(trans, " -.+*/,:;_'`?~@#$%^& =()!=|{}[]")
        chaine = chaine.upper()
        chaine1 = ''
        mem = ''
        for i in chaine:
            if mem != i:
                mem = i
                chaine1 = chaine1 + i

        return [Phonems(chaine1)]
    else:
        return [traduitMAJUTF8(text)]


def traduitMAJUTF8(text):
    textm = text
    try:
        t1 = text.decode('utf-8').encode('iso-8859-1').upper()
        try:
            t2 = t1.translate(_trans, '')
            text = t2
        except:
            try:
                text = convertUTFISO.convertUTF8(textm).upper()
            except:
                text = t1

        if chr(201) in text:
            try:
                t1 = convertUTFISO.convertUTF8(textm).upper()
                return t1
            except:
                pass

            return textm.upper()
        return text
    except:
        try:
            t1 = convertUTFISO.convertUTF8(text).upper()
            return t1
        except:
            pass

        return text.upper()


def PhonexCdrVilleListe(text):
    try:
        t1 = text.decode('utf-8').encode('iso-8859-1').upper()
        try:
            t2 = t1.translate(_trans, '')
            text = t2
        except:
            text = t1

    except:
        try:
            text = convertUTFISO.convertUTF8(text).upper()
        except:
            return text.upper()

    tq = text.split()
    for i in range(0, len(tq)):
        if i not in _articles:
            a = PhonexCdrVille(tq[i])[0]
            if len(a) > 1:
                tq[i] = a
            else:
                tq[i] = ''
        else:
            tq[i] = ''

    return ' '.join(tq)


def Phonex(text):
    tb = []
    for i in text.split():
        tb.append(PhonexCdr(i))

    return tb


def PhonexVille(text):
    tb = []
    for i in text.split():
        tb.append(PhonexCdrVille(i))

    return tb


def ExisteSuppDernier(chaine):
    global _suppdernier
    fl = False
    i1 = len(chaine)
    for i in _suppdernier:
        i2 = len(i)
        if i1 > i2 and chaine[-i2:].upper() == i.upper():
            fl = True
            break

    return fl


def SupprimerDernier(chaine):
    resu = []
    if _suppdernier != []:
        i1 = len(chaine)
        for i in _suppdernier:
            i2 = len(i)
            if i1 > i2 and chaine[-i2:].upper() == i.upper():
                vl = chaine[0:-i2].upper()
                resu = [i.upper(), vl.strip(), vl[-1] == ' ']
                break

    return resu


def decoupage_international(adr1, adr2, adr3, zip, city):
    a1 = adr1.strip().__hash__()
    a2 = adr2.strip().__hash__()
    a3 = adr3.strip().__hash__()
    a4 = zip.strip().__hash__()
    a5 = city.strip().__hash__()
    return str(a1) + '_' + str(a2) + '_' + str(a4) + '_' + str(a4) + '_' + str(a5)


def MiseEnFormeMelissa(m_cle, a_adr1, a_adr2, a_adr3, a_cp, a_ville):
    va = _map_inter[m_cle]
    if len(va) == 1:
        i = 0
    else:
        for i in range(0, len(va)):
            if va[i][0][0] == a_adr1 and va[i][0][1] == a_adr2 and va[i][0][2] == a_adr3 and va[i][0][3] == a_cp and va[i][0][4] == a_ville:
                break

    if i < len(va):
        m_adr1 = va[i][1][0]
        m_adr2 = va[i][1][1]
        m_adr3 = va[i][1][2]
        m_cp = va[i][1][3]
        m_ville = va[i][1][4]
        m_region = va[i][1][5]
        m_pays = va[i][1][6]
        m_okko = va[i][1][7]
        if m_okko.upper() in ('OK', 'YES', 'O', 'Y'):
            av1 = 'AV11,DEJA'
        else:
            av1 = 'DEJA'
        resu = {'Records': [{'Address1': m_adr1,
                      'Address2': m_adr2,
                      'Address3': m_adr3,
                      'AddressLine1': m_adr1,
                      'AddressLine2': m_adr2,
                      'AddressLine3': m_adr3,
                      'AdministrativeArea': m_region,
                      'CountryISO3166_1_Alpha3': m_pays,
                      'Locality': m_ville,
                      'PostBox': '',
                      'PostalCode': m_cp,
                      'PostalCodePrimary': m_cp,
                      'Premise': '',
                      'PremisesNumber': '',
                      'Results': av1,
                      'Thoroughfare': m_adr1,
                      'ThoroughfareLeadingType': '',
                      'ThoroughfareName': m_adr1,
                      'ThoroughfareTrailingType': ''}],
         'TotalRecords': 1,
         'd': {'Results': [{'Address': {'Address1': m_adr1,
                                        'Address2': m_adr2,
                                        'Address3': m_adr3,
                                        'AddressLine1': m_adr1,
                                        'AddressLine2': m_adr2,
                                        'AddressLine3': m_adr3,
                                        'AdministrativeArea': m_region,
                                        'CountryISO3166_1_Alpha3': m_pays,
                                        'Locality': m_ville,
                                        'PostBox': '',
                                        'PostalCode': m_cp,
                                        'PostalCodePrimary': m_cp,
                                        'Premise': '',
                                        'PremisesNumber': '',
                                        'Results': av1,
                                        'Thoroughfare': m_adr1,
                                        'ThoroughfareLeadingType': '',
                                        'ThoroughfareName': m_adr1,
                                        'ThoroughfareTrailingType': ''}}]}}
    else:
        resu = ''
    return resu


def Recherche_CP_BAN(idlocalite, cplocalite, localite, lieudit):
    localite = localite.strip()
    lieudit = lieudit.strip()
    if idlocalite in base_geoCity_BAN:
        va = base_geoCity_BAN[idlocalite]
        ha = idlocalite + '_' + str((localite + '_' + lieudit).__hash__())
        if ha in va:
            r = va[ha]
            return [r[3], r[4]]
        else:
            r = ['', '']
            for _i in va:
                i = va[_i]
                if lieudit == '':
                    if i[2] == '' and (i[1] == localite or i[1][0:len(localite)] == localite):
                        r = [i[3], i[4]]
                        break
                    elif i[2] == '' and i[0] == cplocalite:
                        r = [i[3], i[4]]
                elif (i[2] == lieudit or i[2][0:len(lieudit)] == lieudit) and (i[1] == localite or i[1][0:len(localite)] == localite):
                    r = [i[3], i[4]]
                    break
                elif i[2] == '' and i[0] == cplocalite:
                    r = [i[3], i[4]]

            return r
    else:
        return ['', '']


def recherche_cpEtendue(valeur):
    global _lenDepartement
    res = []
    for va in valeur.split('-'):
        if va != '':
            dep = va[0:_lenDepartement]
            if _pays == 'FRA' and dep != '' and (dep[-1] == 'A' or dep[-1] == 'B'):
                dep = va[0] + '0'
            if cp_234.has_key(dep):
                li = cp_234[dep]
                for vb in li:
                    if vb[2][0:len(va)] == va:
                        vb1 = vb[:]
                        if _pays == 'FRA':
                            res.append([vb[0],
                             vb[1],
                             vb[3],
                             '',
                             vb[2]])
                        else:
                            res.append(vb1[:])

    return res


def recherche_IDcp(valeur, ville = ''):
    res = []
    if '(' in ville:
        ville = ville.split('(')[0].strip()
    for va in valeur.split('-'):
        if va != '':
            dep = va[0:_lenDepartement]
            if _pays == 'FRA' and dep != '' and (dep[-1] == 'A' or dep[-1] == 'B'):
                dep = va[0] + '0'
            if cp_234.has_key(dep):
                li = cp_234[dep]
                for vb in li:
                    if vb[1] == va:
                        vb1 = vb[:]
                        vb1[0] = decode(vb1[0])
                        if ville == '' or ville == vb1[0]:
                            res.append(vb1[:])
                            break

    return res


def fct_majcp(valeur):
    global _tiret_long
    global _tiret_moyen
    v = valeur.replace(' ', '').replace('-', '').replace('+', '').replace('_', '').replace('/', '').replace('>', '').replace('<', '').replace(_tiret_moyen, '').replace(_tiret_long, '')
    if _pays == 'GBR':
        if len(v) != 5 and len(v) != 6 and len(v) != 7:
            return valeur.upper()
        if len(v) == 7:
            valeur = v[0:4] + ' ' + v[4:]
        elif len(v) == 6:
            valeur = v[0:3] + ' ' + v[3:]
        else:
            valeur = v[0:2] + ' ' + v[2:]
        valeur = valeur.upper()
    elif _pays == 'NLD':
        if len(v) <= 4:
            return valeur
        valeur = v[0:4] + ' ' + v[4:]
    elif _pays == 'CZE':
        if len(v) <= 4:
            return valeur
        valeur = v[0:3] + ' ' + v[3:]
    elif _pays == 'POL':
        if len(v) <= 4:
            return valeur
        valeur = v[0:2] + '' + v[2:]
    elif _pays == 'LUX':
        if len(v) < 4:
            return valeur
        valeur = v
    elif _pays == 'PRT':
        if len(v) < 7:
            return valeur
        valeur = v[0:4] + '' + v[4:]
    else:
        if _pays in ('KOR', 'SWE', 'JPN'):
            return v
        if _pays == 'USA':
            if len(v) > 5:
                valeur = (v[0:5] + ' ' + v[5:]).strip()
    return valeur


def ExisteCompteTel(cle, valeur = ''):
    if cle != None and cle != '':
        if '(' in cle:
            cle = cle[0:cle.index('(')].strip()
        fl = VLicence(cle)
        if fl != []:
            if valeur == '':
                if fl[0]:
                    if 'TELPLUS' not in fl[1]:
                        retour = False
                    else:
                        retour = True
            else:
                retour = valeur in fl[1]
        else:
            retour = False
    return retour


if not _new_compteur:

    def comptage_activite(licence, pays, comm):
        global _urltampon
        if _urltampon != '':
            if comm != '':
                if _urltampon[-1] == '/':
                    vurl = _urltampon + 'DQESTAT/?licence=%s&pays=%s&comm=%s' % (licence, pays, comm)
                else:
                    vurl = _urltampon + '/DQESTAT/?licence=%s&pays=%s&comm=%s' % (licence, pays, comm)
                try:
                    retour = urllib2.urlopen(vurl).read()
                    return retour
                except:
                    return ''

            else:
                return ''
        else:
            return ''


else:

    def comptage_activite(licence, pays = '', comm = '', IP_Trace = '', infos = ''):
        if licence != '':
            if _fwrite_error == None:
                s = '%s;%s;%s;%s;%s;%s' % (str(datetime.datetime.now())[0:19],
                 licence,
                 comm,
                 pays,
                 IP_Trace,
                 infos)
                portlog(s, str(_port_num))
        return


def chargement_licence_OP():
    global _flag_optel
    global _dicoinfobip
    global _dicobiteplant
    _dicobiteplant = {}
    _flag_optel = False
    if _python25:
        _pathcommon = _pathinitial + 'common'
    else:
        _pathcommon = _pathinitial + 'common27'
    try:
        f = open(_pathcommon + '/lic_biteplant.dqe', 'rb')
        _dicobiteplant = pickle.load(f)
        f.close()
        _flag_optel = True
    except:
        _flag_optel = False
        try:
            f = open('lic_biteplant.dqe', 'rb')
            _dicobiteplant = pickle.load(f)
            f.close()
            _flag_optel = True
        except:
            _flag_optel = False

    try:
        f = open(_pathcommon + '/lic_infobip.dqe', 'rb')
        _dicoinfobip = pickle.load(f)
        f.close()
        _flag_optel = True
    except:
        try:
            f = open('lic_infobip.dqe', 'rb')
            _dicoinfobip = pickle.load(f)
            f.close()
            _flag_optel = True
        except:
            pass


def recherche_cp(valeur, tempsreel = False, fl_ajoutecp = False, Provenance = 'CP', Etendue = 'N', flag_voie = True, flag_cedexa = True):
    global _flag_recup_count_cp
    global _avec_voie
    if _pays in ('GBR', 'NLD', 'CZE', 'PRT', 'POL', 'LUX', 'KOR', 'SWE', 'JPN'):
        valeur = fct_majcp(valeur)
    if '.' in valeur:
        v = rechercheDicoIP(valeur, _fipo, _maxnbIP, _fip1, _fip2)
        if v == []:
            v = ['',
             '',
             0,
             0]
        elif Provenance != 'CP' and _ipcpville.has_key(v[2] + '_' + v[3]):
            r = _ipcpville[v[2] + '_' + v[3]]
            if r != '':
                v1 = r[0][1]
                for i in range(1, len(r)):
                    if '-' in r[i][1]:
                        for j in r[i][1].split('-'):
                            if j not in v1:
                                v1 += '-' + j

                    elif r[i][1] not in v1:
                        v1 += '-' + r[i][1]

                return [['IP2_ADDRESS',
                  v1,
                  v[2],
                  v[3],
                  '',
                  '']]
        return [['IP_ADDRESS'] + v + ['']]
    if len(valeur) < _lenCP and Etendue not in 'OYoy':
        if len(valeur) != _lenDepartement:
            return []
    _ville = ''
    if _pays not in ('USA', 'GBR', 'NLD', 'CZE', 'PRT', 'POL', 'LUX', 'KOR') and len(valeur) > _lenCP:
        if valeur[_lenCP] == ' ':
            _sp = valeur.split()
            _ville = _sp[1][:].upper()
            valeur = _sp[0][:]
    resu = [[], [], []]
    vi = {}
    va = []
    valeur = valeur.replace(' ', '')
    if tempsreel:
        if _pays in ('NLD',):
            valeur = valeur.replace(' ', '').replace('_', '').replace('-', '')
            if _pays == 'NLD':
                if len(valeur) > 4:
                    fl_cp = cp_234_count.has_key(valeur)
                    if not fl_cp:
                        fl_cp = cp_234_count.has_key(valeur[0:4])
                        if fl_cp:
                            valeur = valeur[0:4]
                else:
                    fl_cp = cp_234_count.has_key(valeur)
        elif _pays in ('USA',):
            if ' ' in valeur:
                fl_cp = cp_234_count.has_key(valeur)
                if not fl_cp:
                    _valeur1 = valeur.split()[0]
                    fl_cp = cp_234_count.has_key(_valeur1)
            else:
                fl_cp = cp_234_count.has_key(valeur)
        elif _flag_recup_count_cp:
            fl_cp = cp_234_count.has_key(valeur.replace(' ', ''))
        else:
            fl_cp = False
        if fl_cp:
            resu = []
            _valeur1 = valeur.replace(' ', '')
            _valeur2 = ''
            _filtre = ''
            _zipplus = ''
            ts = []
            if _pays in ('USA',):
                if ' ' in valeur:
                    _v = valeur.split()
                    _valeur1 = _v[0]
                    _valeur2 = _v[1]
                elif len(valeur) > 5:
                    _valeur1 = valeur[0:5]
                    _valeur2 = valeur[5:]
                    if _valeur2 < 4:
                        _valeur2 = '0000'[0:4 - len(_valeur2)] + _valeur2
                else:
                    _valeur1 = valeur
                    _valeur2 = ''
                if _valeur2 != '':
                    try:
                        _i_valeur2 = int(_valeur2)
                        if _i_valeur2 % 2 == 0:
                            _eo = 'E'
                        else:
                            _eo = 'O'
                    except:
                        _i_valeur2 = -1

                    if _valeur1 + '>' in cp_234_count:
                        _ts = cp_234_count[_valeur1 + '>']
                        for i in _ts:
                            if _valeur2 == i[3] and _valeur2 == i[4]:
                                if i[1] != '' and i[1] == i[2]:
                                    ts.append([i[0], i[6], i[1]])
                                else:
                                    try:
                                        _i1 = int(i[1])
                                        if _i1 % 2 == 0:
                                            _eoc = '['
                                        else:
                                            _eoc = ']'
                                    except:
                                        _eoc = '['

                                    if i[1] != '' and i[2] != '':
                                        _filtre = i[1] + _eoc + i[2]
                                    if i[3] == i[4]:
                                        _zipplus = ' ' + i[3]
                                    ts.append([i[0], i[6], ''])
                                break
                            elif i[1] != '' and i[2] != '' and i[3] != '' and _i_valeur2 >= 0 and (i[5] == 'B' or i[5] == _eo):
                                try:
                                    _i1 = int(i[1])
                                    _i2 = int(i[2])
                                    _i3mini = int(i[3])
                                    _i3maxi = int(i[4])
                                    if _i_valeur2 >= _i3mini and _i_valeur2 <= _i3maxi:
                                        _zipplus = ' ' + _valeur2
                                        ts.append([i[0], i[6], str(_i1 + (_i_valeur2 - _i3mini))])
                                        break
                                except:
                                    pass

                else:
                    ts1 = cp_234_count[_valeur1 + '>']
                    for i in ts1:
                        if i[1] == i[2]:
                            if i not in ts:
                                ts.append(i)
                        elif [i[0],
                         '',
                         '',
                         '',
                         '',
                         '',
                         i[6]] not in ts:
                            ts.append([i[0],
                             '',
                             '',
                             '',
                             '',
                             '',
                             i[6]])

            else:
                ts = cp_234_count[_valeur1]
            if ts != [] and ts[0] != '*':
                if cp_234.has_key(valeur.replace(' ', '')):
                    va1 = cp_234[valeur]
                    for i in va1:
                        i1 = i[:]
                        i1[0] = decode(i1[0])
                        if len(i) == 3:
                            i1.append('')
                            i1.append(valeur)
                            resu.append(i1[:])
                        elif i1[3] != i1[0]:
                            if [i1[0],
                             i1[1],
                             i1[2],
                             i1[3],
                             valeur] not in resu:
                                i1.append(valeur)
                                resu.append(i1[:])
                        elif [i1[0],
                         i1[1],
                         i1[2],
                         '',
                         valeur] not in resu:
                            resu.append(i1[:])

                for i1 in ts:
                    i = i1[0]
                    if i[0] != '_':
                        res_adr = adresse[i][:]
                        res_adr[0] = decode(res_adr[0][:])
                        try:
                            i1_1 = i1[1]
                        except:
                            i1_1 = ''

                        rew_cs = []
                        if _pays in ('USA', 'NLD', 'CZE', 'PRT', 'POL', 'LUX', 'KOR'):
                            res_cp = []
                            for iic in cp_234[valeur.split()[0]]:
                                if i1_1 == '' or iic[1] == i1_1:
                                    res_cp = iic[:]
                                    break

                            if res_cp == []:
                                res_cp = cp_234[valeur.split()[0]][0][:]
                        else:
                            for iic in cp_234[valeur]:
                                if i1_1 == '' or iic[1] == i1_1:
                                    res_cp = iic[:]
                                    break

                            if res_cp == []:
                                res_cp = cp_234[valeur][0][:]
                        res_cp[0] = decode(res_cp[0][:])
                        if len(i1) >= 3:
                            if _pays in ('USA',):
                                if _filtre == '':
                                    res_num = RechNumVoie([['',
                                      '',
                                      '',
                                      i1[2],
                                      '',
                                      i]])
                                else:
                                    res_num = RechNumVoie([['',
                                      '',
                                      '',
                                      i1[2],
                                      '',
                                      i]], _filtre)
                            else:
                                res_num = RechNumVoie([['',
                                  '',
                                  '',
                                  i1[2],
                                  '',
                                  i]])
                            if len(res_num) == 1:
                                if res_num[0][1] != '':
                                    res_adr[1] = fct_majcp(res_num[0][1])
                                elif len(i1) >= 4 and i1[3] != '':
                                    res_adr[1] = fct_majcp(i1[3])
                        else:
                            res_num = RechNumVoie([['',
                              '',
                              '',
                              '',
                              '',
                              i]])
                        if _avec_voie and flag_voie:
                            if len(res_cp) > 3:
                                resu.append(['VOIE_POSTE',
                                 res_cp[0],
                                 res_cp[1],
                                 res_cp[2],
                                 i,
                                 res_adr[0],
                                 res_adr[1] + _zipplus,
                                 res_num[0][6],
                                 res_num[0][7],
                                 res_cp[3]])
                            else:
                                resu.append(['VOIE_POSTE',
                                 res_cp[0],
                                 res_cp[1],
                                 res_cp[2],
                                 i,
                                 res_adr[0],
                                 res_adr[1] + _zipplus,
                                 res_num[0][6],
                                 res_num[0][7],
                                 ''])
                    elif flag_cedexa:
                        res_adr = adresse[i[1:]][:]
                        for i1 in [0,
                         1,
                         2,
                         3,
                         4,
                         5,
                         6,
                         7,
                         8,
                         12]:
                            if res_adr[i1] != '':
                                res_adr[i1] = decode(res_adr[i1][:])

                        resu.append(['CEDEXA'] + res_adr)

                return resu
    fait = False
    if ' ' in valeur or '-' in valeur:
        valeur1 = valeur.replace(' ', '').replace('-', '')
        fait = cp_234.has_key(valeur1)
        if fait:
            valeur = valeur1
    va1 = []
    if not fait and Etendue == 'Y' and not cp_234.has_key(valeur):
        va1 = recherche_cpEtendue(valeur)
    elif fait or cp_234.has_key(valeur):
        va1 = cp_234[valeur]
    if va1 != []:
        va = []
        for i in va1:
            if i[0] != '':
                i1 = i[:]
                if len(i) == 3:
                    i1.append('')
                    i1.append(valeur)
                    va.append(i1[:])
                else:
                    if len(i1) == 4:
                        if fl_ajoutecp:
                            i1.append(valeur)
                        else:
                            i1.append('')
                    if i1[3] != decode(i1[0]):
                        if [i1[0],
                         i1[1],
                         i1[2],
                         i1[3],
                         i1[4]] not in va:
                            if i1 not in va:
                                va.append(i1[:])
                    elif [i1[0],
                     i1[1],
                     i1[2],
                     '',
                     ''] not in va:
                        if i1 not in va:
                            va.append(i1[:])

        while True:
            if va[0][0] == '*T*':
                va1 = cp_234[va[0][1]][:]
                va = []
                for i in va1:
                    if i not in va:
                        va.append(i[:])

            else:
                for i in va:
                    i[0] = decode(i[0])

                break

        if flag_cedexa:
            try:
                if _cedexa.has_key(valeur):
                    for i in _cedexa[valeur]:
                        if i != '':
                            if len(i) > 9:
                                va.append(['CEDEX_FRA',
                                 [decode(i[9]), decode(i[7]), valeur],
                                 [decode(i[8]), '*'],
                                 decode(i[5]),
                                 decode(i[4]),
                                 '',
                                 decode(i[0]),
                                 '',
                                 '',
                                 'CEDEX',
                                 [decode(i[1]),
                                  decode(i[2]),
                                  decode(i[3]),
                                  decode(i[6])]])
                            else:
                                va.append(['CEDEX_FRA',
                                 ['', decode(i[7]), valeur],
                                 [decode(i[8]), '*'],
                                 decode(i[5]),
                                 decode(i[4]),
                                 '',
                                 decode(i[0]),
                                 '',
                                 '',
                                 'CEDEX',
                                 [decode(i[1]),
                                  decode(i[2]),
                                  decode(i[3]),
                                  decode(i[6])]])

            except Exception as ex:
                str(ex)

    if _pays not in ('FRA', 'MAR') and va != []:
        tab = {}
        aj = []
        lq = {}
        for i in va:
            if len(i) < 6:
                j = i[1].find('_')
                if j >= 0:
                    c0 = i[1][0:j]
                    if len(i) > 4:
                        cl = i[0] + c0 + '_' + i[4].strip()
                    else:
                        cl = i[0] + c0
                    if tab.has_key(cl):
                        j1 = tab[cl]
                        aj[j1][1] = aj[j1][1] + '-' + i[1]
                    else:
                        aj.append(i)
                        tab[cl] = len(aj) - 1
                    if i[1] not in aj[0][1]:
                        aj[0][1] = aj[0][1] + '-' + i[1]
                else:
                    aj.append(i)
            else:
                aj.append(i)

        va = aj
    if va != [] and _ville != '':
        va1 = []
        for i in va:
            if len(i) < 5:
                if i[0][0:len(_ville)] == _ville:
                    va1.append(i)
            elif i[1][0][0:len(_ville)] == _ville:
                va1.append(i)

        if va1 != []:
            va = va1[:]
    if _flag_bodacc:
        for i in range(0, len(va)):
            if type(va[i][0]).__name__ == 'str':
                va[i][0] = NormaliseBodacc(va[i][0])

    return va


def RechNumVoie(listes, filtre = '', cpdefaut = ''):
    _valtab = ['0',
     '1',
     '2',
     '3',
     '4',
     '5',
     '6',
     '7',
     '8',
     '9']

    def decompacte(valeurs):
        re = []
        re_f = []
        fl_ext = True
        if valeurs[0] != []:
            for i in valeurs[0]:
                if '-' in i:
                    a = i.split('-')
                    a1 = int(a[0])
                    a2 = int(a[1])
                    if filtre != '':
                        if str(a1) + '[' + str(a2) == filtre or str(a1) + ']' + str(a2) == filtre:
                            for i1 in range(a1, a2 + 1):
                                ii1 = '        ' + str(i1)
                                re_f.append([ii1[-5:], str(i1)])
                                re.append([ii1[-5:], str(i1)])

                    else:
                        for i1 in range(a1, a2 + 1):
                            ii1 = '        ' + str(i1)
                            re.append([ii1[-5:], str(i1)])

                elif '[' in i:
                    a = i.split('[')
                    a1 = int(a[0])
                    a2 = int(a[1])
                    if filtre != '':
                        if str(a1) + '[' + str(a2) == filtre:
                            for i1 in range(a1, a2 + 1, 2):
                                ii1 = '        ' + str(i1)
                                re_f.append([ii1[-5:], str(i1)])
                                re.append([ii1[-5:], str(i1)])

                    else:
                        for i1 in range(a1, a2 + 1, 2):
                            ii1 = '        ' + str(i1)
                            re.append([ii1[-5:], str(i1)])

                elif ']' in i:
                    a = i.split(']')
                    a1 = int(a[0])
                    a2 = int(a[1])
                    if filtre != '':
                        if str(a1) + '[' + str(a2) == filtre:
                            for i1 in range(a1, a2 + 1, 2):
                                ii1 = '        ' + str(i1)
                                re_f.append([ii1[-5:], str(i1)])
                                re.append([ii1[-5:], str(i1)])

                    else:
                        for i1 in range(a1, a2 + 1, 2):
                            ii1 = '        ' + str(i1)
                            re.append([ii1[-5:], str(i1)])

        if valeurs[1] != []:
            for i in valeurs[1]:
                if '-' in i:
                    for k in range(int(i.split('-')[0]), int(i.split('-')[1]) + 1):
                        re.append(['%5d' % k, str(k)])

                else:
                    k = 0
                    for j in i:
                        if j not in '0123456789':
                            break
                        k += 1

                    re.append(['%5s' % i[0:k], i])

        if re_f != []:
            re = re_f
        if fl_ext:
            re.sort()
            re1 = []
            for i in re:
                re1.append(i[1])

            re = re1[:]
        if len(re) == 0:
            return [0, '']
        elif len(re) == 1:
            return [1, re[0]]
        else:
            return [len(re), ';'.join(re[0:])]

    def nombre(valeur):
        nb = True
        for i in valeur:
            if i not in _valtab:
                nb = False
                break

        return nb

    if listes == []:
        return []
    elif not _flag_mapnumero:
        return listes
    numero = listes[0][3]
    while numero != '' and numero[0] == '0':
        numero = numero[1:]

    if numero != listes[0][3]:
        listes[0][3] = numero[:]
    num1 = numero[:]
    try:
        if num1.find(' ') > 0:
            tb = num1.split()
            if tb[1][0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
                num1 = tb[0] + tb[1][0]
            elif tb[1].isdigit():
                num1 = tb[0] + '\xe2\x80\x93' + tb[1]
    except:
        num1 = listes[0][3]

    trouve1 = []
    trouve2 = []
    trouve3 = []
    for liste in listes:
        if len(liste) > 5:
            if numero == '':
                if not _mapnumvoie.has_key(str(liste[5])):
                    ll = liste[:]
                    ll.extend([0, ''])
                    trouve1.append(ll[:])
                else:
                    av = decompacte(_mapnumvoie[str(liste[5])])
                    ll = liste[:]
                    ll.extend([av[0], av[1]])
                    trouve1.append(ll[:])
            elif not _mapnumvoie.has_key(str(liste[5])):
                ll = liste[:]
                ll.extend([0, ''])
                trouve1.append(ll[:])
            else:
                av = decompacte(_mapnumvoie[str(liste[5])])
                ll = liste[:]
                if (';' + av[1] + ';').find(';' + num1 + ';') >= 0:
                    ll.extend([1, numero])
                    if _flag_mapnumerocp:
                        if _mapnumvoiecp.has_key(str(liste[5]) + '_' + numero):
                            cpn = _mapnumvoiecp[str(liste[5]) + '_' + numero]
                            if isinstance(ll[0], list):
                                if type(cpn) is list:
                                    ll[0][1] = cpn[0].replace('-', '').replace(' ', '')
                                    if cpn[1] != ll[0][0]:
                                        a = recup_tout_cp(ll[0][1], cpn[1])
                                        ll[0][0] = cpn[1]
                                        ll[1] = a
                                else:
                                    ll[0][1] = cpn.replace('-', '').replace(' ', '')
                            elif type(cpn) is list:
                                ll[1] = cpn[0].replace('-', '').replace(' ', '')
                                ll[2] = cpn[1]
                            else:
                                ll[1] = cpn.replace('-', '').replace(' ', '')
                    trouve2.append(ll[:])
                else:
                    if cpdefaut != '' and liste[0][1] == cpdefaut:
                        ll = liste[:]
                        ll.extend([av[0], av[1]])
                        trouve2.append(ll[:])
                    ll.extend([av[0], av[1]])
                    trouve1.append(ll[:])

    if trouve2 != []:
        return trouve2
    else:
        return trouve1


def MotDirecteur(valeur):
    if len(valeur) > 1 and valeur[-1].upper() in ('ER', 'EME', 'IEME', 'E', 'EM'):
        if valeur[-2].isdigit():
            return valeur[-2] + valeur[-1]
        elif isRomain(valeur[-2]):
            return str(romanToArabic(valeur[-2]))
        else:
            return valeur[-1]
    elif len(valeur) >= 1:
        if isRomain(valeur[-1]):
            return str(romanToArabic(valeur[-1]))
        else:
            return valeur[-1]
    else:
        return ''


def comp2(v1, v2):
    if v1 != '' and v2 != []:
        if len(v1) <= len(v2[-1]):
            return v1.upper() == v2[-1][0:len(v1)].upper()
        return False
        return v2[-1][0:len(v1)]
    else:
        return False


def maj_bornes(hexavia, numero, cp):
    num = ''
    for i in numero:
        if i.isdigit():
            num += i
        else:
            break

    if cp.isdigit() and len(cp) == 5:
        if hexavia in _mapbornes:
            tr = _mapbornes[hexavia]
            if num == '' or int(num) <= 0:
                for i in tr:
                    if i[4] == cp:
                        return [i[4], i[5]]

                return []
            num = int(num)
            pair = num % 2 == 0
            defaut = []
            for i in tr:
                if cp == i[4]:
                    defaut = i
                if pair:
                    mini1 = i[2]
                    maxi1 = i[3]
                else:
                    mini1 = i[0]
                    maxi1 = i[1]
                if mini1 != 0 and maxi1 != 0 and num >= mini1 and num <= maxi1:
                    defaut = i
                    break

            if defaut != []:
                return [defaut[4], defaut[5]]
    return []


def recherche_adrFRA(numville, valeur, resumax, cree, cedex = '', voiecomplete = '', numvoie = '', cpencours = '', descrimination = False):
    global _identifier
    global _articles_debutmot
    _abbrev = ''
    if valeur == '':
        if '-' not in numville:
            if 'i' + numville in cp_234_count:
                res = cp_234_count['i' + numville]
                tfinal = []
                if res[0] != '*':
                    for i in res:
                        try:
                            ad = adresse[i[0]]
                            tfinal.append([decode(ad[0]),
                             i[0],
                             ad[1],
                             ad[2]])
                        except:
                            pass

                    return tfinal
                else:
                    return []
            else:
                return []
        else:
            return []
    try:
        va0 = valeur.decode('utf-8').encode('iso-8859-1').upper()
        try:
            t2 = va0.translate(_trans, '')
            va0 = t2
        except:
            va0 = va0

    except:
        try:
            va0 = convertUTFISO.convertUTF8(valeur).upper()
        except:
            va0 = valeur.upper()

    va1 = va0.split()
    mem_base = MotDirecteur(va1)
    mem_base2 = mem_base[:]
    if mem_base != '' and mem_base[0] in 'AEIOU' and type(voiecomplete) is list and mem_base != '' and mem_base in voiecomplete:
        i1 = voiecomplete.index(mem_base)
        if i1 - 1 > 1 and 'L' == voiecomplete[i1 - 1]:
            mem_base2 = 'L' + mem_base
    if not descrimination:
        if len(va0.strip()) >= 2:
            _va1 = ''
            for i in range(0, len(va1)):
                if i == 0:
                    if va1[i] in _abrev_table[0]:
                        _va1 = _abrev_table[0][va1[i]][0]
                    elif va1[i] in _abrev_table[1]:
                        _va1 = _abrev_table[1][va1[i]][0]
                    else:
                        _va1 = va1[i]
                elif va1[i] in _abrev_table[1]:
                    _va1 += ' ' + _abrev_table[1][va1[i]][0]
                else:
                    _va1 += ' ' + va1[i]

            _va1 = _va1.split()
            _md0 = _va1[-1]
        else:
            _va1 = va1
    else:
        _va1 = va1
    if va1 != _va1:
        _md = MotDirecteur(_va1)
        _md1 = MotDirecteur(va1)
        va2 = [_md]
        va = Combine(va2, cree)
        if _md1 != _md:
            if len(_md1) == 1:
                va += [[_md1]]
            else:
                va += Combine([_md1], cree)
    else:
        _md = MotDirecteur(va1)
        va2 = [_md]
        va = Combine(va2, cree)
        if va == []:
            va = [va2]
    po = 0
    if len(va) == 1 and len(va0) == 1:
        a = va0
        va = []
        for i in 'ABCDEFGHIJKLMONPQRSTUVWXYZ':
            va.append([a + i])

    _flag_nombre = False
    if valeur.isdigit():
        _flag_nombre = True
        if [valeur] not in va:
            va.insert(0, [valeur])
    elif isRomain(valeur):
        _flag_nombre = True
    possibilite = []
    verif = []
    clep = []
    for i in va:
        for j in i:
            if j.isdigit() and int(j) <= 99:
                x = ArabicToroman(int(j))
                if [x] not in va:
                    clep.append([x])

    if clep != []:
        if len(va1) > 1:
            va.append([va1[-2]])
        else:
            va.append(clep[0])
    for i in va:
        cle = str(numville) + '_'
        for j in i:
            cle = cle + j

        if isinstance(cle, unicode):
            cle = cle.encode('utf-8')
        if mapadresse.has_key(cle):
            ma = mapadresse[cle]
            if _cns == 0 or ma[0] < _cns:
                if ma[1:] not in verif:
                    _ma = []
                    for _i in ma[1:]:
                        fl_tr = False
                        for _j in possibilite:
                            if _i in _j[1]:
                                fl_tr = True
                                break

                        if not fl_tr:
                            _ma.append(_i)

                    if _ma != []:
                        if verif != []:
                            if _ma not in verif[0]:
                                verif[0].extend(_ma)
                        else:
                            verif.append(_ma)
                        po += 1
                        if po >= resumax:
                            break

    if verif != []:
        possibilite.append([len(verif[0]), verif[0]])
        verif = []
    _art = False
    if len(va1) >= 2 and va1[-2] in _articles_debutmot:
        va3 = va2[:]
        va3[-1] = va1[-2] + va3[-1]
        va = Combine(va3, cree)
        _art = True
    elif len(voiecomplete) > 2 and type(voiecomplete) is list and voiecomplete[-2] in _articles_debutmot:
        va = Combine([''.join(voiecomplete[-2:])], cree)
        _art = True
    if _art:
        for i in va:
            cle = str(numville) + '_'
            for j in i:
                cle = cle + j

            if isinstance(cle, unicode):
                cle = cle.encode('utf-8')
            if mapadresse.has_key(cle):
                ma = mapadresse[cle]
                if _cns == 0 or ma[0] < _cns:
                    if ma[1:] not in verif:
                        _ma = []
                        for _i in ma[1:]:
                            fl_tr = False
                            for _j in possibilite:
                                if _i in _j[1]:
                                    fl_tr = True
                                    break

                            if not fl_tr:
                                _ma.append(_i)

                        if _ma != []:
                            possibilite.append([len(_ma), _ma])
                            verif.append(_ma)
                            po += 1
                            if po >= resumax:
                                break

    if possibilite == []:
        cle = str(numville) + '_' + _md[0:2]
        if isinstance(cle, unicode):
            cle = cle.encode('utf-8')
        if mapadresse.has_key(cle):
            ma = mapadresse[cle]
            if _cns == 0 or ma[0] < _cns:
                if ma[1:] not in verif:
                    _ma = []
                    for _i in ma[1:]:
                        if type(_i) is str:
                            fl_tr = False
                            for _j in possibilite:
                                if _i in _j[1]:
                                    fl_tr = True
                                    break

                            if not fl_tr:
                                _mc = decode(adresse[str(_i)][0]).split()[-1]
                                _mx = min(len(_mc), len(_md))
                                _dt = distance(_mc, _md)
                                if _dt == 0:
                                    _resu = 1.0
                                else:
                                    _resu = 1.0 - _dt * 1.0 / _mx
                                if _resu > 0.85:
                                    _ma.append(str(_i))

                    if _ma != []:
                        if verif != []:
                            if _ma not in verif[0]:
                                verif[0].extend(_ma)
                        else:
                            verif.append(_ma)
    if verif != []:
        possibilite.append([len(verif[0]), verif[0]])
    if possibilite == []:
        l_motdirecteur_nv = va2[-1].translate(maps_voyelles, '').replace(' ', '')
        if len(l_motdirecteur_nv) >= 2:
            va = Combine([l_motdirecteur_nv], cree)
            possibilite = []
            verif = []
            for i in va:
                cle = str(numville) + '_'
                for j in i:
                    cle = cle + j

                if isinstance(cle, unicode):
                    cle = cle.encode('utf-8')
                if mapadresse.has_key(cle):
                    ma = mapadresse[cle]
                    if _cns == 0 or ma[0] < _cns:
                        if ma[1:] not in verif:
                            _ma = []
                            for _i in ma[1:]:
                                fl_tr = False
                                for _j in possibilite:
                                    if _i in _j[1]:
                                        fl_tr = True
                                        break

                                if not fl_tr:
                                    _ma.append(str(_i))

                            if _ma != []:
                                possibilite.append([len(_ma), _ma])
                                verif.append(_ma)
                                po += 1
                                if po >= resumax:
                                    break

    if possibilite == [] and len(va1) == 1 and not descrimination:
        if '-' not in numville:
            if 'i' + numville in cp_234_count:
                res = cp_234_count['i' + numville]
                tfinal = []
                if res[0] != '*':
                    for i in res:
                        try:
                            ad = adresse[i[0]]
                            if decode(ad[0])[0:len(va1[0])] == va1[0]:
                                tfinal.append([decode(ad[0]),
                                 i[0],
                                 ad[1],
                                 ad[2]])
                        except:
                            pass

                    return tfinal
                else:
                    return []
            else:
                return []
        else:
            return []
    resu = []
    resu00 = []
    resu0 = []
    resu1 = []
    mem_resu = []
    mem_resu1 = []
    if possibilite != []:
        possibilite.sort()
        if len(possibilite) == 1 and possibilite[0][0] == 1:
            try:
                _re = adresse[str(possibilite[0][1][0])][:]
                _red = decode(_re[0][:])
                _ra = maj_bornes(possibilite[0][1][0], numvoie, cpencours)
                if _ra != []:
                    _re[1] = _ra[0]
                    _re[2] = _ra[1]
                if len(_re) == 3:
                    _id0 = _re[-1]
                else:
                    _id0 = ''
                _ok = True
                _reds = _red.split()
                _red1 = MotDirecteur(_reds)
                if _md.isdigit():
                    if _md not in _red and _md not in _red1 and not comp2(_md, _reds):
                        _ok = False
                if _ok:
                    if _flag_nombre and voiecomplete != [] and voiecomplete != '':
                        if len(voiecomplete) > 2 and len(_reds) >= 2:
                            if calcul_PEI(voiecomplete[-2], _reds[-2]) < 75.0:
                                _ok = False
                    if descrimination and calcul_MDFRA(_red.split(), _md) < 75.0:
                        _l1 = min(len(_md), len(_red1))
                        if _l1 > 3 and _md[0:_l1] == _red1[0:_l1]:
                            if NormaliseTaille(' '.join(voiecomplete[0:-1]) + ' xxxxxxxxxx') != NormaliseTaille(' '.join(_reds[0:-1]) + ' xxxxxxxxxx'):
                                _ok = False
                        else:
                            _ok = False
                    if _ok:
                        if cedex != '':
                            resu.append([_red,
                             possibilite[0][1][0],
                             cedex,
                             _re[1][:],
                             _id0])
                        else:
                            resu.append([_red,
                             possibilite[0][1][0],
                             _re[1][:],
                             _id0])
                        mem_resu.append(str(possibilite[0][1][0]))
            except:
                resu = []
                mem_resu = []

        else:
            cpt = 0
            dejafait = {}
            for fiche in possibilite:
                for adr in fiche[1]:
                    if adr not in dejafait:
                        dejafait[adr] = True
                        _re = adresse[str(adr)][:]
                        _ra = maj_bornes(adr, numvoie, cpencours)
                        if _ra != []:
                            _re[1] = _ra[0]
                            _re[2] = _ra[1]
                        _vre = decode(_re[0][:])
                        if len(_re) == 3:
                            _id0 = _re[-1]
                        else:
                            _id0 = ''
                        ls = MajChiffres(_vre).split()
                        _mdr = MotDirecteur(ls)
                        fl_ok = True
                        if descrimination and calcul_MDFRA(_vre.split(), _md) < 75.0:
                            fl_ok = False
                        if fl_ok:
                            if clep != [] and _mdr.isdigit() and (_vre.split()[-1][0:len(clep[0][0])] == clep[0][0] or _md.isdigit() and _md == _mdr[0:len(_md)]):
                                if len(va1) > 1 and va1[-2] in _vre:
                                    if cedex != '':
                                        resu00.append([_vre[:],
                                         adr,
                                         cedex,
                                         _re[1][:],
                                         _id0])
                                    else:
                                        resu00.append([_vre[:],
                                         adr,
                                         _re[1][:],
                                         _id0])
                                elif cedex != '':
                                    if [_vre[:],
                                     adr,
                                     cedex,
                                     _re[1][:],
                                     _id0] not in resu0:
                                        resu0.append([_vre[:],
                                         adr,
                                         cedex,
                                         _re[1][:],
                                         _id0])
                                elif [_vre[:],
                                 adr,
                                 _re[1][:],
                                 _id0] not in resu0:
                                    resu0.append([_vre[:],
                                     adr,
                                     _re[1][:],
                                     _id0])
                            elif _vre.split()[-1][0:len(va1[-1])] == va1[-1] or _mdr == va1[-1] or mem_base2 == _mdr:
                                if cedex != '':
                                    if [_vre[:],
                                     adr,
                                     cedex,
                                     _re[1][:],
                                     _id0] not in resu1:
                                        resu1.append([_vre[:],
                                         adr,
                                         cedex,
                                         _re[1][:],
                                         _id0])
                                elif [_vre[:],
                                 adr,
                                 _re[1][:],
                                 _id0] not in resu1:
                                    resu1.append([_vre[:],
                                     adr,
                                     _re[1][:],
                                     _id0])
                                mem_resu1.append(str(adr))
                                _jv = ' '.join(va1)
                                if _jv == _vre or _jv == _mdr or mem_base != mem_base2 and _mdr == mem_base2 or len(voiecomplete) > 0 and voiecomplete[0] == _vre[0:len(voiecomplete[0])] and _jv == _mdr[0:len(_jv)]:
                                    if cedex != '':
                                        if [_vre[:],
                                         adr,
                                         cedex,
                                         _re[1][:],
                                         _id0] not in resu0:
                                            resu0.append([_vre[:],
                                             adr,
                                             cedex,
                                             _re[1][:],
                                             _id0])
                                    elif [_vre[:],
                                     adr,
                                     _re[1][:],
                                     _id0] not in resu0:
                                        resu0.append([_vre[:],
                                         adr,
                                         _re[1][:],
                                         _id0])
                            elif _mdr in ('PROLONGEE', 'PROLONGE', 'INFERIEURE', 'INFERIEUR', 'SUPERIEURE', 'SUPERIEUR'):
                                _mdr = MajChiffres(_vre).split()[-2]
                                if _vre[-len(va1[-1]):] == va1[-1] or _mdr == va1[-1] or mem_base2 == _mdr:
                                    if cedex != '':
                                        if [_vre[:],
                                         adr,
                                         cedex,
                                         _re[1][:],
                                         _id0] not in resu1:
                                            resu1.append([_vre[:],
                                             adr,
                                             cedex,
                                             _re[1][:],
                                             _id0])
                                    elif [_vre[:],
                                     adr,
                                     _re[1][:],
                                     _id0] not in resu1:
                                        resu1.append([_vre[:],
                                         adr,
                                         _re[1][:],
                                         _id0])
                                    mem_resu1.append(str(adr))
                                    if ' '.join(va1) == _vre:
                                        if cedex != '':
                                            if [_vre[:],
                                             adr,
                                             cedex,
                                             _re[1][:],
                                             _id0] not in resu0:
                                                resu0.append([_vre[:],
                                                 adr,
                                                 cedex,
                                                 _re[1][:],
                                                 _id0])
                                        elif [_vre[:],
                                         adr,
                                         _re[1][:],
                                         _id0] not in resu0:
                                            resu0.append([_vre[:],
                                             adr,
                                             _re[1][:],
                                             _id0])
                            if True:
                                if cedex != '':
                                    if [_vre[:],
                                     adr,
                                     cedex,
                                     _re[1][:],
                                     _id0] not in resu:
                                        resu.append([_vre[:],
                                         adr,
                                         cedex,
                                         _re[1][:],
                                         _id0])
                                elif [_vre[:],
                                 adr,
                                 _re[1][:],
                                 _id0] not in resu:
                                    resu.append([_vre[:],
                                     adr,
                                     _re[1][:],
                                     _id0])
                                mem_resu.append(str(adr))
                            cpt = cpt + 1

                if cpt >= resumax:
                    break

            if resu00 != [] or resu0 != []:
                resu1 = resu00 + resu0
                resu = []
    tfinal = []
    if resu1 != []:
        lastword = va2[0].upper()
        tb1 = []
        tb2 = []
        w = {}
        for i in resu1:
            if i[1] != '' and i[1][0] == 'W':
                if i[1] in changenomvoie:
                    _cv = changenomvoie[i[1]]
                    if type(_cv) is list:
                        for _cv0 in _cv:
                            _adr = adresse[_cv0]
                            _nom = decode(_adr[0])
                            if [_nom,
                             _cv0,
                             _adr[1],
                             _adr[1],
                             _adr[2]] not in resu and [_nom,
                             _cv0,
                             _adr[1],
                             _adr[1],
                             _adr[2],
                             ['W', i[0]]] not in resu:
                                resu.append([_nom,
                                 _cv0,
                                 _adr[1],
                                 _adr[1],
                                 _adr[2],
                                 ['W', i[0]]])

                    else:
                        _adr = adresse[_cv]
                        _nom = decode(_adr[0])
                        if [_nom,
                         _cv,
                         _adr[1],
                         _adr[1],
                         _adr[2]] not in resu and [_nom,
                         _cv,
                         _adr[1],
                         _adr[1],
                         _adr[2],
                         ['W', i[0]]] not in resu:
                            resu.append([_nom,
                             _cv,
                             _adr[1],
                             _adr[1],
                             _adr[2],
                             ['W', i[0]]])
            elif (' ' + i[0]).find(lastword) >= 0:
                if i not in tb1:
                    tb1.append(i)
            elif i not in tb2:
                tb2.append(i)

        for i in resu:
            if i[1] != '' and i[1][0] == 'W':
                if i[1] in changenomvoie:
                    _cv = changenomvoie[i[1]]
                    if type(_cv) is list:
                        for _cv0 in _cv:
                            _adr = adresse[_cv0]
                            _nom = decode(_adr[0])
                            if [_nom,
                             _cv0,
                             _adr[1],
                             _adr[1],
                             _adr[2]] not in resu and [_nom,
                             _cv0,
                             _adr[1],
                             _adr[1],
                             _adr[2],
                             ['W', i[0]]] not in resu:
                                resu.append([_nom,
                                 _cv0,
                                 _adr[1],
                                 _adr[1],
                                 _adr[2],
                                 ['W', i[0]]])

                    else:
                        _adr = adresse[_cv]
                        _nom = decode(_adr[0])
                        if [_nom,
                         _cv,
                         _adr[1],
                         _adr[1],
                         _adr[2]] not in resu and [_nom,
                         _cv,
                         _adr[1],
                         _adr[1],
                         _adr[2],
                         ['W', i[0]]] not in resu:
                            resu.append([_nom,
                             _cv,
                             _adr[1],
                             _adr[1],
                             _adr[2],
                             ['W', i[0]]])
            elif (' ' + i[0]).find(lastword) >= 0:
                if i not in tb1:
                    tb1.append(i)
            elif i not in tb2:
                tb2.append(i)

        if _flag_bodacc:
            for i in range(0, len(tb1)):
                tb1[i][0] = NormaliseBodacc(tb1[i][0], True)

            for i in range(0, len(tb2)):
                tb2[i][0] = NormaliseBodacc(tb2[i][0], True)

        tfinal = tb1 + tb2
    elif resu != []:
        lastword = va2[0].upper()
        tb1 = []
        tb2 = []
        for i in resu:
            if i[1] != '' and i[1][0] == 'W':
                if i[1] in changenomvoie:
                    _cv = changenomvoie[i[1]]
                    if type(_cv) is list:
                        for _cv0 in _cv:
                            _adr = adresse[_cv0]
                            _nom = decode(_adr[0])
                            if [_nom,
                             _cv0,
                             _adr[1],
                             _adr[1],
                             _adr[2]] not in resu and [_nom,
                             _cv0,
                             _adr[1],
                             _adr[1],
                             _adr[2],
                             ['W', i[0]]] not in resu:
                                resu.append([_nom,
                                 _cv0,
                                 _adr[1],
                                 _adr[1],
                                 _adr[2],
                                 ['W', i[0]]])

                    else:
                        _adr = adresse[_cv]
                        _nom = decode(_adr[0])
                        if [_nom,
                         _cv,
                         _adr[1],
                         _adr[1],
                         _adr[2]] not in resu and [_nom,
                         _cv,
                         _adr[1],
                         _adr[1],
                         _adr[2],
                         ['W', i[0]]] not in resu:
                            resu.append([_nom,
                             _cv,
                             _adr[1],
                             _adr[1],
                             _adr[2],
                             ['W', i[0]]])
            elif (' ' + i[0]).find(lastword) >= 0:
                if i not in tb1:
                    tb1.append(i)
            elif i not in tb2:
                tb2.append(i)

        if _flag_bodacc:
            for i in range(0, len(tb1)):
                tb1[i][0] = NormaliseBodacc(tb1[i][0], True)

            for i in range(0, len(tb2)):
                tb2[i][0] = NormaliseBodacc(tb2[i][0], True)

        tfinal = tb1 + tb2
    if cedex != '' and not descrimination:
        if _cedexa.has_key(cedex):
            for i in _cedexa[cedex]:
                if i != '':
                    verif = (' ' + decode(i[5]) + ' ' + decode(i[1]) + ' ' + decode(i[2]) + ' ' + decode(i[3]) + ' ' + decode(i[6])).upper()
                    fl = False
                    for j in va1:
                        if ' ' + j in verif:
                            fl = True
                            break

                    if fl:
                        if len(i) > 9:
                            tfinal.append(['CEDEX_ADR',
                             [decode(i[9]),
                              decode(i[7]),
                              decode(i[8]),
                              '*'],
                             decode(i[5]),
                             decode(i[4]),
                             decode(i[0]),
                             [decode(i[1]),
                              decode(i[2]),
                              decode(i[3]),
                              decode(i[6])]])
                        else:
                            tfinal.append(['CEDEX_ADR',
                             ['',
                              decode(i[7]),
                              decode(i[8]),
                              '*'],
                             decode(i[5]),
                             decode(i[4]),
                             decode(i[0]),
                             [decode(i[1]),
                              decode(i[2]),
                              decode(i[3]),
                              decode(i[6])]])

    if _flag_mapcherchetypevoie and not descrimination:
        va2 = valeur.upper().split()
        if va2 != []:
            if va2[0][0] in '0123456789':
                va2.pop(0)
                if len(va2) > 1:
                    if len(va2[0]) == 1:
                        va2.pop(0)
            if va2 != [] and _identifier.has_key(va2[0]):
                va2.pop(0)
            if va2 != [] and _voie_transfo.has_key(va2[0]):
                va2[0] = _voie_transfo[va2[0]]
        valeur2 = ' '.join(va2)
        if mapcherchetypevoie.has_key(numville + '_' + valeur2):
            pos_1 = mapcherchetypevoie[numville + '_' + valeur2]
            for j in pos_1:
                if resu1 != []:
                    ff = str(j) not in mem_resu1
                else:
                    ff = str(j) not in mem_resu
                if ff:
                    _re = adresse[str(j)]
                    _vre = decode(_re[0][:])
                    if len(_re) == 3:
                        _id0 = _re[-1]
                    else:
                        _id0 = ''
                    if [_vre,
                     j,
                     _re[1],
                     _id0] not in tfinal:
                        tfinal.append([_vre,
                         j,
                         _re[1],
                         _id0])

    return tfinal


def triadresse(liste, compare):

    def trinum1(valeur):
        if valeur[0] >= '0' and valeur[0] <= '9':
            r1 = ''
            r2 = ''
            for i in valeur:
                if not (i >= '0' and i <= '9'):
                    if r2 != '':
                        r1 += '00000'[0:5 - len(r2)] + r2 + i
                        r2 = ''
                    else:
                        r1 += i
                else:
                    r2 += i

            if r2 != '':
                r1 += '00000'[0:5 - len(r2)] + r2
            else:
                r1 += i
            return r1
        else:
            return valeur

    res1 = []
    res2 = []
    a1 = compare.upper().split()
    l_a1 = len(a1)
    if l_a1 > 1:
        a1.sort()
    r_a1 = ''.join(a1)
    po = 0
    for i in liste:
        a2 = i[0][:].upper().split()
        l_a2 = len(a2)
        if l_a2 > 1:
            a2.sort()
            r_a2 = ''.join(a2[1:])
            r_a3 = trinum1(a2[0]) + r_a2
            r_a2 = a2[0] + r_a2
        else:
            r_a2 = a2
            r_a3 = a2
        r_0 = abs(l_a1 - l_a2)
        if r_a1 == r_a2 or r_a1 in r_a2:
            r_1 = 0
        else:
            r_1 = 1
            r_2 = 0
            for i1 in range(0, l_a1):
                ll1 = len(a1[i1])
                tmin = 999
                posmin = -1
                l_a2 = len(a2)
                for i2 in range(0, l_a2):
                    ll2 = len(a2[i2])
                    m1 = min(ll1, ll2)
                    m2 = max(ll1, ll2)
                    if a1[i1][0:m1] == a2[i2][0:m1]:
                        r = 0
                    else:
                        r = m2
                    if r < tmin:
                        tmin = r
                        posmin = i2

                if posmin != -1:
                    r_2 += tmin
                    a2.pop(posmin)
                else:
                    r_2 += ll1

            r_1 = min(r_1, r_2)
        res1.append([r_0,
         r_1,
         r_a3,
         po])
        po += 1

    res1.sort()
    for i in res1:
        i1 = liste[i[3]]
        i2 = i1[1]
        if 'Pa' in i2:
            i2 = i2.replace('Pa', 'N')
            i3 = decode(adresse[i2][0]) + ' {' + i1[0] + '}'
            i1[0] = i3
            i1[1] = i2
        res2.append(i1)

    return res2


def recherche_adrUPU(numville, valeur, resumax, cree, cp = '', cedex = ''):
    global _abreviation
    mem_va = ''
    mem_numville = numville
    if '$' in numville:
        numville = numville[0:numville.index('$')]
    try:
        va0 = valeur.decode('utf-8').encode('iso-8859-1').upper()
        try:
            t2 = va0.translate(_trans_t, '')
            va0 = t2
        except:
            va0 = va0

    except:
        try:
            va0 = convertUTFISO.convertUTF8(valeur).upper()
            try:
                _va = va0.decode('iso-8859-1').upper().encode('iso-8859-1')
                va0 = _va
            except:
                pass

        except:
            va0 = valeur.upper()

    va1 = va0.split()
    fl_suivant = True
    if _cns == 0 and valeur == '':
        if numville in cp_234_ladr:
            fl_suivant = False
            _va = cp_234_ladr[numville]
            possibilite = [[len(_va), _va]]
            resu = []
    if fl_suivant:
        while len(va1) > 1:
            if len(va1[-1]) < 3 and len(va1[-2]) > 2:
                va1.pop(-1)
            elif _suppdernier != [] and va1[-1] in _suppdernier:
                va1.pop(-1)
            else:
                break

        if _suppdernier != [] and len(va1) > 1 and len(va1[-1]) < len(va1[-2]) and ExisteSuppDernier(va1[-2]):
            mem = va1[-1][:]
            va1[-1] = va1[-2][:]
            va1[-2] = mem[:]
        possibilite = []
        if numville != '':
            if len(va1) == 0:
                return []
            va2 = [va1[-1]]
            mem_va = ''
            for i in [0, 1]:
                if i == 1:
                    if _suppdernier != []:
                        der = va1[-1].upper()
                        for i in _suppdernier:
                            if der[-len(i):] == i:
                                der = der[0:-len(i)]
                                if der == '':
                                    va1.pop(-1)
                                else:
                                    va1[-1] = der[:]
                                va2 = va1[:]
                                break

                if len(va2) == 1 and len(va2[0]) <= 2:
                    va = [va2]
                else:
                    va = Combine(va2, cree)
                verif = []
                if mem_va == va:
                    if len(va1) > 1 and _pays in ('GBR', 'DEU', 'AUT', 'JPN'):
                        _res = False
                        for __v in _voie_decoupe:
                            if va2[0].upper() == __v[0:len(va2[0])]:
                                _res = True
                                va2 = [va1[-2]]
                                if len(va2) == 1 and len(va2[0]) <= 2:
                                    va = [va2]
                                else:
                                    va = Combine(va2, cree)
                                break

                        if not _res:
                            break
                    else:
                        break
                else:
                    mem_va = va
                if '-' in numville:
                    for numville1 in numville.split('-'):
                        for i in va:
                            cle = str(numville1) + '_'
                            for j in i:
                                cle = cle + j

                            if type(cle) == unicode:
                                cle = cle.encode('utf-8')
                            if mapadresse.has_key(cle):
                                ma = mapadresse[cle]
                                if _cns == 0 or ma[0] < _cns:
                                    if ma[1:] not in verif:
                                        possibilite.append([ma[0], ma[1:]])
                                        verif.append(ma[1:])

                else:
                    for i in va:
                        cle = str(numville) + '_'
                        for j in i:
                            cle = cle + j

                        if type(cle) == unicode:
                            cle = cle.encode('utf-8')
                        if mapadresse.has_key(cle):
                            ma = mapadresse[cle]
                            if _cns == 0 or ma[0] < _cns:
                                if ma[1:] not in verif:
                                    possibilite.append([ma[0], ma[1:]])
                                    verif.append(ma[1:])

                if possibilite != []:
                    break

        resu = []
        vaphonem = Phonems(va1[-1])
        if possibilite == []:
            if numville != '':
                cleadresse = '_' + numville + '_' + QSoundex.getKey(convertUTFISO.convertUTF8(va1[-1]))[0]
                if type(cleadresse) == unicode:
                    cleadresse = cleadresse.encode('utf-8')
                if mapadresse.has_key(cleadresse):
                    ma = mapadresse[cleadresse]
                    vdist = len(valeur) - int(len(valeur) * 0.8)
                    c = 0
                    for i in ma[1:]:
                        if i[1] == numville:
                            _re = adresse[str(i[0])][:]
                            if cp == '' or cp == _re[1]:
                                _vo = decode(_re[0])
                                if _vo[0:len(valeur)] == valeur or editdist.distance(_vo.split()[-1], valeur) <= vdist or editdist.distance(_vo, valeur) <= vdist or _abreviation != []:
                                    if _re[1] == '':
                                        _re[1] = cp_234U[mem_numville][0]
                                    resu.append([_vo[:], i[0], _re[1][:]])
                                    c += 1

                    if c != 0:
                        return resu
        if possibilite == []:
            try:
                if numville != '':
                    _nsp = convertUTFISO.supprimerSeparateur(convertUTFISO.convertUTF8(va1[-1]))
                    cleadresse = '_' + numville + '_' + _nsp[0:2] + '_' + _nsp[-2:]
                    if type(cleadresse) == unicode:
                        cleadresse = cleadresse.encode('utf-8')
                    if mapadresse.has_key(cleadresse):
                        ma = mapadresse[cleadresse]
                        vdist = len(valeur) - int(len(valeur) * 0.8)
                        c = 0
                        for i in ma[1:]:
                            if i[1] == numville:
                                _re = adresse[str(i[0])][:]
                                if cp == '' or cp == _re[1]:
                                    _vo = decode(_re[0])
                                    if _vo[0:len(valeur)] == valeur or editdist.distance(_vo.split()[-1], valeur) <= vdist or editdist.distance(_vo, valeur) <= vdist or _abreviation != []:
                                        if _re[1] == '':
                                            _re[1] = cp_234U[mem_numville][0]
                                        resu.append([_vo[:], i[0], _re[1][:]])
                                        c += 1

                        if c != 0:
                            return resu
            except:
                pass

            if cp != '':
                cleadresse = '_' + cp + '_' + QSoundex.getKey(vaphonem)[0]
                if type(cleadresse) == unicode:
                    cleadresse = cleadresse.encode('utf-8')
                if mapadresse.has_key(cleadresse):
                    ma = mapadresse[cleadresse]
                    vdist = len(valeur) - int(len(valeur) * 0.85)
                    c = 0
                    for i in ma[1:]:
                        if numville == '' or i[1] == numville:
                            _re = adresse[str(i[0])][:]
                            if cp == '' or cp == _re[1]:
                                _vo = decode(_re[0])
                                if _vo[0:len(valeur)] == valeur or editdist.distance(_vo.split()[-1], valeur) <= vdist or editdist.distance(_vo, valeur) <= vdist or _abreviation != [] and editdist.distance(fct_abr(_vo.split()[-1]), fct_abr(valeur)) <= vdist:
                                    if _re[1] == '':
                                        _re[1] = cp_234U[mem_numville][0]
                                    resu.append([_vo[:],
                                     i[0],
                                     _re[1][:],
                                     i[1]])
                                    c += 1

                    if c != 0:
                        return resu
            cleadresse = numville[0:_lenDepartement] + '_' + QSoundex.getKey(vaphonem)[0]
            if type(cleadresse) == unicode:
                cleadresse = cleadresse.encode('utf-8')
            if mapadresse.has_key(cleadresse):
                ma = mapadresse[cleadresse]
                vdist = len(valeur) - int(len(valeur) * 0.85)
                c = 0
                for i in ma[1:]:
                    if i[1] == numville:
                        _re = adresse[str(i[0])][:]
                        if cp == '' or cp == _re[1]:
                            _vo = decode(_re[0])
                            if _vo[0:len(valeur)] == valeur or editdist.distance(_vo.split()[-1], valeur) <= vdist or editdist.distance(_vo, valeur) <= vdist or _abreviation != [] and editdist.distance(fct_abr(_vo.split()[-1]), fct_abr(valeur)) <= vdist:
                                if _re[1] == '':
                                    _re[1] = cp_234U[mem_numville][0]
                                resu.append([_vo[:], i[0], _re[1][:]])
                                c += 1

                if c != 0:
                    return resu
    resu1 = []
    if possibilite != []:
        possibilite.sort()
        if possibilite[0][0] == 1:
            _re = adresse[str(possibilite[0][1][0])][:]
            try:
                if _re[1] == '':
                    _re[1] = cp_234U[mem_numville][0]
            except:
                pass

            resu.append([decode(_re[0][:]), possibilite[0][1][0], _re[1][:]])
        else:
            cpt = 0
            for fiche in possibilite:
                for adr in fiche[1]:
                    _re = adresse[str(adr)][:]
                    if cp == '' or cp == _re[1]:
                        t_re = decode(_re[0][:])
                        if _re[1] == '':
                            _re[1] = cp_234U[mem_numville][0]
                        resu.append([t_re[:], adr, _re[1][:]])
                        tab_re = t_re.split()
                        ff = True
                        for i in va1:
                            if i not in _articles:
                                try:
                                    if i not in t_re:
                                        ff = False
                                        break
                                except:
                                    ff = True
                                    break

                        if ff:
                            if _re[1] == '':
                                _re[1] = cp_234U[mem_numville][0]
                            resu1.append([decode(_re[0][:]), adr, _re[1][:]])
                        cpt = cpt + 1
                        if cpt >= resumax:
                            break

                if cpt >= resumax:
                    break

    if resu1 != []:
        if _pays == 'KOR':
            resu1 = triadresse(resu1, valeur)
        return resu1
    if _pays == 'KOR':
        resu = triadresse(resu, valeur)
    return resu


def recherche_adr(numville, valeur, resumax, cree, cedex = '', voiecomplete = '', numvoie = '', cpencours = '', descrimination = False):
    while valeur != '' and valeur[-1] == ',':
        valeur = valeur[0:-1].strip()

    if _pays in ('FRA', 'MAR'):
        return recherche_adrFRA(numville, valeur, resumax, cree, cedex, voiecomplete, numvoie, cpencours, descrimination)
    else:
        return recherche_adrUPU(numville, valeur, resumax, cree)


def reccursive(valeurs, cree, _mini = 2, decodage = True):
    lo = len(valeurs)
    if _mini == 1:
        minir = 1
    elif lo <= _mini or not cree:
        minir = _mini
    elif lo <= 4:
        minir = 3
    else:
        minir = 4
    cle = []
    pos2 = len(valeurs) - 1
    Pile = []
    for i in range(-(len(valeurs) - 1), 1):
        lo = len(valeurs[-i])
        Pile.append([min(minir, lo + 1), -i, lo])

    Pile.reverse()
    if pos2 <= 0:
        if len(valeurs[0]) <= minir:
            try:
                if decodage:
                    a1 = valeurs[0].decode('utf-8')
                cle.append([valeurs[0]])
            except:
                try:
                    if decodage:
                        a1 = valeurs[0].encode('utf-8')
                    else:
                        a1 = valeurs[0]
                    cle.append([a1])
                except:
                    cle.append([valeurs[0]])

        else:
            if minir == 1:
                cl = ''
            else:
                cl = valeurs[0][0]
            for i in valeurs[0][minir - 1:]:
                cl = cl + i
                try:
                    if decodage:
                        a1 = cl.decode('utf-8')
                        if type(a1) == unicode:
                            cl = cl.encode('utf-8')
                    cle.append([cl])
                except:
                    try:
                        if decodage:
                            a1 = cl.encode('utf-8')
                        else:
                            a1 = cl
                        cle.append([a1])
                    except:
                        cle.append([cl])

    else:
        pos = 0
        while True:
            cl = []
            for i in Pile:
                try:
                    a1 = valeurs[i[1]][0:i[0]]
                    if decodage:
                        a2 = a1.decode('utf-8')
                    else:
                        a2 = a1
                    if type(a1) == unicode:
                        a1 = a1.encode('utf-8')
                    cl.append(a1)
                except:
                    try:
                        if decodage:
                            a2 = a1.encode('utf-8')
                        else:
                            a2 = a1
                        cl.append(a2)
                    except:
                        cl.append(a1)

            cle.append(cl)
            if Pile[pos][0] < Pile[pos][2]:
                Pile[pos][0] = Pile[pos][0] + 1
            else:
                fl_arret = False
                while True:
                    pos = pos + 1
                    Pile[pos][0] = Pile[pos][0] + 1
                    if Pile[pos][0] > Pile[pos][2]:
                        if pos == len(Pile) - 1:
                            fl_arret = True
                            break
                    else:
                        break

                for i in range(0, pos):
                    Pile[i][0] = min(minir, Pile[i][2] + 1)

                if fl_arret:
                    break
                else:
                    pos = 0

    return cle


def CombineGBR(valeurAvant, cree, flag_ville = False):
    valeurs = valeurAvant
    valeurs1 = []
    for i in valeurs:
        if (i[0] in '0123456789' or len(i) >= 2) and i not in _articles:
            valeurs1.append(i)

    valeurs = valeurs1
    cx = []
    matmot = valeurs
    vl = []
    cle = []
    for i in matmot:
        if i != []:
            if cree:
                if len(i) > 2:
                    for j in range(2, len(i) + 1):
                        cle.append(i[0:j])

            else:
                cle.append(i)

    for j in cle:
        if flag_ville:
            vl.append(PhonexCdrVille(j)[0])
        else:
            vl.append(PhonexCdr(j)[0])

    return vl


def Combine(valeurAvant, cree, flag_ville = False):
    if _pays == 'GBR':
        return CombineGBR(valeurAvant, cree, flag_ville=False)
    if _pays not in ('FRA', 'MAR', 'KOR'):
        if True:
            for i in range(0, len(valeurAvant)):
                valeurAvant[i] = convertUTFISO.convertUTF8(valeurAvant[i])

    if cree:
        valeurs = valeurAvant[0:4]
    else:
        valeurs = valeurAvant
    if valeurs == ['']:
        return []
    valeurs1 = []
    for i in valeurs:
        if i[0] in '0123456789' or len(i) >= 2:
            valeurs1.append(i)

    valeurs = valeurs1
    cx = []
    matmot = []
    Premier = True
    taille = 2 ** len(valeurs)
    intervalle = taille / 2
    encours = 0
    while True:
        un = intervalle
        lequel = 1
        for i in range(0, taille):
            if un != 0:
                un = un - 1
            else:
                un = intervalle - 1
                if lequel == 1:
                    lequel = 0
                else:
                    lequel = 1
            if Premier:
                if lequel == 1:
                    matmot.append([valeurs[encours]])
                else:
                    matmot.append([])
            elif lequel == 1:
                matmot[i].append(valeurs[encours])

        if intervalle <= 1:
            break
        intervalle = intervalle / 2
        encours = encours + 1
        Premier = False

    vl = []
    for i in matmot:
        if i != []:
            if cree:
                if _cns == 0:
                    cle = reccursive(i, cree, 1)
                else:
                    cle = reccursive(i, cree)
            else:
                cle = [i]
            clemem = []
            for j1 in cle:
                clemem.append(j1[:])

            for j in range(0, len(cle)):
                for k in range(0, len(cle[j])):
                    if flag_ville:
                        cle[j][k] = PhonexCdrVille(cle[j][k])[0]
                    else:
                        cle[j][k] = PhonexCdr(cle[j][k])[0]

                try:
                    cle[j].sort()
                    if cle[j] != '' and cle[j] not in vl:
                        vl.append(cle[j])
                except Exception as e:
                    pass

                if flag_ville:
                    clemem[j].sort()
                    if clemem[j] not in vl:
                        vl.append(clemem[j])
                elif len(cle) - 1 == j:
                    clemem[j].sort()
                    try:
                        if clemem[j] != '' and clemem[j] not in vl:
                            vl.append(clemem[j])
                    except:
                        pass

    if not cree:
        vl = MajPhonems(vl)
    return vl


def DecoupeAppelJSON(fonction, chaine):
    resu = {}
    if fonction in chaine:
        decoupe = chaine.split(fonction)[1]
        while decoupe:
            if decoupe[0] == '&' or decoupe[0] == '?':
                decoupe = decoupe[1:]
            elif '=' in decoupe:
                i1 = decoupe.index('=')
                var = decoupe[0:i1].strip()
                decoupe = decoupe[i1 + 1:]
                if '&' in decoupe:
                    i1 = decoupe.index('&')
                    valeur = decoupe[0:i1]
                    decoupe = decoupe[i1 + 1:]
                else:
                    valeur = decoupe
                    decoupe = ''
                resu[var] = valeur
            else:
                break

    return resu


def RechComplement(numvoie, numero):
    nu = numero.upper().strip()
    idcle = ''
    resu = []
    if numvoie != '' and numvoie.isdigit() and numvoie[0] == '0':
        numvoie = str(int(numvoie))
    if nu == '':
        idcle = numvoie + '_'
    else:
        tb = nu.strip().split()
        if len(tb) == 1:
            idcle = numvoie + '_' + nu
        elif len(tb) == 2:
            idcle = numvoie + '_' + tb[0] + tb[1][0]
        else:
            idcle = ''
    if idcle != '' and _flag_mapcomplement and _mapcomplement.has_key(idcle):
        for i in _mapcomplement[idcle]:
            if _flag_bodacc:
                resu.append(NormaliseBodacc(decode(i)))
            else:
                resu.append(decode(i))

    return resu


def recherche_province(province, IDLocalite):
    if IDLocalite != None and IDLocalite != '':
        if prov_234.has_key(IDLocalite):
            va = prov_234[IDLocalite]
            nomprovince = va[0][0]
            nommetropole = va[0][1]
            va = va[1:]
            resu_dep = ''
            resu_cp = ''
            for i in va:
                if resu_dep == '':
                    resu_dep = i[1][0:_lenDepartement]
                    resu_cp = i[0]
                else:
                    resu_dep += '-' + i[1][0:_lenDepartement]
                    resu_cp += '-' + i[0]

            return [[nommetropole,
              resu_cp,
              resu_dep,
              nomprovince,
              nommetropole]]
    else:
        if prov_234.has_key(province):
            va = prov_234[province]
            nomprovince = ''
            if province != '*':
                nomprovince = va[0]
                va = va[1:]
            resu = []
            for i in va:
                if province != '*':
                    resu.append([i[0],
                     i[1],
                     '',
                     nomprovince,
                     i[0]])
                else:
                    resu.append(['',
                     i[1],
                     '',
                     i[0],
                     ''])

            return resu
        return []
    return


def RecupVNum(VAdresse, Pays):
    num = ''
    tb = VAdresse.split()
    if len(tb) >= 1:
        if fct_numerique(tb[0]):
            if Pays in ('FRA', 'MAR'):
                if len(tb) > 2:
                    if len(tb[1]) == 1 or _identifier.has_key(tb[1].upper()):
                        if len(tb[1]) == 1:
                            num = tb[0] + tb[1].upper()
                        elif tb[1].upper() == 'BIS':
                            num = tb[0] + 'B'
                        elif tb[1].upper() == 'TER':
                            num = tb[0] + 'T'
                        elif tb[1].upper() == 'QUATER':
                            num = tb[0] + 'Q'
                        else:
                            num = tb[0] + 'C'
                        tb.pop(1)
                    else:
                        num = tb[0]
                else:
                    num = tb[0]
            else:
                num = tb[0]
            if len(tb) > 1 and tb[1] in ',;':
                if len(tb) > 2:
                    VAdresse = ' '.join(tb[2:])
                else:
                    VAdresse = ''
            elif len(tb) > 1:
                VAdresse = ' '.join(tb[1:])
            else:
                VAdresse = ''
        elif fct_numerique(tb[-1]):
            num = tb[-1]
            if tb[-2] in ';,':
                tb.pop(-2)
            VAdresse = ' '.join(tb[0:-1])
    return [num, VAdresse]


class DQEDataEmail(ClassSerializer):

    class types:
        Domain = String
        IdError = String
        LastArg = String
        FirstArg = String
        eMailOrigine = String
        IdDistance = String
        Redressement = String
        eMail = String
        DQECle = String


class DQEDataLatLon(ClassSerializer):

    class types:
        Pays = String
        IDVoie = String
        Num = String
        DQECle = String


if _flag_new and not _flag_json:
    if _flag_soap_v2:
        if _flag_ExtFRA:

            class PDQEDataComplement(ClassSerializer):

                class types:
                    Complement = String


            class PDQEDataAddress(ClassSerializer):

                class types:
                    Pays = String
                    CodePostal = String
                    Localite = String
                    IDLocalite = String
                    IDVoie = String
                    IDCle = String
                    Numero = String
                    TypeVoie = String
                    Voie = String
                    Province = String
                    Complement = Array(PDQEDataComplement)
                    Complement2 = String
                    Cedex = String
                    LieuDit = String
                    DQECle = String
                    DQEPourcentErreur = String
                    DQENbnumero = String
                    DQEListeNumero = String
                    DQECompte = String
                    DQECompteur = String
                    DQECodeErreur = String
                    DQELibErreur = String
                    Taille = String


            class DQEDataAddress(ClassSerializer):

                class types:
                    Pays = String
                    CodePostal = String
                    Localite = String
                    IDLocalite = String
                    IDVoie = String
                    IDCle = String
                    Numero = String
                    TypeVoie = String
                    Voie = String
                    Province = String
                    Complement = Array(PDQEDataComplement)
                    Complement2 = String
                    Cedex = String
                    LieuDit = String
                    DQECle = String
                    DQENbnumero = String
                    DQEListeNumero = String
                    DQECompte = String
                    DQECompteur = String
                    DQECodeErreur = String
                    DQELibErreur = String
                    DQEPourcentErreur = String
                    DQEPropositions = Array(PDQEDataAddress)
                    Taille = String


        else:

            class PDQEDataAddress(ClassSerializer):

                class types:
                    Pays = String
                    CodePostal = String
                    Localite = String
                    IDLocalite = String
                    IDVoie = String
                    IDCle = String
                    Numero = String
                    TypeVoie = String
                    Voie = String
                    Province = String
                    Complement = String
                    Cedex = String
                    LieuDit = String
                    DQECle = String
                    DQEPourcentErreur = String
                    DQENbnumero = String
                    DQEListeNumero = String
                    DQECompte = String
                    DQECompteur = String
                    DQECodeErreur = String
                    DQELibErreur = String
                    Taille = String


            class DQEDataAddress(ClassSerializer):

                class types:
                    Pays = String
                    CodePostal = String
                    Localite = String
                    IDLocalite = String
                    IDVoie = String
                    IDCle = String
                    Numero = String
                    TypeVoie = String
                    Voie = String
                    Province = String
                    Complement = String
                    Cedex = String
                    LieuDit = String
                    DQECle = String
                    DQENbnumero = String
                    DQEListeNumero = String
                    DQECompte = String
                    DQECompteur = String
                    DQECodeErreur = String
                    DQELibErreur = String
                    DQEPourcentErreur = String
                    DQEPropositions = Array(PDQEDataAddress)
                    Taille = String


    else:

        class DQEDataAddress(ClassSerializer):

            class types:
                Pays = String
                CodePostal = String
                Localite = String
                IDLocalite = String
                IDVoie = String
                IDCle = String
                Numero = String
                TypeVoie = String
                Voie = String
                Province = String
                Complement = String
                Cedex = String
                LieuDit = String
                DQECle = String
                DQENbnumero = String
                DQEListeNumero = String
                DQECompte = String
                DQECompteur = String
                DQECodeErreur = String
                Taille = String


elif not _flag_json:

    class DQEDataAddress(ClassSerializer):

        class types:
            Pays = String
            CodePostal = String
            Localite = String
            IDLocalite = String
            IDVoie = String
            Numero = String
            TypeVoie = String
            Voie = String
            Province = String
            Complement = String
            DQECle = String
            DQENbnumero = String
            DQEListeNumero = String
            DQECompte = String
            DQECompteur = String
            DQECodeErreur = String
            DQELibErreur = String
            DQEPourcentErreur = String
            Taille = String


if _flag_new and not _flag_json:

    class DQEAddressMatch(SimpleWSGISoapApp):

        @soapmethod(DQEDataAddress, Integer, _returns=Array(DQEDataAddress))
        def LookupInter(self, Liste, MaxReturnedCandidate):
            resu = []
            alpha = False
            _nativecharset = 'true'
            if '-' in Liste.Pays:
                Liste.Pays = Liste.Pays.split('-')[0]
                _nativecharset = 'false'
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                vpays = Liste.Pays + '_SOAP'
                comptage_activite(Liste.DQECle, vpays, 'ADRINTER')
                vok = False
                if ExisteCompteInter(Liste.DQECle, Liste.Pays):
                    if _flag_melissa:
                        try:
                            vok = True
                            lic_melissa = _dicomelissa[Liste.DQECle]['id']
                        except:
                            lic_melissa = ''
                            vok = False

                        if lic_melissa == '':
                            vok = False
                if vok:
                    pays_iso2 = _dicopaysiso[Liste.Pays]
                    vadresse1 = netAdresse(Liste.Voie)
                    vadresse2 = netAdresse(Liste.Complement)
                    vadresse3 = netAdresse(Liste.LieuDit)
                    vcp = Liste.CodePostal
                    vville = netAdresse(Liste.Localite)
                    urlServer = ''
                    try:
                        _f = {'id': lic_melissa,
                         'a1': vadresse1,
                         'a2': vadresse2,
                         'a3': vadresse3,
                         'postal': vcp,
                         'loc': vville,
                         'ctry': pays_iso2,
                         'recordopt': int(MaxReturnedCandidate),
                         'format': 'json',
                         'opt': 'OUTPUTSCRIPT:NOCHANGE'}
                        urlServer = 'http://address.melissadata.net/v3/WEB/GlobalAddress/doGlobalAddress?' + urllib.urlencode(_f)
                    except Exception as ex:
                        print str(ex)
                        urlServer = ''

                    if urlServer != '':
                        vok = True
                        try:
                            if vadresse1 + vadresse2 + vadresse3 + vcp + vville != '':
                                _dm = decoupage_international(vadresse1, vadresse2, vadresse3, vcp, vville)
                                if _map_inter.has_key(Liste.DQECle + '_' + _dm):
                                    retour2 = str(MiseEnFormeMelissa(Liste.DQECle + '_' + _dm, vadresse1, vadresse2, vadresse3, vcp, vville))
                                    if retour2 == '':
                                        try:
                                            _opu = urllib2.urlopen(urlServer)
                                            retour2 = _opu.read()
                                        except:
                                            retour2 = {}
                                            vok = False

                                        try:
                                            _opu.close()
                                        except:
                                            pass

                                else:
                                    try:
                                        _opu = urllib2.urlopen(urlServer)
                                        retour2 = _opu.read()
                                    except:
                                        retour2 = {}
                                        vok = False

                                    try:
                                        _opu.close()
                                    except:
                                        pass

                            else:
                                vok = False
                        except:
                            vok = False

                        dico = {}
                        if vok:
                            try:
                                retour2 = retour2.replace('null', '""')
                                dico = UserDict.UserDict(eval(retour2))
                            except:
                                vok = False

                        if vok:
                            if int(dico['TotalRecords']) == 1:
                                listecode = dico['Records'][0]['Results'].split(',')
                                tp = {}
                                _ct = controlecode(listecode)
                                vcoderreur = _ct[1]
                                vlib = _ct[2]
                                vstatut = _ct[3]
                                vcp = str(dico['Records'][0]['PostalCode'])
                                vville = capital(netAdresse(dico['Records'][0]['Locality'], 2))
                                vprovince = str(netAdresse(dico['Records'][0]['AdministrativeArea'], 2))
                                vaddr1 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine1']), str(dico['Records'][0]['PostalCode'])), 2))
                                vaddr2 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine2']), str(dico['Records'][0]['PostalCode'])), 2))
                                vaddr3 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine3']), str(dico['Records'][0]['PostalCode'])), 2))
                                vbox = str(dico['Records'][0]['PostBox'])
                                vnum = str(dico['Records'][0]['PremisesNumber'])
                                vpays = str(dico['Records'][0]['CountryISO3166_1_Alpha3'])
                                vvoie = capital(netAdresse(dico['Records'][0]['ThoroughfareName'], 2))
                                vtypevoie = capital(netAdresse(dico['Records'][0]['ThoroughfareLeadingType'], 2))
                                if vtypevoie == '':
                                    vtypevoie = capital(netAdresse(dico['Records'][0]['ThoroughfareTrailingType'], 2))
                                if vtypevoie != '':
                                    if vaddr2 != '':
                                        if vtypevoie in [vaddr2]:
                                            vmemtp = vaddr1
                                            vaddr1 = vaddr2
                                            vaddr2 = vmemtp
                                        elif vaddr3 != '':
                                            if vtypevoie in [vaddr3]:
                                                vmemtp = vaddr1
                                                vaddr1 = vaddr3
                                                vaddr3 = vaddr2
                                                vaddr2 = vmemtp
                                np = DQEDataAddress()
                                np.CodePostal = vcp
                                np.Pays = vpays
                                np.DQECodeErreur = vcoderreur
                                np.LieuDit = ''
                                np.Complement = ''
                                if vaddr3 != '':
                                    np.Voie = vaddr1
                                    np.Complement = vaddr2
                                    np.LieuDit = vaddr3
                                elif vaddr2 != '':
                                    np.Voie = vaddr1
                                    np.Complement = vaddr2
                                else:
                                    np.Voie = vaddr1
                                np.Localite = vville
                                np.Numero = vnum
                                np.Province = vprovince
                                np.DQECompte = vstatut
                                np.DQECompteur = vlib
                                resu.append(np)
                            else:
                                np = DQEDataAddress()
                                np.DQECodeErreur = 'KO'
                                np.DQECompteur = 'Non valide'
                                resu.append(np)
                        else:
                            np = DQEDataAddress()
                            np.DQECodeErreur = 'KO'
                            np.DQECompteur = 'Non valide'
                            resu.append(np)
                    else:
                        np = DQEDataAddress()
                        np.DQECodeErreur = 'KO'
                        np.DQECompteur = 'Non valide'
                        resu.append(np)
                else:
                    try:
                        if _python25:
                            va = common.clientinter._interVerifAdress(Liste.Pays, Liste.Voie, Liste.Complement, Liste.LieuDit, Liste.CodePostal, Liste.Localite, Liste.DQECle)
                        else:
                            va = common27.clientinter._interVerifAdress(Liste.Pays, Liste.Voie, Liste.Complement, Liste.LieuDit, Liste.CodePostal, Liste.Localite, Liste.DQECle)
                        tpnb = 0
                        for x in va:
                            if x != None:
                                tpnb += 1
                                np = DQEDataAddress()
                                np.CodePostal = x[1]
                                np.Pays = x[7]
                                np.DQECodeErreur = x[0]
                                np.Voie = x[3]
                                np.Localite = x[2]
                                np.Numero = x[4]
                                np.Complement = x[5]
                                np.Province = x[6]
                                np.DQECompte = x[8]
                                np.DQECompteur = x[9]
                                resu.append(np)
                                if tpnb == MaxReturnedCandidate:
                                    break

                    except:
                        resu = []

            return resu

        @soapmethod(DQEDataAddress, Integer, _returns=Array(DQEDataAddress))
        def LookupCP(self, Liste, MaxReturnedCandidate):
            resu = []
            fl_manque = ''
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                if Liste.CodePostal != None and 'unicode' in str(type(Liste.CodePostal)):
                    Liste.CodePostal = Liste.CodePostal.encode('utf-8')
                if Liste.Voie != None and 'unicode' in str(type(Liste.Voie)):
                    Liste.Voie = Liste.Voie.encode('utf-8')
                if Liste.Localite != None and 'unicode' in str(type(Liste.Localite)):
                    Liste.Localite = Liste.Localite.encode('utf-8')
                if Liste.LieuDit != None and 'unicode' in str(type(Liste.LieuDit)):
                    Liste.LieuDit = Liste.LieuDit.encode('utf-8')
                if Liste.Complement != None and 'unicode' in str(type(Liste.Complement)):
                    Liste.Complement = Liste.Complement.encode('utf-8')
                if Liste.Complement != None and Liste.Complement[0:6] == 'email:':
                    vpays = Liste.Pays + '_SOAP'
                    comptage_activite(Liste.DQECle, vpays, 'MAIL')
                    np = DQEDataAddress()
                    if ServerDQEMail is not None:
                        np.DQECodeErreur = str(ServerDQEMail.verifemailjson(Liste.Complement[6:], Liste.DQECle))
                    np.Complement = Liste.Complement
                    np.DQECle = Liste.DQECle
                    resu.append(np)
                else:
                    try:
                        vpays = Liste.Pays + '_SOAP'
                        if Liste.CodePostal != None and Liste.CodePostal != '':
                            if Liste.CodePostal.count('.') == 3:
                                comptage_activite(Liste.DQECle, vpays, 'CPIP')
                            elif _flag_melissa and Liste.Pays != '' and Liste.Pays[0:2] != _pays[0:2]:
                                comptage_activite(Liste.DQECle, vpays, 'CPINTER')
                            elif not (Liste.CodePostal == '92800' and MaxReturnedCandidate == 1):
                                if vpays == 'FRA_SOAP':
                                    if Liste.CodePostal[0] in '0123456789':
                                        if len(Liste.CodePostal) == 5:
                                            comptage_activite(Liste.DQECle, vpays, 'CP')
                                    else:
                                        comptage_activite(Liste.DQECle, vpays, 'CP')
                                else:
                                    comptage_activite(Liste.DQECle, vpays, 'CP')
                        fl_4 = False
                        if (Liste.CodePostal == None or Liste.CodePostal == '') and (Liste.IDLocalite == None or Liste.IDLocalite == '' or Liste.IDLocalite[0] in 'mp') and Liste.Province != '':
                            va = recherche_province(Liste.Province, Liste.IDLocalite)
                            fl_4 = True
                        elif (Liste.CodePostal == None or Liste.CodePostal == '') and Liste.IDLocalite != '':
                            va = recherche_IDcp(Liste.IDLocalite)
                            fl_4 = True
                        elif not TestCP(Liste.CodePostal, Liste.Pays):
                            if Liste.Pays != '' and Liste.Pays[0:2] != _pays[0:2]:
                                va = rechVilleInter(Liste.Pays, Liste.CodePostal, Liste.DQECle, retjson=False)
                                if va == []:
                                    va = [['',
                                      '',
                                      '*',
                                      '',
                                      '']]
                                fl_4 = True
                            elif _pays != 'GBR' or len(Liste.CodePostal) > 2:
                                va = RechercheVille(Liste.CodePostal, True)
                            else:
                                va = [['',
                                  '',
                                  '*',
                                  '',
                                  '']]
                            if va == [0]:
                                if _pays == 'FRA':
                                    va = []
                                else:
                                    va = [['',
                                      '',
                                      '*',
                                      '',
                                      '']]
                                    fl_manque = '99'
                        else:
                            va = []
                            if Liste.CodePostal != None and Liste.CodePostal != '':
                                if Liste.Pays != '' and Liste.Pays[0:2] != _pays[0:2]:
                                    va = rechCPInter(Liste.Pays, Liste.CodePostal, Liste.DQECle)
                                    if va == []:
                                        va = [['',
                                          '',
                                          '*',
                                          '']]
                                    fl_4 = True
                                elif len(Liste.CodePostal) > 2:
                                    va = recherche_cp(Liste.CodePostal, True)
                    except:
                        va = []

                    i = 0
                    if not _new_compteur:
                        if va != []:
                            IncrementeCompte(Liste.DQECle, Liste.DQECompte)
                    for li in va:
                        if li != None:
                            np = DQEDataAddress()
                            np.Pays = Liste.Pays
                            fl_continue = True
                            if fl_4:
                                np.CodePostal = FormatCP(li[2])
                                np.Localite = capital(li[0], retjson=False)
                                np.Province = capital(li[3], retjson=False)
                                np.IDLocalite = str(li[1])
                            elif len(li) < 6:
                                np.CodePostal = li[4]
                                np.Localite = capital(li[0])
                                np.Province = capital(li[2])
                                np.IDLocalite = str(li[1])
                                np.LieuDit = ''
                                if len(li) > 3 and li[3] != '':
                                    np.LieuDit = capital(li[3])
                                i1 = np.Localite.find('(LD. ')
                                if i1 >= 0:
                                    i2 = np.Localite.find(')', i1)
                                    np.LieuDit = np.Localite[i1 + 4:i2]
                                    np.Localite = np.Localite[0:i1] + np.Localite[i2 + 1:]
                            elif li[0] == 'IP_ADDRESS':
                                np.Pays = li[1]
                                np.CodePostal = FormatCP(Liste.CodePostal)
                                np.Localite = li[2]
                                np.Province = ''
                                np.IDLocalite = ''
                                np.IDVoie = ''
                                np.Numero = ''
                                np.TypeVoie = ''
                                np.Voie = li[3] + ':' + li[4]
                                np.Complement = ''
                                fl_continue = False
                            elif li[0] == 'VOIE_POSTE':
                                np.Pays = Liste.Pays
                                np.CodePostal = FormatCP(li[6])
                                np.Localite = li[1]
                                np.Province = li[3]
                                np.IDLocalite = li[2]
                                np.IDVoie = li[4]
                                np.LieuDit = li[-1]
                                np.Numero = ''
                                np.TypeVoie = ''
                                np.Voie = li[5]
                                np.Complement = ''
                                np.DQENbnumero = str(li[7])
                                np.DQEListeNumero = li[8]
                                fl_continue = False
                            elif li[0] == 'CEDEX_FRA':
                                np.Pays = Liste.Pays
                                np.CodePostal = FormatCP(li[1][2])
                                np.Localite = li[2][0]
                                if li[2][1] != '*':
                                    np.Province = li[2][1]
                                else:
                                    np.Province = ''
                                np.IDLocalite = li[1][0]
                                np.IDVoie = li[6]
                                if li[4] != '':
                                    np.DQENbnumero = '1'
                                    try:
                                        np.DQEListeNumero = str(int(li[4]))
                                    except:
                                        np.DQEListeNumero = li[4]

                                else:
                                    np.DQENbnumero = ''
                                    np.DQEListeNumero = ''
                                np.Voie = li[10][0] + ',,' + li[3]
                                np.Complement = 'CEDEX_FRA:' + li[10][2] + ', ' + li[10][3]
                                fl_continue = False
                            elif li[0] == 'CEDEXA':
                                np.Pays = Liste.Pays
                                np.CodePostal = FormatCP(li[7])
                                np.Localite = li[8]
                                np.Province = li[-1]
                                np.IDLocalite = li[11]
                                np.IDVoie = li[10]
                                np.DQENbnumero = ''
                                np.Complement = ''
                                np.DQEListeNumero = ''
                                np.Voie = li[5]
                                fbp = False
                                if li[1][0:5] == '_BP_:':
                                    if li[5] == '':
                                        np.Voie = li[1][5:]
                                    else:
                                        np.Voie = li[5] + ' ' + li[1][5:]
                                elif li[1][0:7] == '__BP__:':
                                    if li[5] == '':
                                        np.Voie = li[1][7:]
                                    else:
                                        np.Voie = li[5] + ' ' + li[1][7:]
                                else:
                                    np.Voie = (li[1] + ',,' + li[5]).strip()
                                if li[4] != '':
                                    if '-' in li[4]:
                                        tt = li[4].split('-')
                                        if tt[0] == tt[1]:
                                            np.Voie += ' ' + tt[0]
                                        else:
                                            np.Voie += ' BP_'
                                            np.DQENbnumero = str(int(tt[1]) - int(tt[0]) + 1)
                                            np.DQEListeNumero = str(tt[0])
                                            for iii in range(int(tt[0]) + 1, int(tt[1]) + 1):
                                                np.DQEListeNumero += ';' + str(iii)

                                np.Numero = ''
                                np.TypeVoie = ''
                                fl_continue = False
                            elif Liste.Pays in ('FRA', 'MAR'):
                                np.Pays = Liste.Pays
                                np.CodePostal = li[0][1]
                                np.Localite = li[1][0]
                                np.Province = li[1][1]
                                np.IDLocalite = li[0][0]
                                np.IDVoie = ''
                                np.Numero = li[3]
                                np.TypeVoie = ''
                                np.Voie = li[2]
                                np.Complement = li[9][0]
                                np.DQENbnumero = ''
                                np.DQEListeNumero = ''
                                fl_continue = False
                            elif len(li) == 6:
                                np.CodePostal = FormatCP(Liste.CodePostal)
                                if Liste.Pays in ('DEU',) and np.CodePostal == li[-1] and li[3] == '' and li[2] != '':
                                    np.Localite = li[2]
                                    np.Province = li[0]
                                elif li[3] == '':
                                    np.Localite = li[0]
                                    np.Province = li[2]
                                else:
                                    np.Localite = li[3]
                                    np.Province = li[2]
                                np.IDLocalite = str(li[1])
                                np.LieuDit = ''
                                np.IDVoie = ''
                                np.Numero = ''
                                np.TypeVoie = ''
                                np.Voie = ''
                                np.Complement = ''
                                np.DQENbnumero = ''
                                np.DQEListeNumero = ''
                                fl_continue = False
                            if fl_continue:
                                if Liste.Voie != None:
                                    np.Voie = Liste.Voie
                                else:
                                    np.Voie = ''
                                if Liste.Numero != None:
                                    np.Numero = Liste.Numero
                                else:
                                    np.Numero = ''
                                if Liste.TypeVoie != None:
                                    np.TypeVoie = Liste.TypeVoie
                                else:
                                    np.TypeVoie = ''
                                if Liste.Complement != None:
                                    np.Complement = Liste.Complement
                                else:
                                    np.Complement = ''
                                if Liste.DQENbnumero != None:
                                    np.DQENbnumero = str(Liste.DQENbnumero)
                                else:
                                    np.DQENbnumero = ''
                                if Liste.DQEListeNumero != None:
                                    np.DQEListeNumero = Liste.DQEListeNumero
                                else:
                                    np.DQEListeNumero = ''
                            if Liste.DQECle != None:
                                np.DQECle = Liste.DQECle
                            else:
                                np.DQECle = ''
                            if Liste.DQECompte != None:
                                np.DQECompte = Liste.DQECompte
                            else:
                                np.DQECompte = ''
                            np.DQECodeErreur = fl_manque
                            resu.append(np)
                            i = i + 1
                            if i == MaxReturnedCandidate:
                                break

            return resu

        @soapmethod(DQEDataAddress, _returns=DQEDataAddress)
        def LookupNumAddress(self, Liste):
            global _Taille_adresse
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                vpays = Liste.Pays + '_SOAP'
                np = DQEDataAddress()
                if Liste.Pays != None:
                    np.Pays = Liste.Pays
                else:
                    np.Pays = ''
                if Liste.CodePostal != None:
                    np.CodePostal = FormatCP(Liste.CodePostal)
                else:
                    np.CodePostal = ''
                if Liste.Localite != None:
                    np.Localite = Liste.Localite
                else:
                    np.Localite = ''
                if Liste.Voie != None:
                    np.Voie = Liste.Voie
                else:
                    np.Voie = ''
                if Liste.IDVoie != None:
                    np.IDVoie = Liste.IDVoie
                else:
                    np.IDVoie = ''
                if Liste.Complement != None:
                    np.Complement = Liste.Complement
                else:
                    np.Complement = ''
                if Liste.Province != None:
                    np.Province = Liste.Province
                else:
                    np.Province = ''
                if Liste.Numero != None:
                    np.Numero = Liste.Numero
                else:
                    np.Numero = ''
                if Liste.TypeVoie != None:
                    np.TypeVoie = Liste.TypeVoie
                else:
                    np.TypeVoie = ''
                if Liste.DQECle != None:
                    np.DQECle = Liste.DQECle
                else:
                    np.DQECle = ''
                if Liste.DQENbnumero != None:
                    np.DQENbnumero = str(Liste.DQENbnumero)
                else:
                    np.DQENbnumero = ''
                if Liste.DQEListeNumero != None:
                    np.DQEListeNumero = Liste.DQEListeNumero
                else:
                    np.DQEListeNumero = ''
                if Liste.DQEListeNumero != None:
                    np.DQEListeNumero = Liste.DQEListeNumero
                else:
                    np.DQEListeNumero = ''
                if Liste.DQECompte != None:
                    np.DQECompte = Liste.DQECompte
                else:
                    np.DQECompte = ''
                if Liste.IDVoie == '':
                    return np
                va = RechNumVoie([['',
                  '',
                  '',
                  np.Numero,
                  '',
                  Liste.IDVoie]])
                adr = ((np.Numero + ' ' + np.TypeVoie).strip() + ' ' + np.Voie).strip()
                if Liste.Taille != None and int(Liste.Taille) > 20 and int(Liste.Taille) != _Taille_adresse:
                    TailleMax = int(Liste.Taille)
                else:
                    TailleMax = _Taille_adresse
                if len(adr) > TailleMax:
                    n1 = NormaliseTaille(adr, TailleMax).split()
                    if np.Numero != '':
                        n1 = n1[len(np.Numero.split()):]
                    if np.TypeVoie != '':
                        np.TypeVoie = n1[0]
                        n1.pop(0)
                    np.Voie = ' '.join(n1)
                if len(va[0]) > 6:
                    np.DQENbnumero = str(va[0][6])
                    np.DQEListeNumero = va[0][7]
                    if len(va[0]) > 8:
                        np.CodePostal = FormatCP(va[0][8])
                    elif va[0][1] != '' and Liste.CodePostal != '' and Liste.CodePostal != va[0][1]:
                        np.CodePostal = FormatCP(va[0][1])
                return np
            else:
                return

        @soapmethod(DQEDataAddress, _returns=DQEDataAddress)
        def LookupComplement(self, Liste):
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                if Liste.CodePostal != None and 'unicode' in str(type(Liste.CodePostal)):
                    Liste.CodePostal = Liste.CodePostal.encode('utf-8')
                if Liste.Voie != None and 'unicode' in str(type(Liste.Voie)):
                    Liste.Voie = Liste.Voie.encode('utf-8')
                if Liste.Localite != None and 'unicode' in str(type(Liste.Localite)):
                    Liste.Localite = Liste.Localite.encode('utf-8')
                if Liste.LieuDit != None and 'unicode' in str(type(Liste.LieuDit)):
                    Liste.LieuDit = Liste.LieuDit.encode('utf-8')
                if Liste.Complement != None and 'unicode' in str(type(Liste.Complement)):
                    Liste.Complement = Liste.Complement.encode('utf-8')
                vpays = Liste.Pays + '_SOAP'
                np = DQEDataAddress()
                if Liste.Pays != None:
                    np.Pays = Liste.Pays
                else:
                    np.Pays = ''
                if Liste.CodePostal != None:
                    np.CodePostal = FormatCP(Liste.CodePostal)
                else:
                    np.CodePostal = ''
                if Liste.Localite != None:
                    np.Localite = Liste.Localite
                else:
                    np.Localite = ''
                if Liste.Voie != None:
                    np.Voie = Liste.Voie
                else:
                    np.Voie = ''
                if Liste.IDVoie != None:
                    np.IDVoie = Liste.IDVoie
                else:
                    np.IDVoie = ''
                np.Complement = ''
                if Liste.Province != None:
                    np.Province = Liste.Province
                else:
                    np.Province = ''
                if Liste.Numero != None:
                    np.Numero = Liste.Numero
                else:
                    np.Numero = ''
                if Liste.TypeVoie != None:
                    np.TypeVoie = Liste.TypeVoie
                else:
                    np.TypeVoie = ''
                if Liste.DQECle != None:
                    np.DQECle = Liste.DQECle
                else:
                    np.DQECle = ''
                if Liste.DQENbnumero != None:
                    np.DQENbnumero = str(Liste.DQENbnumero)
                else:
                    np.DQENbnumero = ''
                if Liste.DQEListeNumero != None:
                    np.DQEListeNumero = Liste.DQEListeNumero
                else:
                    np.DQEListeNumero = ''
                if Liste.DQEListeNumero != None:
                    np.DQEListeNumero = Liste.DQEListeNumero
                else:
                    np.DQEListeNumero = ''
                if Liste.DQECompte != None:
                    np.DQECompte = Liste.DQECompte
                else:
                    np.DQECompte = ''
                if Liste.IDVoie == None or Liste.IDVoie == '':
                    np.Complement = ''
                    return np
                va = RechComplement(Liste.IDVoie, Liste.Numero)
                if va != []:
                    np.Complement = '\t'.join(va)
                return np
            else:
                return

        @soapmethod(DQEDataAddress, _returns=DQEDataAddress)
        def LookupNewAddress(self, Liste):
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                if Liste.IDVoie == None or Liste.IDVoie == '':
                    return Liste
                st = str(Liste.IDVoie)
                if _mapnouveaunom.has_key(st):
                    Liste.Voie = decode(adresse[st])
                else:
                    Liste.Voie = ''
            return Liste

        @soapmethod(DQEDataAddress, Integer, _returns=Array(DQEDataAddress))
        def LookupAddress(self, Liste, MaxReturnedCandidate):
            resu = []
            alpha = False
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                if Liste.IDLocalite == None or Liste.IDLocalite == '' or Liste.Voie == '':
                    return []
                try:
                    if Liste.CodePostal != None and 'unicode' in str(type(Liste.CodePostal)):
                        Liste.CodePostal = Liste.CodePostal.encode('utf-8')
                    if Liste.Voie != None and 'unicode' in str(type(Liste.Voie)):
                        Liste.Voie = Liste.Voie.encode('utf-8')
                    if Liste.Localite != None and 'unicode' in str(type(Liste.Localite)):
                        Liste.Localite = Liste.Localite.encode('utf-8')
                    if Liste.LieuDit != None and 'unicode' in str(type(Liste.LieuDit)):
                        Liste.LieuDit = Liste.LieuDit.encode('utf-8')
                    if Liste.Complement != None and 'unicode' in str(type(Liste.Complement)):
                        Liste.Complement = Liste.Complement.encode('utf-8')
                    vpays = Liste.Pays + '_SOAP'
                    if Liste.CodePostal != None and 'unicode' in str(type(Liste.CodePostal)):
                        Liste.CodePostal = Liste.CodePostal.encode('utf-8')
                    if Liste.Voie != None and 'unicode' in str(type(Liste.Voie)):
                        Liste.Voie = Liste.Voie.encode('utf-8')
                    if Liste.Localite != None and 'unicode' in str(type(Liste.Localite)):
                        Liste.Localite = Liste.Localite.encode('utf-8')
                    if Liste.LieuDit != None and 'unicode' in str(type(Liste.LieuDit)):
                        Liste.LieuDit = Liste.LieuDit.encode('utf-8')
                    if Liste.Complement != None and 'unicode' in str(type(Liste.Complement)):
                        Liste.Complement = Liste.Complement.encode('utf-8')
                    if Liste.Localite == None:
                        Liste.Localite = ''
                    if Liste.CodePostal == None:
                        Liste.CodePostal = ''
                    if Liste.Voie == None:
                        Liste.Voie = ''
                    if Liste.LieuDit == None:
                        Liste.LieuDit = ''
                    if Liste.IDLocalite == None:
                        Liste.IDLocalite = ''
                    if Liste.Pays == None:
                        Liste.Pays = ''
                    _num = ''
                    if '-' in Liste.IDLocalite:
                        _v = RecupVNum(Liste.Voie, Liste.Pays)
                        if _v[0] != '' and _v[1] != '':
                            _num = _v[0]
                            Liste.Voie = _v[1]
                            if (Liste.Numero == None or Liste.Numero == '') and _num != '':
                                Liste.Numero = _num
                        alpha = True
                        tab_idl = Liste.IDLocalite.split('-')
                        va = []
                        if len(tab_idl) != 0:
                            mx = MaxReturnedCandidate
                            for idl in tab_idl:
                                if Liste.Localite != None and Liste.Localite != '' and ' CEDEX ' in Liste.Localite + ' ':
                                    va1 = recherche_adr(idl, Liste.Voie, mx, False, Liste.CodePostal)
                                else:
                                    va1 = recherche_adr(idl, Liste.Voie, mx, False)
                                if va1 != []:
                                    va2 = []
                                    for iva1 in va1:
                                        _va2 = iva1 + [idl]
                                        if _va2 not in va:
                                            va2.append(iva1 + [idl])

                                    if va2 != []:
                                        va.extend(va2[:])

                    elif Liste.Pays != '' and Liste.Pays[0:2] != _pays[0:2] and _flag_melissa:
                        _adr = RecupAdr()
                        try:
                            if Liste.Localite != '':
                                _re1 = simplejson.loads(_adr.index(Liste.Pays, Liste.Localite, Liste.Voie, '1', Liste.DQECle))
                            elif Liste.IDLocalite != '':
                                _re1 = simplejson.loads(_adr.index(Liste.Pays, Liste.IDLocalite, Liste.Voie, '1', Liste.DQECle))
                            elif Liste.CodePostal != '':
                                _re1 = simplejson.loads(_adr.index(Liste.Pays, Liste.CodePostal, Liste.Voie, '1', Liste.DQECle))
                            else:
                                _re1 = simplejson.loads(_adr.index(Liste.Pays, '', Liste.Voie, '1', Liste.DQECle))
                            va = []
                            for i in range(1, len(_re1) + 1):
                                _re = _re1[str(i)]
                                _are = ['DQE_INTER',
                                 _re['Pays'],
                                 _re['Province'],
                                 _re['CodePostal'],
                                 _re['Localite'],
                                 _re['LieuDit'],
                                 _re['Voie'],
                                 _re['Numero'],
                                 _re['ListeNumero'],
                                 _re['NbNumero']]
                                if _are not in va:
                                    va.append(_are)

                        except:
                            va = []

                        _adr = 0
                    elif Liste.Localite != None and Liste.Localite != '' and ' CEDEX ' in Liste.Localite + ' ':
                        va = recherche_adr(Liste.IDLocalite, Liste.Voie, MaxReturnedCandidate, False, Liste.CodePostal)
                    elif Liste.CodePostal != '' and _cedexa.has_key(Liste.CodePostal):
                        va = recherche_adr(Liste.IDLocalite, Liste.Voie, MaxReturnedCandidate, False, Liste.CodePostal)
                    else:
                        _v = RecupVNum(Liste.Voie, Liste.Pays)
                        _num = _v[0]
                        _Adr = _v[1]
                        if Liste.IDLocalite != None and '-' in Liste.IDLocalite:
                            tab_idl = Liste.IDLocalite.split('-')
                            va = []
                            if len(tab_idl) != 0:
                                for idl in tab_idl:
                                    va1 = recherche_adr(idl, _Adr, MaxReturnedCandidate, False, cedex=Liste.CodePostal)
                                    if va1 != []:
                                        va2 = []
                                        for iva1 in va1:
                                            _va2 = iva1 + [idl]
                                            if _va2 not in va:
                                                va2.append(iva1 + [idl])

                                        if va2 != []:
                                            va.extend(va2[:])

                        elif Liste.Pays != 'FRA':
                            if _num == '':
                                resu_format = formatage(Liste.Voie + ' ' + '00000000'[0:_lenCP])
                                if _regles.has_key(resu_format[1]):
                                    recup = decoupe_voie(_regles[resu_format[1]][0], resu_format)
                                    _num = recup[4].strip()
                                    if _num != '':
                                        Liste.Voie = recup[2]
                            va = recherche_adr(Liste.IDLocalite, _Adr, MaxReturnedCandidate, False, cedex=Liste.CodePostal)
                        else:
                            va = recherche_adr(Liste.IDLocalite, _Adr, MaxReturnedCandidate, False, cedex=Liste.CodePostal)
                        if (Liste.Numero == None or Liste.Numero == '') and _num != '':
                            Liste.Numero = _num
                except:
                    va = []

                i = 0
                defautcedex = ''
                if Liste.Localite != None and ' CEDEX ' in Liste.Localite:
                    if '(' in Liste.Localite:
                        ii = Liste.Localite.index('(')
                    else:
                        ii = -1
                    if ii < 0:
                        cdx = Liste.Localite
                    else:
                        cdx = Liste.Localite[0:ii].strip()
                    if '-' in Liste.IDLocalite:
                        for ii in Liste.IDLocalite.split('-'):
                            if mapcp.has_key(ii + '_' + cdx):
                                Liste.IDLocalite = ii[:]
                                defautcedex = mapcp[Liste.IDLocalite + '_' + cdx][0]
                                break

                        if defautcedex == '':
                            defautcedex = '*'
                    elif mapcp.has_key(Liste.IDLocalite + '_' + cdx):
                        defautcedex = mapcp[Liste.IDLocalite + '_' + cdx][0]
                    else:
                        defautcedex = '*'
                if Liste.Taille != None and int(Liste.Taille) > 20 and int(Liste.Taille) != _Taille_adresse:
                    TailleMax = int(Liste.Taille)
                else:
                    TailleMax = _Taille_adresse
                _li = 0
                for li in va:
                    if li != None:
                        _li += 1
                        np = DQEDataAddress()
                        if Liste.Pays != None and Liste.Pays != '':
                            np.Pays = Liste.Pays
                        else:
                            np.Pays = _pays
                        if li[0] == 'CEDEX_ADR':
                            np.CodePostal = FormatCP(li[1][1])
                            np.IDLocalite = li[1][0]
                            np.Localite = li[1][2]
                            np.IDVoie = li[4]
                            np.Voie = li[5][0] + ',,' + li[2]
                            np.Complement = li[5][2]
                            np.LieuDit = li[5][3]
                            np.DQENbnumero = '1'
                            np.DQEListeNumero = li[3].strip()
                            if len(li[1]) == 3:
                                np.Province = '*'
                            else:
                                np.Province = li[1][-1]
                            if Liste.DQECle != None:
                                np.DQECle = Liste.DQECle
                            else:
                                np.DQECle = ''
                            if Liste.DQECompte != None:
                                np.DQECompte = Liste.DQECompte
                            else:
                                np.DQECompte = ''
                        elif li[0] == 'DQE_INTER':
                            np.CodePostal = FormatCP(li[3])
                            np.Pays = li[1]
                            np.IDLocalite = '1'
                            np.Localite = li[4]
                            np.IDVoie = str(_li)
                            np.Voie = ',,' + li[6]
                            np.Complement = ''
                            np.LieuDit = li[5]
                            np.DQENbnumero = str(li[-1])
                            np.DQEListeNumero = li[-2].strip()
                            np.Province = li[2]
                            if Liste.DQECle != None:
                                np.DQECle = Liste.DQECle
                            else:
                                np.DQECle = ''
                            if Liste.DQECompte != None:
                                np.DQECompte = Liste.DQECompte
                            else:
                                np.DQECompte = ''
                        else:
                            np.Localite = ''
                            if defautcedex != '':
                                if defautcedex == '*':
                                    if len(li) >= 4:
                                        np.Localite = cdx
                                        np.CodePostal = FormatCP(li[3])
                                    else:
                                        np.Localite = cdx
                                        np.CodePostal = FormatCP(adresse[str(li[1])][1])
                                else:
                                    np.CodePostal = FormatCP(defautcedex)
                                    np.Localite = cdx
                            else:
                                np.CodePostal = FormatCP(li[2])
                                if alpha:
                                    np.Localite = Liste.Localite
                                else:
                                    np.Localite = Liste.Localite
                                _fl0 = False
                                _fl00 = False
                                if Liste.Pays in ('FRA', 'MAR'):
                                    if len(li) == 5:
                                        _fl1 = li[4] in cpld_234
                                        _fl2 = li[4] + '_' in cpld_234
                                        _fl0 = _fl1 or _fl2
                                    elif len(li) == 4:
                                        _fl1 = li[3] in cpld_234
                                        _fl2 = li[3] + '_' in cpld_234
                                        _fl00 = _fl1 or _fl2
                                if _fl0:
                                    if _fl1:
                                        _v00 = cpld_234[li[4]][0]
                                    else:
                                        _v00 = cpld_234[li[4] + '_'][0]
                                    np.CodePostal = _v00[2]
                                    if _v00[1] != '':
                                        np.Localite = _v00[0] + ' (LD. ' + _v00[1] + ')'
                                    else:
                                        np.Localite = _v00[0]
                                elif _fl00:
                                    if _fl1:
                                        _v00 = cpld_234[li[3]][0]
                                    else:
                                        _v00 = cpld_234[li[3] + '_'][0]
                                    np.CodePostal = _v00[2]
                                    if _v00[1] != '':
                                        np.Localite = _v00[0] + ' (LD. ' + _v00[1] + ')'
                                    else:
                                        np.Localite = _v00[0]
                                elif '(' in np.Localite:
                                    _i = recherche_IDcp(Liste.IDLocalite)
                                    if _i != []:
                                        np.Localite = _i[0][0]
                                        if Liste.Pays in ('FRA', 'MAR') and len(li) == 5:
                                            np.CodePostal = li[2]
                                        elif len(li) >= 4:
                                            np.CodePostal = li[3]
                                        else:
                                            np.CodePostal = _i[0][3]
                            np.Voie = li[0]
                            np.TypeVoie = ''
                            t1 = li[0].split()
                            if len(t1) > 1 and _voie_decoupe.has_key(t1[0]):
                                for j in _voie_decoupe[t1[0]]:
                                    if t1[0:len(j)] == j:
                                        np.TypeVoie = ' '.join(j).strip()
                                        for k in range(0, len(j)):
                                            t1.pop(0)

                                        break

                                np.Voie = ' '.join(t1).strip()
                            if Liste.LieuDit != None and Liste.LieuDit != '':
                                np.LieuDit = Liste.LieuDit
                            else:
                                np.LieuDit = ''
                            if _flag_new and _flag_lieuditvoie:
                                if np.TypeVoie == 'LIEU DIT' or np.TypeVoie == 'LD':
                                    np.LieuDit = np.TypeVoie + ' ' + np.Voie
                            if len(li) == 5 and Liste.Pays == 'FRA':
                                np.IDLocalite = li[4]
                            elif len(li) == 4 and Liste.Pays == 'FRA':
                                np.IDLocalite = Liste.IDLocalite
                            elif len(li) == 4:
                                np.IDLocalite = li[3]
                            else:
                                np.IDLocalite = Liste.IDLocalite
                            np.IDVoie = str(li[1])
                            if len(np.TypeVoie + ' ' + np.Voie) > TailleMax:
                                n1 = NormaliseTaille(np.TypeVoie + ' ' + np.Voie, TailleMax).split()
                                if np.TypeVoie != '':
                                    n2 = np.TypeVoie.split()
                                    if len(n2) == 1:
                                        np.TypeVoie = n1[0]
                                        n1.pop(0)
                                np.Voie = ' '.join(n1)
                            if Liste.Complement != None:
                                np.Complement = Liste.Complement
                                if len(np.Complement) > TailleMax:
                                    n1 = NormaliseTaille(np.Complement, TailleMax)
                                    np.Complement = n1
                            else:
                                np.Complement = ''
                            if Liste.Province != None:
                                np.Province = Liste.Province
                            else:
                                np.Province = ''
                            np.DQENbnumero = ''
                            np.DQEListeNumero = ''
                            if Liste.Numero != None:
                                np.Numero = Liste.Numero
                                va1 = RechNumVoie([['',
                                  '',
                                  '',
                                  Liste.Numero,
                                  '',
                                  li[1]]])
                                if len(va1[0]) > 6:
                                    Liste.DQENbnumero = str(va1[0][6])
                                    Liste.DQEListeNumero = va1[0][7]
                                    if va1[0][6] == 1 and va1[0][1] != '' and va1[0][1] != Liste.CodePostal:
                                        Liste.CodePostal = FormatCP(va1[0][1])
                                        if va1[0][2] != '':
                                            if Liste.IDLocalite != va1[0][2]:
                                                Liste.IDLocalite = va1[0][2]
                                                _nville = recup_cp(va1[0][1], va1[0][2])
                                                if _nville != Liste.Localite:
                                                    Liste.Localite = _nville
                            else:
                                np.Numero = ''
                            if Liste.DQECle != None:
                                np.DQECle = Liste.DQECle
                            else:
                                np.DQECle = ''
                            if Liste.DQENbnumero != None:
                                np.DQENbnumero = str(Liste.DQENbnumero)
                            else:
                                np.DQENbnumero = ''
                            if Liste.DQEListeNumero != None:
                                np.DQEListeNumero = Liste.DQEListeNumero
                            else:
                                np.DQEListeNumero = ''
                            if Liste.DQEListeNumero != None:
                                np.DQEListeNumero = Liste.DQEListeNumero
                            else:
                                np.DQEListeNumero = ''
                            if Liste.DQECompte != None:
                                np.DQECompte = Liste.DQECompte
                            else:
                                np.DQECompte = ''
                            if Liste.Pays != None and Liste.Pays not in ('FRA', 'MAR'):
                                if cp_234U.has_key(np.IDLocalite):
                                    _cpU = cp_234U[np.IDLocalite]
                                    np.Province = _cpU[2]
                                    np.LieuDit = _cpU[3]
                                    np.Localite = decode(_cpU[1]) + _cpU[4]
                                    np.CodePostal = _cpU[0]
                        resu.append(np)
                        i = i + 1
                        if i == MaxReturnedCandidate:
                            break

            return resu

        @soapmethod(DQEDataAddress, Integer, _returns=Array(DQEDataAddress))
        def LookupSingleLineAddress(self, Liste, MaxReturnedCandidate):
            resu = []
            time1 = time.gmtime()
            _cpt = 0
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                if Liste.Voie == '':
                    return []
                try:
                    if Liste.CodePostal != None and 'unicode' in str(type(Liste.CodePostal)):
                        Liste.CodePostal = Liste.CodePostal.encode('utf-8')
                    if Liste.Voie != None and 'unicode' in str(type(Liste.Voie)):
                        Liste.Voie = Liste.Voie.encode('utf-8')
                    if Liste.Localite != None and 'unicode' in str(type(Liste.Localite)):
                        Liste.Localite = Liste.Localite.encode('utf-8')
                    if Liste.LieuDit != None and 'unicode' in str(type(Liste.LieuDit)):
                        Liste.LieuDit = Liste.LieuDit.encode('utf-8')
                    if Liste.Complement != None and 'unicode' in str(type(Liste.Complement)):
                        Liste.Complement = Liste.Complement.encode('utf-8')
                    vpays = Liste.Pays + '_SOAP'
                    va = []
                    if Liste.Pays != _pays:
                        c1 = RecupLibreInter()
                        r1 = []
                        try:
                            if Liste.Taille == None:
                                Liste.Taille = '100'
                            r2 = simplejson.loads(c1.index(Liste.Pays, 10, Liste.Voie, Liste.DQECle, Liste.Taille))
                            if '1' in r2.keys():
                                for i in r2.keys():
                                    _i = r2[i]
                                    r1.append([[_i['IDLocalite'], _i['CodePostal']],
                                     [_i['Localite'], _i['Province'], _i['SousLocalite']],
                                     _i['Voie'],
                                     _i['Numero'],
                                     _i['TypeVoie'],
                                     _i['IDVoie'],
                                     ''])

                        except:
                            pass

                        c1 = 0
                        va = r1
                    else:
                        comptage_activite(Liste.DQECle, vpays, 'SINGLE')
                        r1 = RechAdresse(Liste.Voie, NBMax=MaxReturnedCandidate, Lookup=True)
                    if not _new_compteur:
                        if len(r1[0]) <= 5:
                            IncrementeCompte(Liste.DQECle, Liste.DQECompte)
                        elif r1[0][5] != 0:
                            IncrementeCompte(Liste.DQECle, Liste.DQECompte)
                    if Liste.Taille != None and int(Liste.Taille) > 20 and int(Liste.Taille) != _Taille_adresse:
                        TailleMax = int(Liste.Taille)
                    else:
                        TailleMax = _Taille_adresse
                    if r1 != []:
                        supp9 = False
                        for ii in r1:
                            if len(ii) >= 9 or len(ii) <= 5:
                                supp9 = True
                                break

                        if supp9:
                            i = 0
                            for li in r1:
                                if li != None:
                                    i += 1
                                    np = DQEDataAddress()
                                    if Liste.Pays != None and Liste.Pays != '':
                                        np.Pays = Liste.Pays
                                    else:
                                        np.Pays = _pays
                                    if li[0] == 'VOIE_POSTE':
                                        np.CodePostal = FormatCP(li[6])
                                        np.Localite = li[1]
                                        np.Province = li[3]
                                        np.IDLocalite = li[2]
                                        np.IDVoie = li[4]
                                        np.Numero = ''
                                        np.TypeVoie = ''
                                        if len(li[5]) > TailleMax:
                                            np.Voie = NormaliseTaille(li[5], TailleMax)
                                        else:
                                            np.Voie = li[5]
                                        np.Complement = ''
                                        np.DQENbnumero = str(li[7])
                                        np.DQEListeNumero = li[8]
                                        np.DQECompte = ''
                                        np.DQECompteur = ''
                                        np.DQECodeErreur = ''
                                    elif li[0] == 'CEDEX_FRA':
                                        np.Pays = _pays
                                        np.CodePostal = FormatCP(li[1][2])
                                        np.Localite = li[2][0]
                                        if li[2][1] != '*':
                                            np.Province = li[2][1]
                                        else:
                                            np.Province = ''
                                        np.IDLocalite = li[1][0]
                                        np.IDVoie = li[6]
                                        if li[4] != '':
                                            np.DQENbnumero = '1'
                                            try:
                                                np.DQEListeNumero = str(int(li[4]))
                                            except:
                                                np.DQEListeNumero = li[4]

                                        else:
                                            np.DQENbnumero = ''
                                            np.DQEListeNumero = ''
                                        if len(li[3]) > TailleMax:
                                            np.Voie = li[10][0] + ',,' + NormaliseTaille(li[3], TailleMax)
                                        else:
                                            np.Voie = li[10][0] + ',,' + li[3]
                                        np.Complement = 'CEDEX_FRA:' + li[10][2] + ', ' + li[10][3]
                                        fl_continue = False
                                    elif li[0] == 'CEDEXA':
                                        np.CodePostal = FormatCP(li[7])
                                        np.Localite = li[8]
                                        np.Province = li[9]
                                        np.IDLocalite = li[11]
                                        np.IDVoie = li[10]
                                        np.DQENbnumero = ''
                                        np.DQEListeNumero = ''
                                        if len(li[5]) > TailleMax:
                                            np.Voie = NormaliseTaille(li[5], TailleMax)
                                        else:
                                            np.Voie = li[5]
                                        fbp = False
                                        if li[1][0:5] == '_BP_:':
                                            if li[5] == '':
                                                np.Complement = ''
                                                np.Voie = li[1][5:]
                                            else:
                                                np.Voie = li[5] + ' ' + li[1][5:]
                                        elif li[1][0:7] == '__BP__:':
                                            if li[5] == '':
                                                np.Complement = ''
                                                if len(li[1][7:]) > TailleMax:
                                                    np.Voie = NormaliseTaille(li[1][7:], TailleMax)
                                                else:
                                                    np.Voie = li[1][7:]
                                            elif len(li[5] + ' ' + li[1][7:]) > TailleMax:
                                                np.Voie = NormaliseTaille(li[5] + ' ' + li[1][7:], TailleMax)
                                            else:
                                                np.Voie = li[5] + ' ' + li[1][7:]
                                        else:
                                            np.Complement = li[1]
                                        if li[4] != '':
                                            if '-' in li[4]:
                                                tt = li[4].split('-')
                                                if tt[0] == tt[1]:
                                                    np.Voie += ' ' + tt[0]
                                                else:
                                                    np.Voie += ' BP_'
                                                    np.DQENbnumero = str(int(tt[1]) - int(tt[0]) + 1)
                                                    np.DQEListeNumero = str(tt[0])
                                                    for iii in range(int(tt[0]) + 1, int(tt[1]) + 1):
                                                        np.DQEListeNumero += ';' + str(iii)

                                        np.Numero = ''
                                        np.TypeVoie = ''
                                        np.DQECompte = ''
                                        np.DQECompteur = ''
                                        np.DQECodeErreur = ''
                                    elif len(li) <= 5:
                                        np.CodePostal = FormatCP(li[4])
                                        np.Localite = li[0]
                                        np.Province = li[2]
                                        np.LieuDit = li[3]
                                        np.Voie = ''
                                        np.Numero = ''
                                        np.TypeVoie = ''
                                        np.Voie = ''
                                        np.IDLocalite = li[1]
                                        np.IDVoie = ''
                                        if np.Localite.find('(LD.') > 0:
                                            np1 = np.Localite.split('(')
                                            np.Localite = np1[0][:]
                                        np.DQENbnumero = ''
                                        np.DQEListeNumero = ''
                                        np.Complement = ''
                                    elif len(li) == 6 and 'list' not in str(type(li[0])):
                                        np.CodePostal = FormatCP(li[5])
                                        np.Localite = li[0]
                                        np.Province = li[2]
                                        np.LieuDit = li[3]
                                        np.Voie = ''
                                        np.Numero = ''
                                        np.TypeVoie = ''
                                        np.Voie = ''
                                        np.IDLocalite = li[1]
                                        np.IDVoie = ''
                                        if np.Localite.find('(LD.') > 0:
                                            np1 = np.Localite.split('(')
                                            np.Localite = np1[0][:]
                                        np.DQENbnumero = ''
                                        np.DQEListeNumero = ''
                                        np.Complement = ''
                                    else:
                                        np.CodePostal = FormatCP(li[0][1])
                                        np.Localite = li[1][0]
                                        if len(li[1]) > 2 and li[1][2] != '':
                                            np.Province = li[1][2] + ' - ' + li[1][1]
                                        else:
                                            np.Province = li[1][1]
                                        if len(li[2]) > TailleMax:
                                            np.Voie = NormaliseTaille(li[2], TailleMax)
                                        else:
                                            np.Voie = li[2]
                                        np.Numero = li[3]
                                        np.TypeVoie = li[4]
                                        np.IDLocalite = li[0][0]
                                        np.IDVoie = str(li[5])
                                        if Liste.DQECle != None:
                                            np.DQECle = Liste.DQECle
                                        else:
                                            np.DQECle = ''
                                        if np.Localite.find('(LD.') > 0:
                                            np1 = np.Localite.split('(')
                                            np.LieuDit = np1[1][4:-1]
                                            if len(np1) > 2:
                                                np.Localite = np1[0][:] + ' (' + np1[2]
                                            else:
                                                np.Localite = np1[0][:]
                                        if _flag_new and _flag_lieuditvoie:
                                            if np.TypeVoie == 'LIEU DIT' or np.TypeVoie == 'LD':
                                                np.LieuDit = np.TypeVoie + ' ' + np.Voie
                                        np.DQENbnumero = ''
                                        np.DQEListeNumero = ''
                                        np.DQECompte = ''
                                        np.DQECompteur = ''
                                        np.DQECodeErreur = ''
                                        np.Complement = '\t'.join(li[9])
                                    resu.append(np)

                            return resu
                        if Liste.Pays == _pays:
                            va = RechNumVoie(r1)
                except:
                    va = []

                i = 0
                time2 = time.gmtime()
                t = time2[3] * 3600 + time2[4] * 60 + time2[5] - (time1[3] * 3600 + time1[4] * 60 + time1[5])
                if va == []:
                    np = DQEDataAddress()
                    if Liste.Pays != None:
                        np.Pays = Liste.Pays
                    else:
                        np.Pays = ''
                    np.CodePostal = ''
                    np.Localite = ''
                    np.Province = ''
                    np.Numero = ''
                    np.TypeVoie = ''
                    np.Voie = Liste.Voie
                    np.IDLocalite = ''
                    np.IDVoie = ''
                    if Liste.DQECle != None:
                        np.DQECle = Liste.DQECle
                    else:
                        np.DQECle = ''
                    np.DQENbnumero = ''
                    np.DQEListeNumero = ''
                    np.Localite = ''
                    np.LieuDit = ''
                    np.DQECompte = ''
                    np.DQECompteur = ''
                    np.DQECodeErreur = ''
                    np.Complement = ''
                    resu.append(np)
                else:
                    for li in va:
                        if li != None:
                            if li[0] == 'CEDEX_ADR':
                                np = DQEDataAddress()
                                if Liste.Pays != None:
                                    np.Pays = Liste.Pays
                                else:
                                    np.Pays = _pays
                                np.CodePostal = FormatCP(li[1][1])
                                np.IDLocalite = li[1][0]
                                np.Localite = li[1][2]
                                np.IDVoie = li[4]
                                if len(li[2]) > TailleMax:
                                    np.Voie = li[5][0] + ',,' + NormaliseTaille(li[2], TailleMax)
                                else:
                                    np.Voie = li[5][0] + ',,' + li[2]
                                np.Complement = li[5][2]
                                np.LieuDit = li[5][3]
                                np.DQENbnumero = '1'
                                np.DQEListeNumero = li[3].strip()
                                if len(li[1]) == 3:
                                    np.Province = '*'
                                else:
                                    np.Province = li[1][-1]
                                if Liste.DQECle != None:
                                    np.DQECle = Liste.DQECle
                                else:
                                    np.DQECle = ''
                                if Liste.DQECompte != None:
                                    np.DQECompte = Liste.DQECompte
                                else:
                                    np.DQECompte = ''
                            else:
                                np = DQEDataAddress()
                                if Liste.Pays != None:
                                    np.Pays = Liste.Pays
                                else:
                                    np.Pays = _pays
                                np.CodePostal = FormatCP(li[0][1])
                                if _pays not in ('FRA', 'MAR'):
                                    if len(li[1]) > 3:
                                        np.Localite = li[1][2]
                                    else:
                                        np.Localite = li[1][0]
                                else:
                                    np.Localite = li[1][0]
                                if len(li[1]) > 2 and li[1][2] != '':
                                    np.Province = li[1][2] + ' - ' + li[1][1]
                                else:
                                    np.Province = li[1][1]
                                np.Numero = li[3]
                                np.TypeVoie = li[4]
                                adr = ((np.Numero + ' ' + np.TypeVoie).strip() + ' ' + li[2]).strip()
                                if Liste.Taille != None and int(Liste.Taille) > 20 and int(Liste.Taille) != _Taille_adresse:
                                    TailleMax = int(Liste.Taille)
                                else:
                                    TailleMax = _Taille_adresse
                                if len(adr) > TailleMax:
                                    n1 = NormaliseTaille(adr, TailleMax).split()
                                    if np.Numero != '':
                                        n1 = n1[len(np.Numero.split()):]
                                    if np.TypeVoie != '':
                                        np.TypeVoie = n1[0]
                                        n1.pop(0)
                                    np.Voie = ' '.join(n1)
                                else:
                                    np.Voie = li[2]
                                np.IDLocalite = li[0][0]
                                try:
                                    np.IDVoie = str(li[5])
                                except:
                                    np.IDVoie = li[5]

                                if np.IDVoie != '0':
                                    _cpt += 1
                                if Liste.DQECle != None:
                                    np.DQECle = Liste.DQECle
                                else:
                                    np.DQECle = ''
                                if Liste.DQENbnumero != None:
                                    np.DQENbnumero = str(Liste.DQENbnumero)
                                else:
                                    np.DQENbnumero = ''
                                if Liste.DQEListeNumero != None:
                                    np.DQEListeNumero = Liste.DQEListeNumero
                                else:
                                    np.DQEListeNumero = ''
                                if Liste.DQEListeNumero != None:
                                    np.DQEListeNumero = Liste.DQEListeNumero
                                else:
                                    np.DQEListeNumero = ''
                                if np.Localite.find('(LD.') > 0:
                                    np1 = np.Localite.split('(')
                                    np.LieuDit = np1[1][4:-1]
                                    if len(np1) > 2:
                                        np.Localite = np1[0][:] + ' (' + np1[2]
                                    else:
                                        np.Localite = np1[0][:]
                                elif Liste.LieuDit != '':
                                    np.LieuDit = Liste.LieuDit
                                if _flag_new and _flag_lieuditvoie:
                                    if np.TypeVoie == 'LIEU DIT' or np.TypeVoie == 'LD':
                                        np.LieuDit = np.TypeVoie + ' ' + np.Voie
                                np.DQECompte = str(t)
                                np.DQECompteur = ''
                                np.DQECodeErreur = ''
                                if Liste.Complement != None or li[6] != '':
                                    if Liste.Complement != None:
                                        np.Complement = Liste.Complement + ' ' + li[6]
                                    else:
                                        np.Complement = li[6]
                                else:
                                    np.Complement = ''
                                if Liste.Pays != None and Liste.Pays not in ('FRA', 'MAR') and Liste.Pays == _pays:
                                    try:
                                        if cp_234U.has_key(np.IDLocalite):
                                            _cpU = cp_234U[np.IDLocalite]
                                            np.Province = _cpU[2]
                                            np.LieuDit = _cpU[3]
                                    except:
                                        pass

                                _ve_1 = 7
                                _ve_2 = 8
                                if len(li) > 7:
                                    if len(li) > 9:
                                        _ve_1 = 8
                                        _ve_2 = 9
                                if len(li) > 7 and li[_ve_1] == 1:
                                    vc = RechComplement(str(li[5]), str(li[_ve_2]))
                                    tpc = 0
                                    if vc != []:
                                        for x in vc:
                                            tpc += 1
                                            if np.Complement != '':
                                                np.Complement = np.Complement + ';' + x
                                            else:
                                                np.Complement = x
                                            if tpc == 20:
                                                break

                                np.DQENbnumero = ''
                                np.DQEListeNumero = ''
                                if len(li) > 7:
                                    if len(li) > 9:
                                        np.DQENbnumero = str(li[8])
                                        np.DQEListeNumero = li[9]
                                    else:
                                        np.DQENbnumero = str(li[7])
                                        np.DQEListeNumero = li[8]
                            resu.append(np)
                            i = i + 1
                            if i == MaxReturnedCandidate:
                                break

            return resu

        @soapmethod(DQEDataAddress, Integer, _returns=Array(DQEDataAddress))
        def LookupRnvpLineAddress(self, Liste, MaxReturnedCandidate):
            global _flag_soap_v2
            global _flag_ExtFRA
            global _flag_rnvpextend
            resu = []
            time1 = time.gmtime()
            va = []
            _ana2_ville = ''
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                if Liste.Voie == '':
                    return []
                try:
                    LieuDitPresent = False
                    if Liste.Voie != None and Liste.Voie != '' and Liste.Pays != None and Liste.Pays != '':
                        Rnvp_Appel = VerifRnvp('RNVP')
                        if _flag_soap_v2:
                            if Liste.Taille != None:
                                r1 = Rnvp_Appel.index(Pays=Liste.Pays, Adresse=Liste.Voie, Licence=Liste.DQECle, Taille=Liste.Taille, Proposition='O')
                            else:
                                r1 = Rnvp_Appel.index(Pays=Liste.Pays, Adresse=Liste.Voie, Licence=Liste.DQECle, Proposition='O')
                        elif Liste.Taille != None:
                            r1 = Rnvp_Appel.index(Pays=Liste.Pays, Adresse=Liste.Voie, Licence=Liste.DQECle, Taille=Liste.Taille)
                        else:
                            r1 = Rnvp_Appel.index(Pays=Liste.Pays, Adresse=Liste.Voie, Licence=Liste.DQECle)
                        try:
                            r2 = eval(r1)
                            ana = AnalyseRN(Liste.Voie)
                            _ana2_ville = Liste.Voie.split('|')[-1]
                            if len(r2.keys()) > 1:
                                r1 = []
                                for _r in range(1, min(len(r2), MaxReturnedCandidate) + 1):
                                    _resu = r2[str(_r)]
                                    np0 = DQEDataAddress()
                                    np0.Pays = Liste.Pays
                                    np0.CodePostal = _resu['CodePostal']
                                    np0.IDLocalite = _resu['IDLocalite']
                                    np0.Localite = _resu['Localite'].strip()
                                    np0.Province = _resu['Province']
                                    np0.Voie = _resu['Voie']
                                    np0.Numero = _resu['Numero']
                                    np0.TypeVoie = _resu['TypeVoie']
                                    np0.IDVoie = _resu['IDVoie']
                                    if Liste.DQECle != None:
                                        np0.DQECle = Liste.DQECle
                                    else:
                                        np0.DQECle = ''
                                    np0.LieuDit = _resu['LieuDit'].strip()
                                    if _resu['IDVoie'] != '':
                                        if _resu['Complement'] == '':
                                            _c = RechComplement(_resu['IDVoie'], _resu['Numero'])
                                            if len(_c) > 0:
                                                _c = ';'.join(_c)
                                                _resu['Complement'] = _c
                                        if 'NbNumero' in _resu and (_resu['NbNumero'] == '' or int(_resu['NbNumero']) <= 0):
                                            _n = RechNumVoie([['',
                                              '',
                                              '',
                                              _resu['Numero'],
                                              '',
                                              _resu['IDVoie']]])
                                            if len(_n) == 1:
                                                if _n[0][3] != _resu['Numero'] and _n[0][6] == 1:
                                                    _resu['NbNumero'] = '1'
                                                    _resu['ListeNumero'] = _n[0][7]
                                                else:
                                                    _resu['NbNumero'] = str(_n[0][6])
                                                    _resu['ListeNumero'] = _n[0][7]
                                    if not _flag_ExtFRA:
                                        np0.Complement = _resu['Complement']
                                    else:
                                        np0.Complement2 = _resu['Ligne2']
                                        rc = []
                                        if _resu['Complement'].strip() == '':
                                            npc0 = PDQEDataComplement()
                                            npc0.Complement = ''
                                            rc.append(npc0)
                                        else:
                                            for _npc in _resu['Complement'].split(';'):
                                                if _npc != '':
                                                    npc0 = PDQEDataComplement()
                                                    npc0.Complement = _npc
                                                    rc.append(npc0)

                                        np0.Complement = rc
                                    np0.DQENbnumero = str(_resu['NbNumero'])
                                    np0.DQEListeNumero = _resu['ListeNumero']
                                    np0.DQECompte = ''
                                    np0.DQECompteur = ''
                                    np0.DQECodeErreur = ''
                                    if _flag_soap_v2:
                                        if _r != 1:
                                            np0.DQELibErreur = ''
                                        else:
                                            np0.DQELibErreur = _resu['DQELibErreur']
                                            np0.DQECodeErreur = _resu['DQECodeErreur']
                                        np0.DQEPropositions = []
                                        try:
                                            np0.DQEPourcentErreur = calcul_PE(ana['rnvp_Adresse'], np0.Voie)
                                        except:
                                            np0.DQEPourcentErreur = '0'

                                    np0.Cedex = ''
                                    if Liste.Taille != None:
                                        np0.Taille = Liste.Taille
                                    else:
                                        np0.Taille = ''
                                    r1.append(np0)

                                np = DQEDataAddress()
                                np.Pays = Liste.Pays
                                np.CodePostal = ana['rnvp_Cp'].strip()
                                np.Localite = ana['rnvp_Ville'].strip()
                                np.Province = ''
                                np.Voie = ana['rnvp_Adresse'].strip()
                                np.Numero = ''
                                np.TypeVoie = ''
                                np.IDLocalite = ''
                                np.IDVoie = ''
                                if Liste.DQECle != None:
                                    np.DQECle = Liste.DQECle
                                else:
                                    np.DQECle = ''
                                np.LieuDit = ''
                                if not _flag_ExtFRA:
                                    np.Complement = ana['rnvp_Adr3'].strip()
                                else:
                                    np.Complement2 = ana['rnvp_Adr2'].strip()
                                    rc = []
                                    if ana['rnvp_Adr3'].strip() == '':
                                        npc0 = PDQEDataComplement()
                                        npc0.Complement = ''
                                        rc.append(npc0)
                                    else:
                                        for _npc in ana['rnvp_Adr3'].split(';'):
                                            if _npc != '':
                                                npc0 = PDQEDataComplement()
                                                npc0.Complement = _npc
                                                rc.append(npc0)

                                    np.Complement = rc
                                np.DQENbNumero = ''
                                np.DQEListeNumero = ''
                                np.DQECompte = ''
                                np.DQECompteur = ''
                                np.DQECodeErreur = '2'
                                if _flag_soap_v2:
                                    np.DQELibErreur = 'CORRESPONDANCES MULTIPLES'
                                    np.DQEPropositions = r1
                                    np.DQEPourcentErreur = '0'
                                np.Cedex = ''
                                if Liste.Taille != None:
                                    np.Taille = Liste.Taille
                                else:
                                    np.Taille = ''
                                resu.append(np)
                                return resu
                            if _flag_debug:
                                trace_debug(1, '* debut traitement', True)
                            r3 = r2['1']
                            np = DQEDataAddress()
                            np.Pays = r3['Pays']
                            np.CodePostal = r3['CodePostal']
                            np.Localite = r3['Localite']
                            np.Province = r3['Province']
                            np.Voie = r3['Voie']
                            np.Numero = r3['Numero']
                            np.TypeVoie = r3['TypeVoie']
                            np.IDLocalite = r3['IDLocalite']
                            np.IDVoie = r3['IDVoie']
                            if Liste.DQECle != None:
                                np.DQECle = Liste.DQECle
                            else:
                                np.DQECle = ''
                            np.LieuDit = r3['LieuDit']
                            np.Complement = r3['Complement']
                            if r3['IDVoie'] != '':
                                if r3['Complement'] == '':
                                    _c = RechComplement(r3['IDVoie'], r3['Numero'])
                                    if len(_c) > 0:
                                        _c = ';'.join(_c)
                                        r3['Complement'] = _c
                                if 'NbNumero' in r3:
                                    if r3['NbNumero'] == '' or r3['NbNumero'] == '0' or int(r3['NbNumero']) <= 0:
                                        if r3['Pays'] != 'FRA' or r3['IDVoie'] != '-1':
                                            _n = RechNumVoie([['',
                                              '',
                                              '',
                                              r3['Numero'],
                                              '',
                                              r3['IDVoie']]])
                                            if len(_n) == 1:
                                                if _n[0][6] == 0:
                                                    r3['NbNumero'] = '0'
                                                    r3['ListeNumero'] = ''
                                                    if r3['DQECodeErreur'] == '4':
                                                        r3['DQECodeErreur'] = '0'
                                                elif _n[0][3] == r3['Numero'] and _n[0][6] == 1:
                                                    r3['NbNumero'] = '1'
                                                    r3['ListeNumero'] = r3['Numero']
                                                else:
                                                    r3['NbNumero'] = str(_n[0][6])
                                                    r3['ListeNumero'] = _n[0][7]
                                                    r3['DQECodeErreur'] = '4'
                                    elif r3['DQECodeErreur'] == '4' and r3['ListeNumero'] != '' and r3['Numero'] != '':
                                        if ';' + r3['Numero'] + ';' in ';' + r3['ListeNumero'] + ';':
                                            r3['NbNumero'] = '1'
                                            r3['ListeNumero'] = r3['Numero']
                                            r3['DQECodeErreur'] = '0'
                            if not _flag_ExtFRA:
                                if 'Complement' in r3:
                                    np.Complement = r3['Complement']
                                else:
                                    np.Complement = ''
                            else:
                                if 'Ligne2' in r3:
                                    np.Complement2 = r3['Ligne2']
                                else:
                                    np.Complement2 = ''
                                rc = []
                                if 'Complement' not in r3:
                                    r3['Complement'] = ''
                                if r3['Complement'].strip() == '':
                                    npc0 = PDQEDataComplement()
                                    npc0.Complement = ''
                                    rc.append(npc0)
                                else:
                                    for _npc in r3['Complement'].split(';'):
                                        if _npc != '':
                                            npc0 = PDQEDataComplement()
                                            npc0.Complement = _npc
                                            rc.append(npc0)

                                np.Complement = rc
                            if r3.has_key('NbNumero'):
                                np.DQENbnumero = str(r3['NbNumero'])
                            else:
                                np.DQENbNumero = ''
                            if r3.has_key('ListeNumero'):
                                np.DQEListeNumero = r3['ListeNumero']
                            else:
                                np.DQEListeNumero = ''
                            np.DQECompte = ''
                            np.DQECompteur = ''
                            if 'DQECodeErreur' in r3:
                                np.DQECodeErreur = r3['DQECodeErreur']
                            else:
                                np.DQECodeErreur = '0'
                                r3['DQECodeErreur'] = '0'
                            np.DQELibErreur = 'ADRESSE VALIDEE'
                            try:
                                np.DQEPourcentErreur = calcul_PE(ana['rnvp_Adresse'], np.Voie)
                            except:
                                np.DQEPourcentErreur = '0'

                            if r3['DQECodeErreur'] == '0':
                                if np.TypeVoie != '' and np.TypeVoie not in Liste.Voie.upper():
                                    np.DQECodeErreur = '8'
                                    np.DQELibErreur = 'CHANGEMENT DE TYPE DE VOIE'
                                else:
                                    v = ((np.Numero + ' ' + np.TypeVoie).strip() + ' ' + np.Voie).strip()
                                    if v not in Liste.Voie.upper():
                                        np.DQECodeErreur = '7'
                                        np.DQELibErreur = 'NOUVEAU NOM DE VOIE'
                                    elif '|' in Liste.Voie:
                                        _lv = Liste.Voie.split('|')
                                        if len(_lv) >= 1 and v in _lv[0].upper() and len(v) == len(_lv[0]):
                                            if r3['NbNumero'] != '' and int(r3['NbNumero']) > 1:
                                                np.DQECodeErreur = '4'
                                                np.DQELibErreur = 'NUMERO DE VOIE NON REFERENCE'
                                        elif len(_lv) >= 2 and v in _lv[1].upper() and len(v) == len(_lv[1]):
                                            if r3['NbNumero'] != '' and int(r3['NbNumero']) > 1:
                                                np.DQECodeErreur = '4'
                                                np.DQELibErreur = 'NUMERO DE VOIE NON REFERENCE'
                                        else:
                                            np.DQECodeErreur = '7'
                                            np.DQELibErreur = 'NOUVEAU NOM DE VOIE'
                                    elif len(v) != len(Liste.Voie):
                                        np.DQECodeErreur = '7'
                                        np.DQELibErreur = 'NOUVEAU NOM DE VOIE'
                            elif r3['DQECodeErreur'] == '1':
                                np.DQELibErreur = 'ADRESSE NON RECONNUE'
                            elif r3['DQECodeErreur'] == '2':
                                np.DQELibErreur = 'CORRESPONDANCES MULTIPLES'
                            elif r3['DQECodeErreur'] == '3':
                                np.DQELibErreur = 'ADRESSE DE REPONSE A CONTROLER'
                            elif r3['DQECodeErreur'] == '4':
                                np.DQELibErreur = 'NUMERO DE VOIE NON REFERENCE'
                            elif r3['DQECodeErreur'] == '5':
                                np.DQELibErreur = 'ADRESSE NON RECONNUE'
                                np.DQECodeErreur = '1'
                            elif r3['DQECodeErreur'] == '7':
                                np.DQELibErreur = 'NOUVEAU NOM DE VOIE'
                            elif r3['DQECodeErreur'] == '8':
                                np.DQELibErreur = 'CHANGEMENT DE TYPE DE VOIE'
                            if _flag_debug:
                                trace_debug(3, 'CodErrAp:<' + np.DQECodeErreur + '>')
                            if not _flag_rnvpextend:
                                if ana.has_key('rnvp_Cp') and np.CodePostal != ana['rnvp_Cp'].strip():
                                    if np.DQECodeErreur != '' and np.DQECodeErreur != '0':
                                        np.DQECodeErreur += ',9'
                                        np.DQELibErreur += ',CHANGEMENT DE CODE POSTAL'
                                    else:
                                        np.DQECodeErreur = '9'
                                        np.DQELibErreur = 'CHANGEMENT DE CODE POSTAL'
                                if ana.has_key('rnvp_Ville') and np.Localite != ana['rnvp_Ville'].strip():
                                    if np.DQECodeErreur != '' and np.DQECodeErreur != '0':
                                        np.DQECodeErreur += ',10'
                                        np.DQELibErreur += ',MODIFICATION DE LA VILLE'
                                    else:
                                        np.DQECodeErreur = '10'
                                        np.DQELibErreur = 'AJOUT OU MODIFICATION DE LA VILLE'
                            else:
                                if _flag_debug:
                                    trace_debug(4, '  * Ctrl AG2R')
                                    trace_debug(4, '  * CodErrAv:<' + np.DQECodeErreur + '>')
                                if np.DQECodeErreur == '0':
                                    if _flag_debug:
                                        trace_debug(5, '  * test 5:<' + str(ana.has_key('rnvp_Cp') and ana['rnvp_Cp'] != '' and np.CodePostal != ana['rnvp_Cp'].strip()) + '>')
                                        if ana.has_key('rnvp_Cp'):
                                            trace_debug(5, '  * rnvp_Cp existe ')
                                            trace_debug(5, '  * rnvp_Cp:<' + ana['rnvp_Cp'] + '>')
                                            trace_debug(5, '  * np.Cp  :<' + np.CodePostal + '>')
                                        else:
                                            trace_debug(5, '  * rnvp_Cp n existe pas')
                                        trace_debug(6, '  * test 6:<' + str(ana.has_key('rnvp_Ville') and ana['rnvp_Ville'] != '' and np.Localite != ana['rnvp_Ville'].strip()) + '>')
                                        if ana.has_key('rnvp_Ville'):
                                            trace_debug(6, '  * rnvp_Ville existe ')
                                            trace_debug(6, '  * rnvp_Ville:<' + ana['rnvp_Ville'] + '>')
                                            trace_debug(6, '  * np.Ville  :<' + np.Localite + '>')
                                        else:
                                            trace_debug(6, '  * rnvp_Ville n existe pas')
                                    if ana.has_key('rnvp_Cp') and ana['rnvp_Cp'] != '' and np.CodePostal != ana['rnvp_Cp'].strip():
                                        np.DQECodeErreur = '5'
                                        np.DQELibErreur = 'MODIFICATION DU CODE POSTAL'
                                    elif ana.has_key('rnvp_Ville') and ana['rnvp_Ville'] != '' and np.Localite.strip() != _ana2_ville.upper().strip():
                                        np.DQECodeErreur = '6'
                                        np.DQELibErreur = 'MODIFICATION DU NOM DE LA VILLE'
                            np.Cedex = ''
                            if Liste.Taille != None:
                                np.Taille = Liste.Taille
                            else:
                                np.Taille = ''
                            resu.append(np)
                            return resu
                        except:
                            print 'erreur 3'
                            r1 = []

                        Rnvp_Appel = None
                    else:
                        vpays = Liste.Pays + '_SOAP'
                        comptage_activite(Liste.DQECle, vpays, 'RNVP')
                        ana = AnalyseRN(Liste.Voie)
                        ana['rnvp_Adresse'] = r1[0][3] + ' ' + r1[0][2]
                        ana['rnvp_Cp'] = r1[0][0][1]
                        ana['rnvp_Ville'] = r1[0][1][0]
                        ana['rnvp_Adr5'] = ''
                        ana['rnvp_Adr3'] = ''
                        ana['rnvp_CpVille'] = r1[0][0][1] + ' ' + r1[0][1][0]
                        ana['rnvp_Cedex'] = ''
                        ana['rnvp_Supprime'] = ''
                    if r1 != []:
                        if len(r1[0]) >= 9:
                            i = 0
                            for li in r1:
                                if li != None:
                                    i += 1
                                    np = DQEDataAddress()
                                    np.Pays = _pays
                                    np.CodePostal = FormatCP(li[0][1])
                                    np.Localite = li[1][0]
                                    if len(li[1]) > 2 and li[1][2] != '':
                                        np.Province = li[1][2] + ' - ' + li[1][1]
                                    else:
                                        np.Province = li[1][1]
                                    if len(li[2] + ' ' + li[4] + ' ' + li[3]) > int(Liste.Taille):
                                        li[2] = NormaliseTaille(li[2], int(Liste.Taille) - len(' ' + li[4] + ' ' + li[3]))
                                    np.Voie = li[2]
                                    np.Numero = li[3]
                                    np.TypeVoie = li[4]
                                    np.IDLocalite = li[0][0]
                                    np.IDVoie = str(li[5])
                                    if Liste.DQECle != None:
                                        np.DQECle = Liste.DQECle
                                    else:
                                        np.DQECle = ''
                                    if np.Localite.find('(LD.') > 0:
                                        np1 = np.Localite.split('(')
                                        np.LieuDit = np1[1][4:-1]
                                        if len(np1) > 2:
                                            np.Localite = np1[0][:] + ' (' + np1[2]
                                        else:
                                            np.Localite = np1[0][:]
                                    if _flag_new and _flag_lieuditvoie:
                                        if np.TypeVoie == 'LIEU DIT' or np.TypeVoie == 'LD':
                                            np.LieuDit = np.TypeVoie + ' ' + np.Voie
                                    np.Complement = '\t'.join(li[9])
                                    if ana['rnvp_Adr3'] != '':
                                        np.Complement = NormaliseTaille(ana['rnvp_Adr3'], int(Liste.Taille))
                                        if np.LieuDit is None:
                                            np.LieuDit = ''
                                        if np.LieuDit == '' and ana['rnvp_Adr5'] != '':
                                            np.LieuDit = NormaliseTaille(ana['rnvp_Adr5'], int(Liste.Taille))
                                            LieuDitPresent = True
                                        elif np.Province == '':
                                            np.Province = NormaliseTaille(ana['rnvp_Adr1'] + ' ' + ana['rnvp_Adr2'], int(Liste.Taille))
                                    else:
                                        np.Province = NormaliseTaille(ana['rnvp_Adr1'] + ' ' + ana['rnvp_Adr2'], int(Liste.Taille))
                                    np.DQENbnumero = ''
                                    np.DQEListeNumero = ''
                                    np.DQECompte = ''
                                    np.DQECompteur = ''
                                    np.DQECodeErreur = ''
                                    np.LieuDit = np.LieuDit.replace('*', '')
                                    resu.append(np)

                            return resu
                        va = RechNumVoie(r1)
                except:
                    va = []

                i = 0
                time2 = time.gmtime()
                t = time2[3] * 3600 + time2[4] * 60 + time2[5] - (time1[3] * 3600 + time1[4] * 60 + time1[5])
                for li in va:
                    if li != None:
                        np = DQEDataAddress()
                        np.Pays = _pays
                        np.CodePostal = FormatCP(li[0][1])
                        np.Localite = li[1][0]
                        if li[1][1] != '*':
                            if len(li[1]) > 2 and li[1][2] != '':
                                np.Province = li[1][2] + ' - ' + li[1][1]
                            else:
                                np.Province = li[1][1]
                        else:
                            np.Province = ana['rnvp_Adr2'].strip()
                        if Liste.Taille == None:
                            Liste.Taille = '38'
                        if len(li[3] + ' ' + li[2] + ' ' + li[4]) > int(Liste.Taille):
                            li[2] = NormaliseTaille(li[2], int(Liste.Taille) - len('  ' + li[4] + li[3]))
                        np.Voie = li[2]
                        np.Numero = li[3]
                        np.TypeVoie = li[4]
                        np.IDLocalite = li[0][0]
                        np.IDVoie = str(li[5])
                        if Liste.DQECle != None:
                            np.DQECle = Liste.DQECle
                        else:
                            np.DQECle = ''
                        if Liste.DQENbnumero != None:
                            np.DQENbnumero = Liste.DQENbnumero
                        else:
                            np.DQENbnumero = ''
                        if Liste.DQEListeNumero != None:
                            np.DQEListeNumero = Liste.DQEListeNumero
                        else:
                            np.DQEListeNumero = ''
                        if Liste.DQEListeNumero != None:
                            np.DQEListeNumero = Liste.DQEListeNumero
                        else:
                            np.DQEListeNumero = ''
                        if np.Localite.find('(LD.') > 0:
                            LieuDitPresent = True
                            np1 = np.Localite.split('(')
                            np.LieuDit = np1[1][4:-1]
                            if len(np1) > 2:
                                np.Localite = np1[0][:] + ' (' + np1[2]
                            else:
                                np.Localite = np1[0][:]
                        elif Liste.LieuDit != '' and Liste.LieuDit != None:
                            np.LieuDit = Liste.LieuDit
                            LieuDitPresent = True
                        if _flag_new and _flag_lieuditvoie:
                            if np.TypeVoie == 'LIEU DIT' or np.TypeVoie == 'LD':
                                np.LieuDit = np.TypeVoie + ' ' + np.Voie
                                LieuDitPresent = True
                        np.DQECompte = str(t)
                        np.DQECompteur = ''
                        np.DQECodeErreur = ''
                        if li[6].strip() != '':
                            if np.Complement != None:
                                np.Complement = np.Complement + ' ' + li[6]
                            else:
                                np.Complement = li[6]
                        else:
                            if np.LieuDit == None:
                                np.LieuDit = ''
                            np.Complement = ''
                            _ve_1 = 7
                            _ve_2 = 8
                            if len(li) > 7:
                                if len(li) > 9:
                                    _ve_1 = 8
                                    _ve_2 = 9
                            if li[_ve_1] == 1 and ana['rnvp_Adr1'] + ana['rnvp_Adr2'] + ana['rnvp_Adr3'] == '':
                                vc = RechComplement(str(li[5]), str(li[_ve_2]))
                                tpc = 0
                                if vc != []:
                                    for x in vc:
                                        tpc += 1
                                        if len(x) > int(Liste.Taille):
                                            x = NormaliseTaille(x, int(Liste.Taille))
                                        if ana['rnvp_Adr3'].strip() == x.strip():
                                            np.Complement = x
                                            break
                                        if np.Complement != '':
                                            np.Complement = np.Complement + ';' + x
                                        else:
                                            np.Complement = x
                                        if tpc == 20:
                                            break

                                if np.LieuDit == None:
                                    np.LieuDit = ''
                            if np.LieuDit == '':
                                if ana['rnvp_Adr3'] != '':
                                    np.LieuDit = NormaliseTaille(ana['rnvp_Adr3'], int(Liste.Taille))
                            elif ana['rnvp_Adr3'] != '':
                                np.LieuDit = NormaliseTaille(np.LieuDit + ' ' + ana['rnvp_Adr3'], int(Liste.Taille))
                            if np.LieuDit == None:
                                np.LieuDit = ''
                            if np.Complement == '':
                                np.Complement = NormaliseTaille(ana['rnvp_Adr1'], int(Liste.Taille))
                            elif len(np.Complement) > 40:
                                np.Complement = ana['rnvp_Adr1']
                            else:
                                np.Complement = np.Complement + ' ' + ana['rnvp_Adr1']
                            if not LieuDitPresent and np.Complement == '':
                                np.Complement = np.LieuDit
                                np.LieuDit = ''
                            if not LieuDitPresent and np.Complement == np.LieuDit:
                                np.LieuDit = ''
                        if np.LieuDit is None:
                            np.LieuDit = ''
                        np.DQENbnumero = ''
                        np.DQEListeNumero = ''
                        np.LieuDit = np.LieuDit.replace('*', '')
                        if len(li) > 7:
                            if len(li) > 9:
                                np.DQENbnumero = str(li[8])
                                np.DQEListeNumero = li[9]
                            else:
                                np.DQENbnumero = str(li[7])
                                np.DQEListeNumero = li[8]
                        resu.append(np)
                        i = i + 1
                        if i == MaxReturnedCandidate:
                            break

            return resu

        @soapmethod(DQEDataAddress, Integer, _returns=Array(DQEDataAddress))
        def LookupVerifLineAddress(self, Liste, MaxReturnedCandidate):
            resu = []
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                vok = False
                _nativecharset = 'true'
                if '-' in Liste.Pays:
                    Liste.Pays = Liste.Pays.split('-')[0]
                    _nativecharset = 'false'
                if ExisteCompteInter(Liste.DQECle, Liste.Pays):
                    if _flag_melissa:
                        try:
                            vok = True
                            lic_melissa = _dicomelissa[Liste.DQECle]['id']
                        except:
                            lic_melissa = ''
                            vok = False

                        if lic_melissa == '':
                            vok = False
                if vok:
                    vpays = Liste.Pays + '_SOAP'
                    comptage_activite(Liste.DQECle, vpays, 'RNVPBATCH')
                    pays_iso2 = _dicopaysiso[Liste.Pays]
                    vadresse1 = netAdresse(Liste.Voie)
                    vadresse2 = netAdresse(Liste.Complement)
                    vadresse3 = netAdresse(Liste.LieuDit)
                    vcp = Liste.CodePostal
                    vville = Liste.Localite
                    urlServer = ''
                    try:
                        _f = {'id': lic_melissa,
                         'a1': vadresse1,
                         'a2': vadresse2,
                         'a3': vadresse3,
                         'postal': vcp,
                         'loc': vville,
                         'ctry': pays_iso2,
                         'recordopt': int(MaxReturnedCandidate),
                         'format': 'json',
                         'opt': 'OUTPUTSCRIPT:NOCHANGE'}
                        urlServer = 'http://address.melissadata.net/v3/WEB/GlobalAddress/doGlobalAddress?' + urllib.urlencode(_f)
                    except Exception as ex:
                        print str(ex)
                        urlServer = ''

                    if urlServer != '':
                        vok = True
                        try:
                            if vadresse1 + vadresse2 + vadresse3 + vcp + vville != '':
                                _dm = decoupage_international(vadresse1, vadresse2, vadresse3, vcp, vville)
                                if _map_inter.has_key(Liste.DQECle + '_' + _dm):
                                    retour2 = str(MiseEnFormeMelissa(Liste.DQECle + '_' + _dm, vadresse1, vadresse2, vadresse3, vcp, vville))
                                    if retour2 == '':
                                        try:
                                            _opu = urllib2.urlopen(urlServer)
                                            retour2 = _opu.read()
                                        except:
                                            retour2 = {}
                                            vok = False

                                        try:
                                            _opu.close()
                                        except:
                                            pass

                                else:
                                    try:
                                        _opu = urllib2.urlopen(urlServer)
                                        retour2 = _opu.read()
                                    except:
                                        retour2 = {}
                                        vok = False

                                    try:
                                        _opu.close()
                                    except:
                                        pass

                            else:
                                vok = False
                        except:
                            vok = False

                        dico = {}
                        if vok:
                            try:
                                retour2 = retour2.replace('null', '""')
                                dico = UserDict.UserDict(eval(retour2))
                            except:
                                vok = False

                        if vok:
                            if int(dico['TotalRecords']) == 1:
                                listecode = dico['Records'][0]['Results'].split(',')
                                tp = {}
                                _ct = controlecode(listecode)
                                vcoderreur = _ct[1]
                                vlib = _ct[2]
                                vstatut = _ct[3]
                                vcp = str(dico['Records'][0]['PostalCode'])
                                vville = capital(netAdresse(dico['Records'][0]['Locality'], 2))
                                vprovince = str(dico['Records'][0]['AdministrativeArea'])
                                vaddr1 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine1']), str(dico['Records'][0]['PostalCode'])), 2))
                                vaddr2 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine2']), str(dico['Records'][0]['PostalCode'])), 2))
                                vaddr3 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine3']), str(dico['Records'][0]['PostalCode'])), 2))
                                vbox = str(dico['Records'][0]['PostBox'])
                                vnum = str(dico['Records'][0]['PremisesNumber'])
                                vpays = str(dico['Records'][0]['CountryISO3166_1_Alpha3'])
                                vvoie = capital(netAdresse(dico['Records'][0]['ThoroughfareName'], 2))
                                vtypevoie = capital(netAdresse(netAdresse(dico['Records'][0]['ThoroughfareLeadingType']), 2))
                                if vtypevoie == '':
                                    vtypevoie = capital(netAdresse(dico['Records'][0]['ThoroughfareTrailingType'], 2))
                                if vtypevoie != '':
                                    if vaddr2 != '':
                                        if vtypevoie in [vaddr2]:
                                            vmemtp = vaddr1
                                            vaddr1 = vaddr2
                                            vaddr2 = vmemtp
                                        elif vaddr3 != '':
                                            if vtypevoie in [vaddr3]:
                                                vmemtp = vaddr1
                                                vaddr1 = vaddr3
                                                vaddr3 = vaddr2
                                                vaddr2 = vmemtp
                                np = DQEDataAddress()
                                np.CodePostal = FormatCP(vcp)
                                np.Pays = vpays
                                np.DQECodeErreur = vcoderreur
                                if vaddr3 != '':
                                    np.Voie = vaddr1
                                    np.Complement = vaddr2 + ' ' + vaddr3
                                elif vaddr2 != '':
                                    np.Voie = vaddr1
                                    np.Complement = vaddr2
                                else:
                                    np.Voie = vaddr1
                                    np.Complement = ''
                                np.Localite = vville
                                np.Numero = vnum
                                np.Province = vprovince
                                np.DQECompte = vstatut
                                np.DQECompteur = vlib
                                resu.append(np)
                            else:
                                np = DQEDataAddress()
                                np.DQECodeErreur = 'KO'
                                np.DQECompteur = 'Non valide'
                                resu.append(np)
                        else:
                            np = DQEDataAddress()
                            np.DQECodeErreur = 'KO'
                            np.DQECompteur = 'Non valide'
                            resu.append(np)
                    else:
                        np = DQEDataAddress()
                        np.DQECodeErreur = 'KO'
                        np.DQECompteur = 'Non valide'
                        resu.append(np)
                else:
                    if _python25:
                        va = common.clientinter._interVerifAdress(Liste.Pays, Liste.Voie, Liste.Complement, Liste.Province, Liste.CodePostal, Liste.Localite, Liste.DQECle)
                    else:
                        va = common27.clientinter._interVerifAdress(Liste.Pays, Liste.Voie, Liste.Complement, Liste.Province, Liste.CodePostal, Liste.Localite, Liste.DQECle)
                    vpays = Liste.Pays + '_SOAP'
                    comptage_activite(Liste.DQECle, vpays, 'RNVPINTER')
                    tpnb = 0
                    for x in va:
                        if x != None:
                            tpnb += 1
                            np = DQEDataAddress()
                            np.DQECodeErreur = x[0]
                            np.Pays = x[7]
                            np.CodePostal = FormatCP(x[1])
                            np.Voie = x[3]
                            np.Localite = x[2]
                            np.Numero = x[4]
                            np.Complement = x[5]
                            np.Province = x[6]
                            np.DQECle = x[8]
                            np.DQEListeNumero = x[9]
                            resu.append(np)
                            if tpnb == MaxReturnedCandidate:
                                break

            return resu

        @soapmethod(DQEDataAddress, _returns=Boolean)
        def AddAccount(self, Liste):
            return AjouteCompte(Liste.DQECle, Liste.DQECompte)

        @soapmethod(DQEDataAddress, _returns=Boolean)
        def DeleteAccount(self, Liste):
            return SuppCompte(Liste.DQECle, Liste.DQECompte)

        @soapmethod(DQEDataAddress, _returns=Array(DQEDataAddress))
        def ListAccount(self, Liste):
            resu = []
            if Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                for li in ListeCompte(Liste.DQECle, Liste.DQECompte):
                    np = DQEDataAddress()
                    np.DQECle = li[0]
                    np.DQECompte = li[1]
                    np.DQECompteur = str(li[2])
                    resu.append(np)

            return resu

        @soapmethod(String, _returns=String)
        def Echo(self, Chaine):
            if Chaine.find('ReopenDataBase') >= 0:
                if type(Licence.client_ref).__name__ == 'list' or Chaine.find(Licence.client_ref) >= 0:
                    print '>> Chargement des nouvelles bases'
                    chargement(_pays)
                    print '<< Chargement Effectue'
                    return ''
            else:
                if Chaine.find('REINITIALISE_BASEINTERNE_8@99A') >= 0:
                    print '>> Chargement LICENCE'
                    VerifLicence()
                    return 'OK'
                if Chaine.find('CloseDataBase') >= 0:
                    if type(Licence.client_ref).__name__ == 'list' or Chaine.find(Licence.client_ref) >= 0:
                        print '>> Fermeture des bases courantes'
                        fermeture()
                elif Chaine.find('VersionINI') >= 0:
                    if os.path.isfile(_pathinitial + 'updateINI/version.ini'):
                        ff = open(_pathinitial + 'updateINI/version.ini')
                        a = ''
                        for line in ff:
                            a += line

                        ff.close()
                        return a
                elif Chaine.find('DQEParamINI') >= 0:
                    if os.path.isfile(_pathinitial + 'updateINI/dqeparam.ini'):
                        ff = open(_pathinitial + 'updateINI/dqeparam.ini')
                        a = ''
                        for line in ff:
                            a += line.decode('iso-8859-1').encode('utf-8')

                        ff.close()
                        return a
                else:
                    if Chaine.find('__version__') >= 0:
                        return 'Version=' + __version__
                    if Chaine.find('SaisieAdresseINI') >= 0:
                        if os.path.isfile(_pathinitial + 'updateINI/SaisieAdresse.ini'):
                            ff = open(_pathinitial + 'updateINI/SaisieAdresse.ini')
                            a = ''
                            for line in ff:
                                a += line.decode('iso-8859-1').encode('utf-8')

                            ff.close()
                            return a
                    else:
                        if _flag_log:
                            log('%s -> Echo = %s' % (datetime.datetime.now(), Chaine))
                        print ('-->', Chaine)
                        return 'OK:' + Chaine

        def __del__(self):
            print 'fin'


elif not _flag_json:

    class DQEAddressMatch(SimpleWSGISoapApp):

        @soapmethod(DQEDataAddress, Integer, _returns=Array(DQEDataAddress))
        def LookupCP(self, Liste, MaxReturnedCandidate):
            resu = []
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                try:
                    if Liste.CodePostal != None and Liste.CodePostal != '':
                        if Liste.CodePostal.count('.') == 3:
                            comptage_activite(Liste.DQECle, vpays, 'CPIP')
                        elif not (Liste.CodePostal == '92800' and MaxReturnedCandidate == 1):
                            if vpays == 'FRA_SOAP':
                                if Liste.CodePostal[0] in '0123456789':
                                    if len(Liste.CodePostal) == 5:
                                        comptage_activite(Liste.DQECle, vpays, 'CP')
                                else:
                                    comptage_activite(Liste.DQECle, vpays, 'CP')
                            else:
                                comptage_activite(Liste.DQECle, vpays, 'CP')
                    if not TestCP(Liste.CodePostal, Liste.Pays):
                        if Liste.Pays != '' and Liste.Pays[0:2] != _pays[0:2]:
                            va = rechVilleInter(Liste.Pays, Liste.CodePostal, Liste.DQECle)
                            if va == []:
                                va = [['',
                                  '',
                                  '*',
                                  '']]
                        else:
                            va = RechercheVille(Liste.CodePostal)
                    elif Liste.Pays != '' and Liste.Pays[0:2] != _pays[0:2]:
                        va = rechCPInter(Liste.Pays, Liste.CodePostal, Liste.DQECle)
                        if va == []:
                            va = [['',
                              '',
                              '*',
                              '']]
                    elif len(Liste.CodePostal) > 2:
                        va = recherche_cp(Liste.CodePostal, True)
                    else:
                        va = []
                except:
                    va = []

                i = 0
                if not _new_compteur:
                    if va != []:
                        IncrementeCompte(Liste.DQECle, Liste.DQECompte)
                for li in va:
                    if li != None:
                        np = DQEDataAddress()
                        if li[1][0] == 'IP_ADDRESS':
                            np.Pays = li[1][1]
                            np.CodePostal = FormatCP(Liste.CodePostal)
                            np.Localite = li[1][2]
                            np.Province = ''
                            np.IDLocalite = ''
                            np.IDVoie = ''
                            np.Numero = ''
                            np.TypeVoie = ''
                            np.Voie = li[1][3] + ':' + li[1][4]
                            np.Complement = ''
                        else:
                            np.Pays = _pays
                            np.CodePostal = FormatCP(Liste.CodePostal)
                            np.Localite = li[0]
                            np.Province = li[2]
                            np.IDLocalite = str(li[1])
                            if Liste.Voie != None:
                                np.Voie = Liste.Voie
                            else:
                                np.Voie = ''
                        if Liste.Numero != None:
                            np.Numero = Liste.Numero
                        else:
                            np.Numero = ''
                        if Liste.TypeVoie != None:
                            np.TypeVoie = Liste.TypeVoie
                        else:
                            np.TypeVoie = ''
                        if Liste.DQECle != None:
                            np.DQECle = Liste.DQECle
                        else:
                            np.DQECle = ''
                        if Liste.DQENbnumero != None:
                            np.DQENbnumero = Liste.DQENbnumero
                        else:
                            np.DQENbnumero = ''
                        if Liste.DQEListeNumero != None:
                            np.DQEListeNumero = Liste.DQEListeNumero
                        else:
                            np.DQEListeNumero = ''
                        if Liste.DQEListeNumero != None:
                            np.DQEListeNumero = Liste.DQEListeNumero
                        else:
                            np.DQEListeNumero = ''
                        if Liste.DQECompte != None:
                            np.DQECompte = Liste.DQECompte
                        else:
                            np.DQECompte = ''
                        resu.append(np)
                        i = i + 1
                        if i == MaxReturnedCandidate:
                            break

            return resu

        @soapmethod(DQEDataAddress, _returns=DQEDataAddress)
        def LookupNumAddress(self, Liste):
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                np = DQEDataAddress()
                if Liste.Pays != None:
                    np.Pays = Liste.Pays
                else:
                    np.Pays = ''
                if Liste.CodePostal != None:
                    np.CodePostal = FormatCP(Liste.CodePostal)
                else:
                    np.CodePostal = ''
                if Liste.Localite != None:
                    np.Localite = Liste.Localite
                else:
                    np.Localite = ''
                if Liste.Voie != None:
                    np.Voie = Liste.Voie
                else:
                    np.Voie = ''
                if Liste.IDVoie != None:
                    np.IDVoie = Liste.IDVoie
                else:
                    np.IDVoie = ''
                if Liste.Complement != None:
                    np.Complement = Liste.Complement
                else:
                    np.Complement = ''
                if Liste.Province != None:
                    np.Province = Liste.Province
                else:
                    np.Province = ''
                if Liste.Numero != None:
                    np.Numero = Liste.Numero
                else:
                    np.Numero = ''
                if Liste.TypeVoie != None:
                    np.TypeVoie = Liste.TypeVoie
                else:
                    np.TypeVoie = ''
                if Liste.DQECle != None:
                    np.DQECle = Liste.DQECle
                else:
                    np.DQECle = ''
                if Liste.DQENbnumero != None:
                    np.DQENbnumero = Liste.DQENbnumero
                else:
                    np.DQENbnumero = ''
                if Liste.DQEListeNumero != None:
                    np.DQEListeNumero = Liste.DQEListeNumero
                else:
                    np.DQEListeNumero = ''
                if Liste.DQEListeNumero != None:
                    np.DQEListeNumero = Liste.DQEListeNumero
                else:
                    np.DQEListeNumero = ''
                if Liste.DQECompte != None:
                    np.DQECompte = Liste.DQECompte
                else:
                    np.DQECompte = ''
                if Liste.IDVoie == '':
                    return np
                va = RechNumVoie([['',
                  '',
                  '',
                  np.Numero,
                  '',
                  Liste.IDVoie]])
                adr = ((np.Numero + ' ' + np.TypeVoie).strip() + ' ' + np.Voie).strip()
                if Liste.Taille != None and int(Liste.Taille) > 20 and int(Liste.Taille) != _Taille_adresse:
                    TailleMax = int(Liste.Taille)
                else:
                    TailleMax = _Taille_adresse
                if len(adr) > TailleMax:
                    n1 = NormaliseTaille(adr, TailleMax).split()
                    if np.Numero != '':
                        n1 = n1[len(np.Numero.split()):]
                    if np.TypeVoie != '':
                        np.TypeVoie = n1[0]
                        n1.pop(0)
                    np.Voie = ' '.join(n1)
                if len(va[0]) > 6:
                    np.DQENbnumero = str(va[0][6])
                    np.DQEListeNumero = va[0][7]
                return np
            else:
                return

        @soapmethod(DQEDataAddress, _returns=DQEDataAddress)
        def LookupNewAddress(self, Liste):
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                if Liste.IDVoie == None or Liste.IDVoie == '':
                    return Liste
                st = str(Liste.IDVoie)
                if _mapnouveaunom.has_key(st):
                    Liste.Voie = decode(adresse[st])
                else:
                    Liste.Voie = ''
            return Liste

        @soapmethod(DQEDataAddress, Integer, _returns=Array(DQEDataAddress))
        def LookupAddress(self, Liste, MaxReturnedCandidate):
            resu = []
            alpha = False
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                if Liste.IDLocalite == '' or Liste.Voie == '':
                    return []
                try:
                    if '-' in Liste.IDLocalite:
                        alpha = True
                        tab_idl = Liste.IDLocalite.split('-')
                        va = []
                        if len(tab_idl) != 0:
                            mx = MaxReturnedCandidate
                            for idl in tab_idl:
                                va1 = recherche_adr(idl, Liste.Voie, mx, False)
                                if va1 != []:
                                    va.extend(va1[:])

                    else:
                        va = recherche_adr(Liste.IDLocalite, Liste.Voie, MaxReturnedCandidate, False)
                except:
                    va = []

                i = 0
                for li in va:
                    if li != None:
                        np = DQEDataAddress()
                        np.Pays = _pays
                        np.CodePostal = FormatCP(li[2])
                        if alpha:
                            np.Localite = Liste.Localite
                        else:
                            np.Localite = Liste.Localite
                        np.Voie = li[0]
                        np.TypeVoie = ''
                        t1 = li[0].split()
                        if len(t1) > 1 and _voie_decoupe.has_key(t1[0]):
                            for j in _voie_decoupe[t1[0]]:
                                if t1[0:len(j)] == j:
                                    np.TypeVoie = ' '.join(j).strip()
                                    for k in range(0, len(j)):
                                        t1.pop(0)

                                    break

                            np.Voie = ' '.join(t1).strip()
                        np.IDLocalite = Liste.IDLocalite
                        np.IDVoie = str(li[1])
                        if Liste.Complement != None:
                            np.Complement = Liste.Complement
                        else:
                            np.Complement = ''
                        if Liste.Province != None:
                            np.Province = Liste.Province
                        else:
                            np.Province = ''
                        if Liste.Numero != None:
                            np.Numero = Liste.Numero
                        else:
                            np.Numero = ''
                        if Liste.DQECle != None:
                            np.DQECle = Liste.DQECle
                        else:
                            np.DQECle = ''
                        if Liste.DQENbnumero != None:
                            np.DQENbnumero = Liste.DQENbnumero
                        else:
                            np.DQENbnumero = ''
                        if Liste.DQEListeNumero != None:
                            np.DQEListeNumero = Liste.DQEListeNumero
                        else:
                            np.DQEListeNumero = ''
                        if Liste.DQEListeNumero != None:
                            np.DQEListeNumero = Liste.DQEListeNumero
                        else:
                            np.DQEListeNumero = ''
                        if Liste.DQECompte != None:
                            np.DQECompte = Liste.DQECompte
                        else:
                            np.DQECompte = ''
                        np.DQENbnumero = ''
                        np.DQEListeNumero = ''
                        resu.append(np)
                        i = i + 1
                        if i == MaxReturnedCandidate:
                            break

            return resu

        @soapmethod(DQEDataAddress, Integer, _returns=Array(DQEDataAddress))
        def LookupSingleLineAddress(self, Liste, MaxReturnedCandidate):
            resu = []
            time1 = time.gmtime()
            _cpt = 0
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                if Liste.Voie == '':
                    return []
                try:
                    comptage_activite(Liste.DQECle, _pays, 'SINGLE')
                    r1 = RechAdresse(Liste.Voie, NBMax=MaxReturnedCandidate, Lookup=True)
                    if not _new_compteur:
                        if r1[0][5] != 0:
                            IncrementeCompte(Liste.DQECle, Liste.DQECompte)
                    if r1 != []:
                        if len(r1[0]) >= 9:
                            i = 0
                            for li in r1:
                                if li != None:
                                    i += 1
                                    np = DQEDataAddress()
                                    np.Pays = _pays
                                    np.CodePostal = FormatCP(li[0][1])
                                    np.Localite = li[1][0]
                                    if len(li[1]) > 2 and li[1][2] != '':
                                        np.Province = li[1][2] + ' - ' + li[1][1]
                                    else:
                                        np.Province = li[1][1]
                                    np.Voie = li[2]
                                    np.Numero = li[3]
                                    np.TypeVoie = li[4]
                                    np.IDLocalite = li[0][0]
                                    np.IDVoie = str(li[5])
                                    if Liste.DQECle != None:
                                        np.DQECle = Liste.DQECle
                                    else:
                                        np.DQECle = ''
                                    np.DQENbnumero = ''
                                    np.DQEListeNumero = ''
                                    np.DQECompte = ''
                                    np.DQECompteur = ''
                                    np.DQECodeErreur = ''
                                    np.Complement = '\t'.join(li[9])
                                    resu.append(np)

                            return resu
                        va = RechNumVoie(r1)
                except:
                    va = []

                i = 0
                time2 = time.gmtime()
                t = time2[3] * 3600 + time2[4] * 60 + time2[5] - (time1[3] * 3600 + time1[4] * 60 + time1[5])
                for li in va:
                    if li != None:
                        np = DQEDataAddress()
                        np.Pays = _pays
                        np.CodePostal = FormatCP(li[0][1])
                        np.Localite = li[1][0]
                        if len(li[1]) > 2 and li[1][2] != '':
                            np.Province = li[1][2] + ' - ' + li[1][1]
                        else:
                            np.Province = li[1][1]
                        np.Voie = li[2]
                        np.Numero = li[3]
                        np.TypeVoie = li[4]
                        np.IDLocalite = li[0][0]
                        np.IDVoie = str(li[5])
                        if np.IDVoie != '0':
                            _cpt += 1
                        if Liste.DQECle != None:
                            np.DQECle = Liste.DQECle
                        else:
                            np.DQECle = ''
                        if Liste.DQENbnumero != None:
                            np.DQENbnumero = Liste.DQENbnumero
                        else:
                            np.DQENbnumero = ''
                        if Liste.DQEListeNumero != None:
                            np.DQEListeNumero = Liste.DQEListeNumero
                        else:
                            np.DQEListeNumero = ''
                        if Liste.DQEListeNumero != None:
                            np.DQEListeNumero = Liste.DQEListeNumero
                        else:
                            np.DQEListeNumero = ''
                        np.DQECompte = str(t)
                        np.DQECompteur = ''
                        np.DQECodeErreur = ''
                        if Liste.Complement != None or li[6] != '':
                            if Liste.Complement != None:
                                np.Complement = Liste.Complement + ' ' + li[6]
                            else:
                                np.Complement = li[6]
                        else:
                            np.Complement = ''
                        np.DQENbnumero = ''
                        np.DQEListeNumero = ''
                        if len(li) > 7:
                            if len(li) > 9:
                                np.DQENbnumero = str(li[8])
                                np.DQEListeNumero = li[9]
                            else:
                                np.DQENbnumero = str(li[7])
                                np.DQEListeNumero = li[8]
                        resu.append(np)
                        i = i + 1
                        if i == MaxReturnedCandidate:
                            break

            return resu

        @soapmethod(DQEDataAddress, Integer, _returns=Array(DQEDataAddress))
        def LookupRnvpLineAddress(self, Liste, MaxReturnedCandidate):
            resu = []
            time1 = time.gmtime()
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                if Liste.Voie == '':
                    return []
                try:
                    comptage_activite(Liste.DQECle, _pays, 'RNVP')
                    ana = AnalyseRN(Liste.Voie)
                    r1 = RechAdresse(ana['rnvp_Adresse'] + ' ' + ana['rnvp_Cp'] + ' ' + ana['rnvp_Ville'], NBMax=MaxReturnedCandidate, Lookup=True, Appel='RNVP', vcedex=ana['rnvp_Cedex'])
                    if not _new_compteur:
                        if r1[0][5] != 0:
                            IncrementeCompte(Liste.DQECle, Liste.DQECompte)
                    if r1 != []:
                        if len(r1[0]) >= 9:
                            i = 0
                            for li in r1:
                                if li != None:
                                    i += 1
                                    np = DQEDataAddress()
                                    np.Pays = _pays
                                    np.CodePostal = FormatCP(li[0][1])
                                    np.Localite = li[1][0]
                                    if len(li[1]) > 2 and li[1][2] != '':
                                        np.Province = li[1][2] + ' - ' + li[1][1]
                                    else:
                                        np.Province = li[1][1]
                                    if len(li[2] + ' ' + li[4] + ' ' + li[3]) > int(Liste.Taille):
                                        li[2] = NormaliseTaille(li[2], int(Liste.Taille) - len(' ' + li[4] + ' ' + li[3]))
                                    np.Voie = li[2]
                                    np.Numero = li[3]
                                    np.TypeVoie = li[4]
                                    np.IDLocalite = li[0][0]
                                    np.IDVoie = str(li[5])
                                    if Liste.DQECle != None:
                                        np.DQECle = Liste.DQECle
                                    else:
                                        np.DQECle = ''
                                    if np.Localite.find('(LD.') > 0:
                                        np1 = np.Localite.split('(')
                                        np.LieuDit = np1[1][4:-1]
                                        if len(np1) > 2:
                                            np.Localite = np1[0][:] + ' (' + np1[2]
                                        else:
                                            np.Localite = np1[0][:]
                                    if _flag_new and _flag_lieuditvoie:
                                        if np.TypeVoie == 'LIEU DIT' or np.TypeVoie == 'LD':
                                            np.LieuDit = np.TypeVoie + ' ' + np.Voie
                                    np.Complement = '\t'.join(li[9])
                                    if ana['rnvp_Adr3'] != '':
                                        np.Complement = NormaliseTaille(ana['rnvp_Adr3'], int(Liste.Taille))
                                        if np.LieuDit is None:
                                            np.LieuDit = ''
                                        if np.LieuDit == '' and ana['rnvp_Adr5'] != '':
                                            np.LieuDit = NormaliseTaille(ana['rnvp_Adr5'], int(Liste.Taille))
                                        elif np.Province == '':
                                            np.Province = NormaliseTaille(ana['rnvp_Adr1'] + ' ' + ana['rnvp_Adr2'], int(Liste.Taille))
                                    else:
                                        np.Province = NormaliseTaille(ana['rnvp_Adr1'] + ' ' + ana['rnvp_Adr2'], int(Liste.Taille))
                                    np.DQENbnumero = ''
                                    np.DQEListeNumero = ''
                                    np.DQECompte = ''
                                    np.DQECompteur = ''
                                    np.DQECodeErreur = ''
                                    resu.append(np)

                            return resu
                        va = RechNumVoie(r1)
                except:
                    va = []

                i = 0
                time2 = time.gmtime()
                t = time2[3] * 3600 + time2[4] * 60 + time2[5] - (time1[3] * 3600 + time1[4] * 60 + time1[5])
                for li in va:
                    if li != None:
                        np = DQEDataAddress()
                        np.Pays = _pays
                        np.CodePostal = FormatCP(li[0][1])
                        np.Localite = li[1][0]
                        if len(li[1]) > 2 and li[1][2] != '':
                            np.Province = li[1][2] + ' - ' + li[1][1]
                        else:
                            np.Province = li[1][1]
                        if len(li[3] + ' ' + li[2] + ' ' + li[4]) > int(Liste.Taille):
                            li[2] = NormaliseTaille(li[2], int(Liste.Taille) - len('  ' + li[4] + li[3]))
                        np.Voie = li[2]
                        np.Numero = li[3]
                        np.TypeVoie = li[4]
                        np.IDLocalite = li[0][0]
                        np.IDVoie = str(li[5])
                        if Liste.DQECle != None:
                            np.DQECle = Liste.DQECle
                        else:
                            np.DQECle = ''
                        if Liste.DQENbnumero != None:
                            np.DQENbnumero = Liste.DQENbnumero
                        else:
                            np.DQENbnumero = ''
                        if Liste.DQEListeNumero != None:
                            np.DQEListeNumero = Liste.DQEListeNumero
                        else:
                            np.DQEListeNumero = ''
                        if Liste.DQEListeNumero != None:
                            np.DQEListeNumero = Liste.DQEListeNumero
                        else:
                            np.DQEListeNumero = ''
                        if np.Localite.find('(LD.') > 0:
                            np1 = np.Localite.split('(')
                            np.LieuDit = np1[1][4:-1]
                            if len(np1) > 2:
                                np.Localite = np1[0][:] + ' (' + np1[2]
                            else:
                                np.Localite = np1[0][:]
                        elif Liste.LieuDit != '':
                            np.LieuDit = Liste.LieuDit
                        if _flag_new and _flag_lieuditvoie:
                            if np.TypeVoie == 'LIEU DIT' or np.TypeVoie == 'LD':
                                np.LieuDit = np.TypeVoie + ' ' + np.Voie
                        np.DQECompte = str(t)
                        np.DQECompteur = ''
                        np.DQECodeErreur = ''
                        if li[6] != '':
                            if np.Complement != None:
                                np.Complement = np.Complement + ' ' + li[6]
                            else:
                                np.Complement = li[6]
                        elif ana['rnvp_Adr3'] == '' and ana['rnvp_Adr1'] == '':
                            np.Complement = ''
                            _ve_1 = 7
                            _ve_2 = 8
                            if len(li) > 7:
                                if len(li) > 9:
                                    _ve_1 = 8
                                    _ve_2 = 9
                            if li[_ve_1] == 1:
                                vc = RechComplement(str(li[5]), str(li[_ve_2]))
                                tpc = 0
                                if vc != []:
                                    for x in vc:
                                        tpc += 1
                                        if len(x) > int(Liste.Taille):
                                            x = NormaliseTaille(x, int(Liste.Taille))
                                        if ana['rnvp_Adr3'].strip() == x.strip():
                                            np.Complement = x
                                            break
                                        if np.Complement != '':
                                            np.Complement = np.Complement + ';' + x
                                        else:
                                            np.Complement = x
                                        if tpc == 20:
                                            break

                            if np.Complement == '':
                                if ana['rnvp_Adr3'] != '':
                                    np.Complement = NormaliseTaille(ana['rnvp_Adr3'], int(Liste.Taille))
                                    if np.LieuDit is None:
                                        np.LieuDit = ''
                                    if np.LieuDit == '' and ana['rnvp_Adr5'] != '':
                                        np.LieuDit = NormaliseTaille(ana['rnvp_Adr5'], int(Liste.Taille))
                                    elif np.LieuDit == '':
                                        np.LieuDit = NormaliseTaille(ana['rnvp_Adr1'] + ' ' + ana['rnvp_Adr2'], int(Liste.Taille))
                                    else:
                                        np.Province = NormaliseTaille(ana['rnvp_Adr1'] + ' ' + ana['rnvp_Adr2'], int(Liste.Taille))
                                else:
                                    np.Province = NormaliseTaille(ana['rnvp_Adr1'] + ' ' + ana['rnvp_Adr2'], int(Liste.Taille))
                            else:
                                np.Province = NormaliseTaille(ana['rnvp_Adr1'] + ' ' + ana['rnvp_Adr2'] + ' ' + ana['rnvp_Adr5'], int(Liste.Taille))
                        else:
                            if np.LieuDit == None:
                                np.LieuDit = ''
                            if ana['rnvp_Adr1'] != '':
                                np.Complement = ana['rnvp_Adr1'] + ' '
                            if ana['rnvp_Adr3'] != '':
                                np.Complement += ana['rnvp_Adr3']
                            np.Complement = NormaliseTaille(np.Complement, int(Liste.Taille))
                        np.DQENbnumero = ''
                        np.DQEListeNumero = ''
                        if len(li) > 7:
                            if len(li) > 9:
                                np.DQENbnumero = str(li[8])
                                np.DQEListeNumero = li[9]
                            else:
                                np.DQENbnumero = str(li[7])
                                np.DQEListeNumero = li[8]
                        resu.append(np)
                        i = i + 1
                        if i == MaxReturnedCandidate:
                            break

            return resu

        @soapmethod(DQEDataAddress, Integer, _returns=Array(DQEDataAddress))
        def LookupVerifLineAddress(self, Liste, MaxReturnedCandidate):
            resu = []
            if Liste.DQECle != None and Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                _nativecharset = 'true'
                if '-' in Liste.Pays:
                    Liste.Pays = Liste.Pays.split('-')[0]
                    _nativecharset = 'false'
                if Liste.Pays not in ('FRA', 'MAR'):
                    vok = False
                    if ExisteCompteInter(Liste.DQECle, Liste.Pays):
                        if _flag_melissa:
                            try:
                                vok = True
                                lic_melissa = _dicomelissa[Liste.DQECle]['id']
                            except:
                                lic_melissa = ''
                                vok = False

                            if lic_melissa == '':
                                vok = False
                    comptage_activite(Liste.DQECle, Liste.Pays, 'ADRINTER')
                    if vok:
                        pays_iso2 = _dicopaysiso[Liste.Pays]
                        vadresse1 = netAdresse(Liste.Voie.strip())
                        vadresse2 = netAdresse(Liste.Complement.strip())
                        vadresse3 = netAdresse(Liste.LieuDit.strip())
                        vcp = Liste.CodePostal
                        vville = Liste.Localite
                        urlServer = ''
                        try:
                            _f = {'id': lic_melissa,
                             'a1': vadresse1,
                             'a2': vadresse2,
                             'a3': vadresse3,
                             'postal': vcp,
                             'loc': vville,
                             'ctry': pays_iso2,
                             'recordopt': int(MaxReturnedCandidate),
                             'format': 'json',
                             'opt': 'OUTPUTSCRIPT:NOCHANGE'}
                            urlServer = 'http://address.melissadata.net/v3/WEB/GlobalAddress/doGlobalAddress?' + urllib.urlencode(_f)
                        except Exception as ex:
                            print str(ex)
                            urlServer = ''

                        if urlServer != '':
                            vok = True
                            try:
                                if vadresse1 + vadresse2 + vadresse3 + vcp + vville != '':
                                    _dm = decoupage_international(vadresse1, vadresse2, vadresse3, vcp, vville)
                                    if _map_inter.has_key(Liste.DQECle + '_' + _dm):
                                        retour2 = str(MiseEnFormeMelissa(Liste.DQECle + '_' + _dm, vadresse1, vadresse2, vadresse3, vcp, vville))
                                        if retour2 == '':
                                            try:
                                                _opu = urllib2.urlopen(urlServer)
                                                retour2 = _opu.read()
                                            except:
                                                vok = False

                                            try:
                                                _opu.close()
                                            except:
                                                pass

                                    else:
                                        try:
                                            _opu = urllib2.urlopen(urlServer)
                                            retour2 = _opu.read()
                                        except:
                                            vok = False

                                        try:
                                            _opu.close()
                                        except:
                                            pass

                                else:
                                    vok = False
                            except:
                                vok = False

                            dico = {}
                            if vok:
                                try:
                                    retour2 = retour2.replace('null', '""')
                                    dico = UserDict.UserDict(eval(retour2))
                                except:
                                    vok = False

                            if vok:
                                if int(dico['TotalRecords']) == 1:
                                    listecode = dico['Records'][0]['Results'].split(',')
                                    tp = {}
                                    if controlecode(listecode):
                                        vcoderreur = 'OK'
                                        vlib = 'Valide'
                                    else:
                                        vcoderreur = 'KO'
                                        vlib = 'Non valide'
                                    vstatut = libelle_statut(listecode)
                                    vcp = str(dico['Records'][0]['PostalCode'])
                                    vville = capital(netAdresse(dico['Records'][0]['Locality'], 2))
                                    vprovince = str(dico['Records'][0]['AdministrativeArea'])
                                    vaddr1 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine1']), str(dico['Records'][0]['PostalCode'])), 2))
                                    vaddr2 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine2']), str(dico['Records'][0]['PostalCode'])), 2))
                                    vaddr3 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine3']), str(dico['Records'][0]['PostalCode'])), 2))
                                    vbox = str(dico['Records'][0]['PostBox'])
                                    vnum = str(dico['Records'][0]['PremisesNumber'])
                                    vpays = str(dico['Records'][0]['CountryISO3166_1_Alpha3'])
                                    vvoie = capital(netAdresse(dico['Records'][0]['ThoroughfareName'], 2))
                                    vtypevoie = capital(netAdresse(dico['Records'][0]['ThoroughfareLeadingType'], 2))
                                    if vtypevoie == '':
                                        vtypevoie = capital(netAdresse(dico['Records'][0]['ThoroughfareTrailingType'], 2))
                                    np = DQEDataAddress()
                                    np.CodePostal = FormatCP(vcp)
                                    np.Pays = vpays
                                    np.DQECodeErreur = vcoderreur
                                    if vaddr3 != '':
                                        np.Voie = vaddr2
                                        np.Complement = vaddr1 + ' ' + vaddr3
                                    elif vaddr2 != '':
                                        np.Voie = vaddr2
                                        np.Complement = vaddr1
                                    else:
                                        np.Voie = vaddr1
                                        np.Complement = ''
                                    np.Localite = vville
                                    np.Numero = vnum
                                    np.Province = vprovince
                                    np.DQECompte = vstatut
                                    np.DQECompteur = vlib
                                    resu.append(np)
                                else:
                                    np = DQEDataAddress()
                                    np.DQECodeErreur = 'KO'
                                    np.DQECompteur = 'Non valide'
                                    resu.append(np)
                            else:
                                np = DQEDataAddress()
                                np.DQECodeErreur = 'KO'
                                np.DQECompteur = 'Non valide'
                                resu.append(np)
                        else:
                            np = DQEDataAddress()
                            np.DQECodeErreur = 'KO'
                            np.DQECompteur = 'Non valide'
                            resu.append(np)
                    else:
                        if _python25:
                            va = common.clientinter._interVerifAdress(Liste.Pays, Liste.Voie, Liste.complement, Liste.province, Liste.CodePostal, Liste.Localite, Liste.DQECle)
                        else:
                            va = common27.clientinter._interVerifAdress(Liste.Pays, Liste.Voie, Liste.complement, Liste.province, Liste.CodePostal, Liste.Localite, Liste.DQECle)
                        tpnb = 0
                        for x in va:
                            if x != None:
                                tpnb += 1
                                np = DQEDataAddress()
                                np.DQECodeErreur = x[0]
                                np.Pays = x[7]
                                np.CodePostal = FormatCP(x[1])
                                np.Voie = x[3]
                                np.Localite = x[2]
                                np.Numero = x[4]
                                np.Complement = x[5]
                                np.Province = x[6]
                                np.DQECle = x[8]
                                np.DQEListeNumero = x[9]
                                resu.append(np)
                                if tpnb == MaxReturnedCandidate:
                                    break

            return resu

        @soapmethod(DQEDataAddress, _returns=Boolean)
        def AddAccount(self, Liste):
            return AjouteCompte(Liste.DQECle, Liste.DQECompte)

        @soapmethod(DQEDataAddress, _returns=Boolean)
        def DeleteAccount(self, Liste):
            return SuppCompte(Liste.DQECle, Liste.DQECompte)

        @soapmethod(DQEDataAddress, _returns=Array(DQEDataAddress))
        def ListAccount(self, Liste):
            resu = []
            if Liste.DQECle != '' and ExisteCompte(Liste.DQECle, Liste.DQECompte):
                for li in ListeCompte(Liste.DQECle, Liste.DQECompte):
                    np = DQEDataAddress()
                    np.DQECle = li[0]
                    np.DQECompte = li[1]
                    np.DQECompteur = str(li[2])
                    resu.append(np)

            return resu

        @soapmethod(String, _returns=String)
        def Echo(self, Chaine):
            if Chaine.find('ReopenDataBase') >= 0:
                if type(Licence.client_ref).__name__ == 'list' or Chaine.find(Licence.client_ref) >= 0:
                    print '>> Chargement des nouvelles bases'
                    chargement(_pays)
                    print '<< Chargement Effectue'
                    return ''
            else:
                if Chaine.find('REINITIALISE_BASEINTERNE_8@99A') >= 0:
                    print '>> Chargement LICENCE'
                    VerifLicence()
                    return 'OK'
                if Chaine.find('CloseDataBase') >= 0:
                    if type(Licence.client_ref).__name__ == 'list' or Chaine.find(Licence.client_ref) >= 0:
                        print '>> Fermeture des bases courantes'
                        fermeture()
                elif Chaine.find('VersionINI') >= 0:
                    if os.path.isfile(_pathinitial + 'updateINI/version.ini'):
                        ff = open(_pathinitial + 'updateINI/version.ini')
                        a = ''
                        for line in ff:
                            a += line

                        ff.close()
                        return a
                elif Chaine.find('DQEParamINI') >= 0:
                    if os.path.isfile(_pathinitial + 'updateINI/dqeparam.ini'):
                        ff = open(_pathinitial + 'updateINI/dqeparam.ini')
                        a = ''
                        for line in ff:
                            a += line.decode('iso-8859-1').encode('utf-8')

                        ff.close()
                        return a
                elif Chaine.find('SaisieAdresseINI') >= 0:
                    if os.path.isfile(_pathinitial + 'updateINI/SaisieAdresse.ini'):
                        ff = open(_pathinitial + 'updateINI/SaisieAdresse.ini')
                        a = ''
                        for line in ff:
                            a += line.decode('iso-8859-1').encode('utf-8')

                        ff.close()
                        return a
                else:
                    print 'test OK'
                    return 'OK:' + Chaine

        def __del__(self):
            print 'fin'


_trans = string.maketrans("\xe9\xe8\xeb\xea\xcb\xc8\xe1\xe0\xe4\xe3\xe2\xc1\xc0\xc4\xc3\xc2\xfd\xff\xdd\xed\xec\xef\xee\xcd\xcc\xcf\xce\xf3\xf2\xf6\xf5\xf4\xd3\xd2\xd6\xd5\xd4\xfa\xf9\xfc\xfb\xda\xd9\xdc\xdb\xf1\xd1\xe7\xc7-.+*/:_`?~@#$%^&=()!=|{}[]'" + '"', 'EEEEEEAAAAAAAAAAYYYIIIIIIIIOOOOOOOOOOUUUUUUUUNNSS                            ')
_trans_t = string.maketrans("\xe9\xe8\xeb\xea\xcb\xc8\xe1\xe0\xe4\xe3\xe2\xc1\xc0\xc4\xc3\xc2\xfd\xff\xdd\xed\xec\xef\xee\xcd\xcc\xcf\xce\xf3\xf2\xf6\xf5\xf4\xd3\xd2\xd6\xd5\xd4\xfa\xf9\xfc\xfb\xda\xd9\xdc\xdb\xf1\xd1\xe7\xc7.+*/:_`?~@#$%^&=()!=|{}[]'" + '"', 'EEEEEEAAAAAAAAAAYYYIIIIIIIIOOOOOOOOOOUUUUUUUUNNSS                           ')

def initialise_structure(repertoire):
    global _flag_structure
    global restructure
    repertoire = repertoire.replace('\\', '/')
    print 'Chargement Structure RNVP'
    if repertoire != '' and repertoire[-1] != '/':
        repertoire = repertoire + '/'
    try:
        if os.path.isfile(repertoire + 'regles.txt'):
            try:
                import restructure
                restructure = __import__('restructure')
                restructure._pays = _pays
                restructure.initialiseRN(repertoire)
                _flag_structure = True
                print '   --> RNVP OK'
            except:
                _flag_structure = False
                print '   --> RNVP KO'
                print ('      * repertoire: ', repertoire)
                write_error('log', 'initialise_structure', 'erreur de chargement')

    except:
        _flag_structure = False
        print '   --> RNVP KO'
        write_error('log', 'chargement structure', 'erreur de chargement')


def AnalyseRN(voie, Descrit = 'voie'):
    try:
        if '|' in voie:
            nb = voie.count('|')
            if nb == 6:
                Descrit = 'L1;L2;L3;voie;BP;CP;VILLE'
            elif nb == 5:
                Descrit = 'L2;L3;voie;BP;CP;VILLE'
            elif nb == 4:
                Descrit = 'L3;voie;BP;CP;VILLE'
            elif nb == 3:
                Descrit = 'L3;voie;CP;VILLE'
            elif nb == 2:
                Descrit = 'voie;CP;VILLE'
            elif nb == 1:
                Descrit = 'voie;CP'
        try:
            _voie = convertUTFISO.convertUTF8(voie)
        except:
            try:
                _voie = convertUTFISO.convertUTF8(voie.decode('utf-8'))
            except:
                pass

        res = restructure.analyse('', '0', '', '0', ';', _voie, DescriptionEntree=Descrit, FileError=_fwrite_error)[1][1]
    except:
        res = {'rnvp_Adr1': '',
         'rnvp_Adr2': '',
         'rnvp_Adr3': '',
         'rnvp_Adr5': '',
         'rnvp_Adresse': voie,
         'rnvp_Cedex': '',
         'rnvp_Cp': '',
         'rnvp_Ville': ''}

    return res


def AnalyseRN_COMPLET(ligne1 = '', ligne2 = '', ligne3 = '', ligne4 = '', ligne5 = '', ligne6 = '', cp = '', ville = ''):
    try:
        if ligne6 != '':
            res = restructure.analyse('', '0;1;2;3;4;5;6', '', '0', '|', ligne1 + '|' + ligne2 + '|' + ligne3 + '|' + ligne4 + '|' + ligne5 + '|' + ligne6, DescriptionEntree='L1;L2;L3;voie;BP;CPVILLE', FileError=_fwrite_error)
        else:
            res = restructure.analyse('', '0;1;2;3;4;5;6', '', '0', '|', ligne1 + '|' + ligne2 + '|' + ligne3 + '|' + ligne4 + '|' + ligne5 + '|' + cp + '|' + ville, DescriptionEntree='L1;L2;L3;voie;BP;CP;VILLE', FileError=_fwrite_error)
    except:
        res = {'rnvp_Adr1': '',
         'rnvp_Adr2': '',
         'rnvp_Adr3': '',
         'rnvp_Adr5': '',
         'rnvp_Adresse': ligne4,
         'rnvp_Cedex': '',
         'rnvp_Cp': '',
         'rnvp_Ville': ''}

    return res


def initialise_vg(repertoire):
    global _abreviation
    global _lenCP
    global EXTspecial
    global _change_mots
    global _articles_debutmot
    global _lenDepartement
    global _regles
    global _PosAdrNumero
    global _identifier
    global _suppdernier
    global _articles
    try:
        repertoire = repertoire.replace('\\', '/')
        if repertoire != '' and repertoire[-1] != '/':
            repertoire = repertoire + '/'
        _suppdernier = []
        print 'Chargement Voies'
        e_lines = open(repertoire + 'voies.txt', 'r')
        _co = True
        for li in e_lines:
            if _co:
                if codecs.BOM_UTF8 in li:
                    li = li.replace(codecs.BOM_UTF8, '')
                _co = False
            if li.strip() != '':
                if li[0] == '-':
                    i1 = li[1:].split('\n')[0]
                    _suppdernier.append([len(i1), i1])
                else:
                    tb = li.split('\n')[0].split(':')
                    tb1 = tb[0].split()
                    _voie_transfo[tb[0]] = tb[1]
                    if _voie_decoupe.has_key(tb1[0]):
                        if tb1 not in _voie_decoupe[tb1[0]]:
                            _voie_decoupe[tb1[0]].append(tb1[:])
                    else:
                        _voie_decoupe[tb1[0]] = [tb1[:]]

        for i in _voie_decoupe.keys():
            t1 = []
            t2 = _voie_decoupe[i][0]
            for j in _voie_decoupe[i][1:]:
                t1.append([len(j), j])

            t1.sort()
            t1.reverse()
            for j in t1:
                t2.append(j[1])

            _voie_decoupe[i] = t2[:]

        if _suppdernier != []:
            _suppdernier.sort()
            _suppdernier.reverse()
            _supp1 = []
            for i in _suppdernier:
                _supp1.append(i[1])

            _suppdernier = _supp1[:]
        print 'Chargement REGLES'
        e_lines.close()
        e_lines = open(repertoire + 'regles.txt', 'r')
        typ = ''
        _regles = {}
        for li in e_lines:
            if li.strip() != '':
                tb = li.split('\n')[0]
                if tb != '' and tb[0] != '#':
                    ts = tb.split(':')
                    t = []
                    for i in ts[1:]:
                        j = i.strip().split('=')
                        t.append([j[0], j[1]])

                    if _regles.has_key(ts[0].strip()):
                        _regles[ts[0].strip()].append(t)
                    else:
                        _regles[ts[0].strip()] = [t]
                elif tb.find('_ZIP=') >= 0:
                    _lenCP = int(tb.split('=')[1])
                elif tb.find('_REGION=') >= 0:
                    _lenDepartement = int(tb.split('=')[1])
                elif tb.find('_POSNUM=') >= 0:
                    _PosAdrNumero = tb.split('=')[1].upper()

        e_lines.close()
        print 'Chargement Change Mots'
        _change_mots = []
        e_lines = open(repertoire + 'change_mots.txt', 'r')
        for li in e_lines:
            if li.strip() != '':
                tb = li.split('\n')[0].split(':')
                _change_mots.append([tb[0], tb[1]])

        e_lines.close()
        print 'Chargement Identifier'
        _identifier = {}
        e_lines = open(repertoire + 'identifier.txt', 'r')
        for li in e_lines:
            if li.strip() != '':
                tb = li.split('\n')[0].split(':')
                _identifier[tb[0]] = tb[1]

        print 'Chargement Articles'
        e_lines.close()
        e_lines = open(repertoire + 'articles.txt', 'r')
        _articles = []
        for li in e_lines:
            if li.strip() != '':
                tb = li.split('\n')[0]
                _articles.append(tb)

        e_lines.close()
        if os.path.isfile(repertoire + 'articles_debutmot.txt'):
            e_lines = open(repertoire + 'articles_debutmot.txt', 'r')
            _articles_debutmot = []
            for li in e_lines:
                if li.strip() != '':
                    tb = li.split('\n')[0]
                    _articles_debutmot.append(tb)

            e_lines.close()
        elif _pays in ('FRA', 'MAR'):
            _articles_debutmot = ['LE',
             'LA',
             'LES',
             'DE',
             'DES',
             'DU',
             'L']
        else:
            _articles_debutmot = []
        _abreviation = []
        if os.path.isfile(repertoire + 'abreviation.txt'):
            print 'Chargement Abreviations'
            e_lines.close()
            e_lines = open(repertoire + 'abreviation.txt', 'r')
            lequel = ''
            for li in e_lines:
                if li.strip() != '':
                    if li[0] == '#':
                        lequel = li[1:].strip()
                    else:
                        tb = li.split('\n')[0].split(':')
                        _abreviation.append(tb)

            e_lines.close()
        if os.path.isfile(repertoire + '/EXTspecial.pyc') or os.path.isfile(repertoire + '/EXTspecial.py'):
            if repertoire not in sys.path:
                tt = repertoire.replace('\\', '/')
                if tt[-1] == '/':
                    tt = tt[0:-1]
                sys.path.insert(0, tt)
            import EXTspecial
        return True
    except:
        print 'Erreur chargement des r\xe8gles'
        write_error('log', 'initialise_vg', 'erreur chargement des regles' + str(e))
        return False


def regles_FRA(v1, v2, v3):
    resu1 = v1[:]
    resu2 = v2[:]
    resu3 = v3[:]
    if '<num><1><num>' in v2:
        cpt = 0
        for i in range(0, len(v1)):
            cpt += v1[i][1]
            if v1[i][0] == '<num>':
                if i + 2 < len(v1):
                    if v1[i + 1][0] == '<1>' and v1[i + 2][0] == '<num>':
                        if v1[i][1] >= 2 and not v3[cpt].isdigit():
                            v1[i + 2][1] = v1[i + 2][1] + 1
                            v1.pop(i + 1)
                            resu = ''
                            for j in v1:
                                resu += j[0]

                            resu1 = v1[:]
                            resu2 = resu[:]
                            break
                        elif not v3[cpt].isdigit() and v3[cpt].upper() not in ('BIS', 'TER', 'QUATER', 'CINCA') and len(v3[cpt]) == 1:
                            resu1.pop(i + 1)
                            resu1[i][1] += 1
                            resu2 = resu2.replace('<num><1><num>', '<num><num>')
                            break

    elif '<num><1><voie>' in v2:
        cpt = 0
        for i in range(0, len(v1)):
            cpt += v1[i][1]
            if v1[i][0] == '<num>':
                if i + 2 < len(v1):
                    if v1[i + 1][0] == '<1>' and v1[i + 2][0] == '<voie>':
                        if v1[i][1] >= 2 and not v3[cpt].isdigit():
                            v1[i + 2][1] = v1[i + 2][1] + 1
                            v1.pop(i + 1)
                            resu = ''
                            for j in v1:
                                resu += j[0]

                            resu1 = v1[:]
                            resu2 = resu[:]
                            break
                        elif not v3[cpt].isdigit() and v3[cpt].upper() not in ('BIS', 'TER', 'QUATER', 'CINCA') and len(v3[cpt]) > 1:
                            resu1.pop(i + 1)
                            resu1[i + 1][1] += 1
                            resu2 = resu2.replace('<num><1><voie>', '<num><voie>')
                            break

    return [resu1, resu2, resu3]


_formatGBR = ['AA99 9AA',
 'AA9A 9AA',
 'AA999AA',
 'AA9A9AA',
 'A99 9AA',
 'A9A 9AA',
 'AA9 9AA',
 'A999AA',
 'A9A9AA',
 'AA99AA',
 'A99AA',
 'A9 9AA']
_formatNLD = ['9999', '9999 AA', '9999AA']
_formatCZE = ['999 99', '99999', '999-99']
_formatPRT = ['9999-999', '9999999', '9999 999']
_formatPOL = ['99 999', '99999', '99-999']
_formatLUX = ['A 9999',
 'A9999',
 'A-9999',
 '9999']
_formatKOR = ['999999',
 '999 999',
 '999-999',
 '999_999']
_formatSWE = ['99999',
 '999 99',
 '999-99',
 '999_99']
_formatBEL = ['9999']
_transcp, _cpnotwanted = getMap('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', 'AAAAAAAAAAAAAAAAAAAAAAAAAA9999999999')

def cherche_lecp(valeur):
    try:
        valeur = str(valeur)
    except:
        pass

    if _pays == 'GBR':
        try:
            chaine = valeur.upper().translate(_transcp, '')
        except:
            chaine = convertUTFISO.convertUTF8Masque(chaine)

        va = ['', valeur]
        for i in _formatGBR:
            j = chaine.find(i)
            if j >= 0:
                va = [fct_majcp(valeur[j:j + len(i)]), valeur[0:j] + '9' * _lenCP + valeur[j + len(i):]]
                break

        return va
    elif _pays == 'NLD':
        try:
            chaine = valeur.upper().translate(_transcp, '')
        except:
            chaine = convertUTFISO.convertUTF8Masque(chaine)

        va = ['', valeur]
        for i in _formatNLD:
            j = (chaine + ' ').find(i + ' ')
            if j >= 0:
                va = [fct_majcp(valeur[j:j + len(i)]), valeur[0:j] + '9' * _lenCP + valeur[j + len(i):]]
                break

        return va
    elif _pays == 'CZE':
        try:
            chaine = valeur.upper().translate(_transcp, '')
        except:
            chaine = convertUTFISO.convertUTF8Masque(chaine)

        va = ['', valeur]
        for i in _formatCZE:
            j = (chaine + ' ').find(i + ' ')
            if j >= 0:
                va = [fct_majcp(valeur[j:j + len(i)]), valeur[0:j] + '9' * _lenCP + valeur[j + len(i):]]
                break

        return va
    elif _pays == 'POL':
        try:
            chaine = valeur.upper().translate(_transcp, '')
        except:
            chaine = convertUTFISO.convertUTF8Masque(chaine)

        va = ['', valeur]
        for i in _formatPOL:
            j = (chaine + ' ').find(i + ' ')
            if j >= 0:
                va = [fct_majcp(valeur[j:j + len(i)]), valeur[0:j] + '9' * _lenCP + valeur[j + len(i):]]
                break

        return va
    elif _pays == 'PRT':
        try:
            chaine = valeur.upper().translate(_transcp, '')
        except:
            chaine = convertUTFISO.convertUTF8Masque(chaine)

        va = ['', valeur]
        for i in _formatPRT:
            j = (chaine + ' ').find(i + ' ')
            if j >= 0:
                va = [fct_majcp(valeur[j:j + len(i)]), valeur[0:j] + '9' * _lenCP + valeur[j + len(i):]]
                break

        return va
    elif _pays == 'LUX':
        try:
            chaine = valeur.upper().translate(_transcp, '')
        except:
            chaine = convertUTFISO.convertUTF8Masque(chaine)

        va = ['', valeur]
        for i in _formatLUX:
            j = (chaine + ' ').find(i + ' ')
            if j >= 0:
                va = [fct_majcp(valeur[j:j + len(i)]), valeur[0:j] + '9' * _lenCP + valeur[j + len(i):]]
                break

        return va
    elif _pays == 'KOR':
        try:
            chaine = valeur.upper().translate(_transcp, '')
        except:
            chaine = convertUTFISO.convertUTF8Masque(chaine)

        va = ['', valeur]
        for i in _formatKOR:
            j = (chaine + ' ').find(i + ' ')
            if j >= 0:
                va = [fct_majcp(valeur[j:j + len(i)]), valeur[0:j] + '9' * _lenCP + valeur[j + len(i):]]
                break

        return va
    elif _pays == 'SWE':
        try:
            chaine = valeur.upper().translate(_transcp, '')
        except:
            chaine = convertUTFISO.convertUTF8Masque(chaine)

        va = ['', valeur]
        for i in _formatSWE:
            j = (chaine + ' ').find(i + ' ')
            if j >= 0:
                va = [fct_majcp(valeur[j:j + len(i)]), valeur[0:j] + '9' * _lenCP + valeur[j + len(i):]]
                break

        return va
    elif _pays == 'BEL':
        try:
            chaine = valeur.upper().translate(_transcp, '')
        except:
            chaine = convertUTFISO.convertUTF8Masque(chaine)

        va = ['', valeur]
        for i in _formatBEL:
            j = (chaine + ' ').find(i + ' ')
            if j >= 0:
                va = [fct_majcp(valeur[j:j + len(i)]), valeur[0:j] + '9' * _lenCP + valeur[j + len(i):]]
                break

        return va
    else:
        return ['', valeur]


def formatage(chaine, merge_voie = True):
    _valtab = ['0',
     '1',
     '2',
     '3',
     '4',
     '5',
     '6',
     '7',
     '8',
     '9',
     '+',
     '-',
     '.',
     '?']

    def nombre(valeur):
        nb = True
        for i in valeur:
            if i not in _valtab:
                nb = False
                break

        return nb

    chaine1 = ''
    moins1 = ''
    _cpmem = ''
    if True:
        for i in chaine:
            if i >= '0' and i <= '9':
                if moins1 != '' and moins1 != ' ' and moins1 not in _valtab:
                    chaine1 = chaine1 + ' '
            elif moins1 in _valtab:
                if i not in _valtab:
                    if i >= 'A' and i <= 'Z':
                        chaine1 = chaine1 + ' #'
                    else:
                        chaine1 = chaine1 + ' '
            moins1 = i
            if i == ',' or i == ';':
                chaine1 = chaine1 + ' , '
            else:
                chaine1 = chaine1 + i

        if '#E' in chaine1:
            ch = chaine1.split()
            chaine2 = ''
            for i in range(0, len(ch)):
                if ch[i] == '#E':
                    chaine2 += 'E'
                else:
                    chaine2 += ' ' + ch[i]

            chaine1 = chaine2 + ' '
        else:
            chaine1 = ' ' + chaine1 + ' '
        chaine1 = ' ' + chaine1 + ' '
    else:
        ch = cherche_lecp(chaine)
        _cpmem = ch[0][:]
        chaine1 = ch[1][:]
        chaine2 = ''
        for i in chaine1:
            if i == ',' or i == ';':
                chaine2 = chaine2 + ' , '
            else:
                chaine2 = chaine2 + i

        chaine1 = chaine2[:]
    for i in _change_mots:
        if chaine1.find(i[0]) >= 0:
            chaine1 = chaine1.replace(i[0], i[1])

    if AnalyseZip != None:
        chaine1 = AnalyseZip.modify(chaine1)
    tb = chaine1.split()
    resu = []
    resu_ch = ''
    mem = ''
    cpt = 1
    voie = False
    prec = ''
    ii = 0
    trouvenum = False
    _fl_cptrouve = False
    for _i0 in range(0, len(tb)):
        i = tb[_i0]
        if i[0] == '#':
            i = i[1:]
            tb[ii] = i[:]
            if len(i) == 1 and mem == '<num>':
                i = prec
        if i == ',' or i == ';':
            if prec != ',' and i != ';':
                if mem != '':
                    if mem == '!=':
                        if cpt == 1:
                            resu.append(['<1>', cpt])
                            resu_ch = resu_ch + '<1>'
                        else:
                            resu.append(['<*>', cpt])
                            resu_ch = resu_ch + '<*>'
                    else:
                        resu.append([mem, cpt])
                        resu_ch = resu_ch + mem
                    cpt = 0
                resu.append(['<virg>', 1])
                resu_ch = resu_ch + '<virg>'
        elif voie:
            if nombre(i) or i[0] == chr(192):
                if len(i) == _lenCP or i[0] == chr(192):
                    resu1 = '<CP>'
                    voie = False
                    if cpt != 0:
                        resu.append([mem, cpt])
                        resu_ch = resu_ch + mem
                    cpt = 1
                    mem = resu1
                    if i[0] == chr(192):
                        i = i[1:-1]
                        tb[_i0] = i
                elif _pays not in ('FRA', 'MAR') and not trouvenum:
                    resu1 = '<num>'
                    voie = False
                    if cpt != 0:
                        resu.append([mem, cpt])
                        resu_ch = resu_ch + mem
                    cpt = 1
                    mem = resu1
                else:
                    cpt = cpt + 1
            else:
                cpt = cpt + 1
        else:
            if i in _voie_transfo:
                resu1 = '<voie>'
                if merge_voie:
                    voie = True
            elif i[0] == chr(192) or nombre(i):
                resu1 = '<num>'
                trouvenum = True
                if i[0] == chr(192) or len(i) == _lenCP or TestCP(i):
                    resu1 = '<CP>'
                    trouvenum = False
                    if i[0] == chr(192):
                        i = i[1:-1]
                        tb[_i0] = i
            elif _identifier.has_key(i):
                resu1 = _identifier[i]
            else:
                resu1 = '!='
            if mem != resu1:
                if mem == '':
                    mem = resu1
                    cpt = 1
                elif mem != '':
                    resu.append([mem, cpt])
                    if mem == '!=':
                        if cpt == 1:
                            mem = '<1>'
                        else:
                            mem = '<*>'
                    resu_ch = resu_ch + mem
                    cpt = 1
                    mem = resu1
                else:
                    cpt = cpt + 1
            else:
                cpt = cpt + 1
        prec = i
        ii += 1

    if mem != '':
        if mem == '!=':
            if cpt == 1:
                mem = '<1>'
            else:
                mem = '<*>'
        if cpt != 0:
            resu.append([mem, cpt])
            resu_ch = resu_ch + mem
        elif resu != [] and resu[-1][0] == '<virg>':
            resu.pop(-1)
            resu_ch = resu_ch[0:-6]
            tb.pop(-1)
    resu1 = []
    resu_ch1 = ''
    for i in resu:
        if i[1] != 0:
            if i[0] == '!=':
                if i[1] == 1:
                    i[0] = '<1>'
                else:
                    i[0] = '<*>'
            resu1.append(i)
            resu_ch1 += i[0]

    if _pays in ('FRA', 'MAR'):
        va = regles_FRA(resu1, resu_ch1, tb)
        resu1 = va[0]
        resu_ch1 = va[1]
        tb = va[2]
    elif _cpmem != '':
        j = 0
        for i in resu1:
            if i[0] == '<CP>':
                tb[j] = _cpmem[:]
                break
            j += i[1]

    if EXTspecial != None:
        resu = EXTspecial.corrige_adresse([resu1, resu_ch1, tb])
        return resu
    else:
        return [resu1, resu_ch1, tb]


def decoupe_voie(forme, liste, transvoie = True):
    resu = ['',
     '',
     '',
     '',
     '',
     '',
     '']
    k1 = 0
    k2 = 0
    nbvoie = 0
    j = 0
    fl_voie = True
    for i in forme:
        if i[1] == 'cp':
            j = 0
        elif i[1] == 'ville':
            j = 1
        elif i[1] == 'voie':
            j = 2
        elif i[1] == 'numero':
            j = 4
        elif i[1] == 'voieville':
            j = 5
        elif i[1] == 'typevoieville':
            j = 5
        elif i[1] == 'complement':
            j = 6
        elif i[1] == '*':
            j = -1
        elif i[1] == 'typevoie':
            j = 3
        elif i[1] == 'voietype':
            j = 23
        comp = ''
        va = ''
        if i[0] != '*':
            while comp != i[0]:
                if liste[0][k1][0] == '!=':
                    if liste[0][k1][1] == 1:
                        comp = comp + '<1>'
                    else:
                        comp = comp + '<*>'
                else:
                    comp = comp + liste[0][k1][0]
                if fl_voie and i[0][0:6] == '<voie>' and liste[0][k1][0] == '<voie>' and (j == _lenDepartement or j == _lenCP):
                    try:
                        nbvoie += liste[0][k1][1]
                        if transvoie:
                            resu[3] = _voie_transfo[liste[2][k2]]
                        else:
                            resu[3] = liste[2][k2]
                        k3 = k2 + liste[0][k1][1] - 2
                        if _voie_decoupe.has_key(resu[3]):
                            a1 = _voie_decoupe[resu[3]]
                            for i_a1 in a1[1:]:
                                if len(i_a1) > 1 and k2 + len(i_a1) <= k3:
                                    if liste[2][k2:k2 + len(i_a1)] == i_a1:
                                        resu[3] = ' '.join(i_a1)
                                        break

                    except:
                        if resu[2] == '':
                            resu[2] = liste[2][k2]
                        else:
                            resu[2] += ' ' + liste[2][k2]

                    r_resu3 = resu[3].split()
                    if len(r_resu3) <= 1:
                        liste[2][k2] = resu[3][:]
                    else:
                        liste[2][k2] = r_resu3[0]
                        nb = 0
                        for jj in r_resu3:
                            if len(liste[2]) > k2 + nb and jj == liste[2][k2 + nb]:
                                nb = nb + 1
                            else:
                                break

                        if nb < len(r_resu3):
                            liste[0][k1][1] += len(r_resu3) - nb
                            for _v in range(1, len(r_resu3)):
                                liste[2].insert(k2 + _v, r_resu3[_v])

                    fl_voie = False
                for s in range(k2, k2 + liste[0][k1][1]):
                    if j == 0:
                        if va != '':
                            va = va + ' ' + liste[2][s].replace('?', '')
                        else:
                            va = liste[2][s].replace('?', '')
                    elif va != '':
                        va = va + ' ' + liste[2][s]
                    else:
                        va = liste[2][s]

                k2 = k2 + liste[0][k1][1]
                k1 = k1 + 1
                if j != -1:
                    if j == 23:
                        i1 = SupprimerDernier(va)
                        if i1 != []:
                            if resu[2] == '':
                                resu[2] = i1[1]
                            else:
                                resu[2] += ' ' + i1[1]
                            resu[3] = i1[0]
                        else:
                            if resu[2] == '':
                                resu[2] = va
                            else:
                                resu[2] += ' ' + va
                            va = ''
                    elif j == 2:
                        if resu[2] == '':
                            resu[j] = va
                        else:
                            resu[j] += ' ' + va
                        va = ''
                    elif j == 5:
                        rs = va.split()
                        if len(rs) > 1:
                            if resu[2] != '':
                                resu[2] += ' '
                            resu[2] += ' '.join(rs[0:-1])
                            resu[1] = rs[-1]
                            va = ''
                        else:
                            resu[j] = va
                            va = ''
                    else:
                        if resu[j] == '':
                            resu[j] = va
                        else:
                            resu[j] += ' ' + va
                        va = ''

    if j == _lenCP:
        if resu[1] == '' and resu[2] == '':
            nb = len(resu[3].split())
            resu[2] = ' '.join(liste[2][nb:-1])
            resu[1] = liste[2][-1]
    if resu[2] != '' and resu[3] != '' and resu[2] == resu[3] and nbvoie == 1:
        resu[3] = ''
    return resu


def ExisteSuppDernier(chaine):
    fl = False
    i1 = len(chaine)
    for i in _suppdernier:
        i2 = len(i)
        if i1 > i2 and chaine[-i2:].upper() == i.upper():
            fl = True
            break

    return fl


def SupprimerDernier(chaine):
    resu = []
    if _suppdernier != []:
        i1 = len(chaine)
        for i in _suppdernier:
            i2 = len(i)
            if i1 > i2 and chaine[-i2:].upper() == i.upper():
                vl = chaine[0:-i2].upper()
                resu = [i.upper(), vl.strip(), vl[-1] == ' ']
                break

    return resu


def triville_new(valeur, table, max):
    tb = valeur.upper()
    resmax = []
    res = []
    resld = []
    rescedex = []
    _mots = valeur.split()
    _taille = len(_mots)
    try:
        if _pays == 'FRA' and _taille > 1:
            if _mots[0] == 'SAINT':
                _mots[0] = 'ST'
            elif _mots[0] == 'SAINTE':
                _mots[0] = 'STE'
    except:
        pass

    _dim = len(valeur)
    _maxdim = round(_dim - _dim * 0.85)
    for i in range(0, len(table)):
        if table[i][0].find('(LD. ') >= 0:
            nbt = table[i][0].split(' (LD. ')
        else:
            nbt = [table[i][0]]
        cpt = 0
        df = ''
        for _v1 in nbt:
            cpt += 1
            v1 = _v1.strip()
            if v1 != '':
                di = editdist.distance(tb, v1[0:_dim])
                if tb[0] != v1[0]:
                    if _flag_comptevoie:
                        _cpv = 0
                        if '-' in table[i][1]:
                            for _k in table[i][1].split('-'):
                                if _comptevoie.has_key(_k):
                                    _cpv += _comptevoie[_k]

                        elif _comptevoie.has_key(table[i][1]):
                            _cpv = _comptevoie[table[i][1]]
                        if _cpv > 9999999:
                            _cpv = 9999999
                        if _cpv > 0:
                            df += '%7d%s' % (9999999 - _cpv, v1)
                        else:
                            df = 'ZZZZ' + (v1 + '       ')[0:7]
                    else:
                        df = 'ZZZZ' + (v1 + '       ')[0:7]
                else:
                    if di < 10:
                        df = '  ' + str(di)
                    elif di < 99:
                        df = ' ' + str(di)
                    else:
                        df = str(di)
                    i1 = v1.find('(')
                    if i1 >= 0:
                        i2 = v1[0:i1 - 1].count(' ')
                    else:
                        i2 = v1.count(' ')
                    df += ' 0'
                    if _flag_comptevoie:
                        _cpv = 0
                        if '-' in table[i][1]:
                            for _k in table[i][1].split('-'):
                                if _comptevoie.has_key(_k):
                                    _cpv += _comptevoie[_k]

                        elif _comptevoie.has_key(table[i][1]):
                            _cpv = _comptevoie[table[i][1]]
                        if _cpv > 9999999:
                            _cpv = 9999999
                        if _cpv > 0:
                            df += '%7d' % (9999999 - _cpv)
                        else:
                            df += (v1 + '       ')[0:7]
                    else:
                        df += v1 + '       '
                    df += table[i][0]
            res.append([df, i])

    res.sort()
    j = 0
    res1 = []
    if max < 50:
        max = 50
    ii = 0
    compte = {}
    compteld = {}
    prem = True
    _fl_cedex = ' CEDEX ' in (valeur + ' ').upper() or ' SP ' in valeur + ' '.upper()
    for i in res[0:len(table)]:
        if ' CEDEX ' in table[i[1]][0] or ' SP ' in table[i[1]][0]:
            v = 999
            ta = 0
        elif _pays == 'FRA' and '(LD. ' in table[i[1]][0]:
            dmotl = table[i[1]][0].split('(LD. ')
            mot1 = dmotl[0].strip()
            mot2 = dmotl[1].split(')')[0].strip()
            v = 99
            if mot1 == valeur:
                v = 0
                ta = 0
            elif mot2 == valeur:
                v = 1
                ta = 0
            elif valeur in mot1:
                if mot1[0:len(valeur)] == valeur:
                    v = 2
                    ta = abs(_taille - (mot1.count(' ') + 1))
                else:
                    v = 3
                    ta = abs(_taille - (mot1.count(' ') + 1))
            elif valeur in mot2:
                if mot2[0:len(valeur)] == valeur:
                    v = 3
                    ta = abs(_taille - (mot2.count(' ') + 1))
                else:
                    v = 4
                    ta = abs(_taille - (mot2.count(' ') + 1))
        else:
            mot0 = table[i[1]][0].split()
            mot1 = ' '.join(mot0[0:-1])
            v = 99
            if mot1 == valeur:
                v = -1
                ta = 0
            elif valeur in mot1:
                if mot1[0:len(valeur)] == valeur:
                    v = 2
                    ta = abs(_taille - (mot1.count(' ') + 1))
                else:
                    v = 3
                    ta = abs(_taille - (mot1.count(' ') + 1))
        if [v, ta, table[i[1]]] not in res1:
            res1.append([v, ta, table[i[1]]])

    res = []
    if res1 != []:
        res1.sort()
        for _res in res1:
            res.append(_res[2])
            max -= 1
            if max == 0:
                break

    return res


def triville(valeur, table, max):
    tb = valeur.upper()
    res = []
    rescedex = []
    espace = ' ' * 40
    _mots = valeur.split()
    _taille = len(_mots)
    _dim = len(valeur)
    _maxdim = round(_dim - _dim * 0.85)
    for i in range(0, len(table)):
        if table[i][0].find('(LD. ') >= 0:
            nbt = table[i][0].split(' (LD. ')
        else:
            nbt = [table[i][0]]
        cpt = 0
        df = ''
        for _v1 in nbt:
            cpt += 1
            v1 = _v1.strip()
            if v1 != '':
                if tb == v1 or tb + ' (' == v1[0:_dim] + ' (':
                    di = 0
                else:
                    di = editdist.distance(tb, v1[0:_dim])
                    if di == 0:
                        if len(v1) != len(tb):
                            di = 1
                    else:
                        di += 1
                if tb[0] != v1[0]:
                    if _flag_comptevoie:
                        _cpv = 0
                        if '-' in table[i][1]:
                            for _k in table[i][1].split('-'):
                                if _comptevoie.has_key(_k):
                                    _cpv += _comptevoie[_k]

                        elif _comptevoie.has_key(table[i][1]):
                            _cpv = _comptevoie[table[i][1]]
                        if _cpv > 9999999:
                            _cpv = 9999999
                        if _cpv > 0:
                            df += '%7d%s' % (9999999 - _cpv, v1)
                        else:
                            df = 'ZZZZ' + (v1 + '       ')[0:7]
                    else:
                        df = 'ZZZZ' + (v1 + '       ')[0:7]
                else:
                    if di < 10:
                        df = '  ' + str(di)
                    elif di < 99:
                        df = ' ' + str(di)
                    else:
                        df = str(di)
                    i1 = v1.find('(')
                    if i1 >= 0:
                        i2 = v1[0:i1 - 1].count(' ')
                    else:
                        i2 = v1.count(' ')
                    df += ' 0'
                    if _flag_comptevoie:
                        _cpv = 0
                        if '-' in table[i][1]:
                            for _k in table[i][1].split('-'):
                                if _comptevoie.has_key(_k):
                                    _cpv += _comptevoie[_k]

                        elif _comptevoie.has_key(table[i][1]):
                            _cpv = _comptevoie[table[i][1]]
                        if _cpv > 9999999:
                            _cpv = 9999999
                        if _cpv > 0:
                            df += '%7d' % (9999999 - _cpv)
                        else:
                            df += (v1 + '       ')[0:7]
                    else:
                        df += '9999999'
                    _df1 = table[i][0].find('(')
                    if _df1 < 0:
                        if table[i][0] == valeur:
                            df += '00'
                        else:
                            df += '10'
                    else:
                        _df1 = table[i][0].index('(')
                        _df2 = table[i][0].index(')')
                        _dp = table[i][0][_df1 + 1:_df2]
                        try:
                            _dp = int(_dp)
                            df += '00'
                        except:
                            df += '11'

                    if _df1 < 0:
                        df1 = table[i][0]
                    else:
                        df1 = (table[i][0][0:_df1] + espace)[0:40] + table[i][0][_df1:]
                    df += df1
            res.append([df, i])

    res.sort()
    j = 0
    res1 = []
    if max < 50:
        max = 50
    ii = 0
    compte = {}
    prem = True
    _fl_cedex = ' CEDEX ' in (valeur + ' ').upper() or ' SP ' in valeur + ' '.upper()
    for i in res[0:max]:
        if table[i[1]] not in res1:
            if not prem and (' CEDEX ' in table[i[1]][0] or ' SP ' in table[i[1]][0]):
                rescedex.append(table[i[1]])
            else:
                if not _fl_cedex:
                    prem = False
                mots1 = table[i[1]][0].split()[0]
                if not compte.has_key(mots1):
                    res1.append(table[i[1]])
                    compte[mots1] = ii + 1
                else:
                    res1.insert(compte[mots1], table[i[1]])
                    compte[mots1] += 1
                ii += 1

    if rescedex != []:
        rescedex.sort()
        res1.extend(rescedex)
    return res1


def recherche_villeparnomexact(ville_av, dep = '', avec_cedexa = 'N'):
    tb_av1 = traduitMAJUTF8(ville_av)
    tb_av = tb_av1.split()
    resu2 = []
    resu = []
    if mapville.has_key(tb_av1):
        resu2 = mapville[tb_av1]
    else:
        tb_av2 = tb_av[:]
        tb_av2.sort()
        tb_av2 = ' '.join(tb_av2)
        if mapville.has_key(tb_av2):
            resu2 = mapville[tb_av2]
    if resu2 != []:
        resu1 = []
        for _resu in resu2:
            _resu[0] = decode(_resu[0])
            di = distanceVille(tb_av1, _resu[0])[0]
            if ' CEDEX ' in ' ' + _resu[0] + ' ':
                di2 = 0
            else:
                di2 = 1
            resu1.append([di, di2, _resu])

        resu1.sort()
        resu1.reverse()
        for i in resu1:
            resu.append(i[2])

        if resu != []:
            return resu
    ville_av1 = ''
    for i in tb_av:
        if i not in _articles:
            if ville_av1 == '':
                ville_av1 = i
            else:
                ville_av1 += ' ' + i

    if _pays == 'FRA':
        if ville_av1[0:6] == 'SAINT ':
            ville_av1 = ville_av1.replace('SAINT ', 'ST ', 1).replace(' SAINT ', ' ST ').replace(' SAINTE ', ' STE ')
        if ville_av1[0:7] == 'SAINTE ':
            ville_av1 = ville_av1.replace('SAINTE ', 'STE ', 1).replace(' SAINT ', ' ST ').replace(' SAINTE ', ' STE ')
    resu = []
    if mapville.has_key(ville_av1):
        resu1 = []
        for _resu in mapville[ville_av1]:
            _resu[0] = decode(_resu[0])
            di = distanceVille(ville_av1, _resu[0])[0]
            if ' CEDEX ' in ' ' + _resu[0] + ' ':
                di2 = 0
            else:
                di2 = 1
            resu1.append([di, di2, _resu])

        resu1.sort()
        resu1.reverse()
        for i in resu1:
            resu.append(i[2])

    return resu


def recherche_villeparnom(ville_av, cpverif = '', flag_triville = True, flag_insuffisant = False, cedex = True, exact = False, nbmax = 60):
    global _tps_max
    time1 = time.gmtime()
    time1 = time1[3] * 3600 + time1[4] * 60 + time1[5]
    tb_av1 = traduitMAJUTF8(ville_av).strip()
    tb_av = tb_av1.split()
    ville_av1 = ''
    for i in tb_av:
        if i not in _articles:
            if ville_av1 == '':
                ville_av1 = i
            else:
                ville_av1 += ' ' + i

    if _pays == 'FRA':
        if ville_av1[0:6] == 'SAINT ':
            ville_av1 = ville_av1.replace('SAINT ', 'ST ', 1).replace(' SAINT ', ' ST ').replace(' SAINTE ', ' STE ')
        if ville_av1[0:7] == 'SAINTE ':
            ville_av1 = ville_av1.replace('SAINTE ', 'STE ', 1).replace(' SAINT ', ' ST ').replace(' SAINTE ', ' STE ')
    ville_av3 = ''
    if len(tb_av) > 1:
        tb_av.sort()
        ville_av3 = ' '.join(tb_av)
        if ville_av3 == ville_av1 or ville_av3 == tb_av1:
            ville_av3 = ''
    ville_av2 = ville_av1[:]
    if _flag_new and flag_insuffisant:
        if ville_av1 == '' and ville_av.strip() != '':
            return [0]
    _trouve = []
    resu = []
    flag_mot = False
    if cedex and ' CEDEX ' in ville_av1 + ' ' and cpverif != '':
        ville_av1 = ville_av1[0:ville_av1.index(' CEDEX')]
    if mapville.has_key(ville_av1):
        _trouve.append(ville_av1)
    elif mapville.has_key(tb_av1):
        _trouve.append(tb_av1)
        ville_av1 = tb_av1
    elif ville_av3 != '' and mapville.has_key(ville_av3):
        _trouve.append(ville_av3)
    elif ville_av1 != '':
        if mapville.has_key(ville_av1[0:-1]):
            _trouve.append(ville_av1[0:-1])
        elif mapville3.has_key(ville_av1):
            flag_mot = True
    if not exact:
        ville = PhonexVille(ville_av1)
        if len(ville_av1) <= 1:
            return resu
    else:
        ville = [ville_av1]
    ta = len(cpverif)
    cont_ici = False
    _dep = -1
    if len(ville) > 1:
        if _pays not in ('ARE', 'SAU'):
            for i in ville:
                if mapville.has_key(i[0]):
                    if i[0] not in _trouve:
                        _trouve.append(i[0])

    elif ville_av1 != '' and ville[-1] != '' and ville_av1 != ville[-1][0] and mapville.has_key(ville[-1][0]):
        if ville[-1][0] not in _trouve:
            _trouve.append(ville[-1][0])
    if flag_mot:
        resu1 = mapville3[ville_av1]
        for i in resu1:
            if cpverif == '' or i[2][0:ta] == cpverif:
                i[0] = decode(i[0])
                if i not in resu:
                    if cedex or ' CEDEX ' not in i[0] + ' ':
                        resu.append(i[:])

    elif _trouve != []:
        for uu in _trouve:
            resu1 = mapville[uu]
            for i in resu1:
                if _pays != 'FRA':
                    if i[3] == '' and i[4] != '':
                        i[3] = i[4]
                        i[4] = ''
                if cpverif == '' or i[2][0:ta] == cpverif:
                    i[0] = decode(i[0])
                    if len(i) >= 5 and i[0] == i[4]:
                        i[4] = ''
                    if i not in resu:
                        if cedex or ' CEDEX ' not in i[0] + ' ':
                            resu.append(i[:])

            if len(resu) < 20 and not exact:
                tph = Phonems(ville_av1)
                resu1 = []
                if mapville3.has_key(tph):
                    resu1 = mapville3[tph]
                elif len(tph) > 3 and mapville3.has_key(tph[0:-1]):
                    resu1 = mapville3[tph[0:-1]]
                if resu1 != []:
                    for i in resu1:
                        if cpverif == '' or i[2][0:ta] == cpverif:
                            i[0] = decode(i[0])
                            if i not in resu:
                                if cedex or ' CEDEX ' not in i[0] + ' ':
                                    resu.append(i[:])

        time2 = time.gmtime()
        t = time2[0] * 3600 + time2[1] * 60 + time2[2] - time1
        if flag_triville and resu != []:
            resu = triville(ville_av, resu, nbmax)
    elif not exact:
        tph = Phonems(ville_av1)
        resu1 = []
        if mapville3.has_key(tph):
            resu1 = mapville3[tph]
        elif len(tph) > 3 and mapville3.has_key(tph[0:-1]):
            resu1 = mapville3[tph[0:-1]]
        if resu1 != []:
            for i in resu1:
                if cpverif == '' or i[2][0:ta] == cpverif:
                    i[0] = decode(i[0])
                    if i not in resu:
                        if cedex or ' CEDEX ' not in i[0] + ' ':
                            resu.append(i[:])

        if resu == [] and ' ' not in ville_av1:
            if mapville3.has_key(ville_av1):
                resu1 = mapville3[ville_av1]
        ville = QSoundex.getKey(PhonexCdrVilleListe(ville_av1))
        teste1 = 0
        vdist = len(ville_av1) - int(len(ville_av1) * 0.9)
        if mapville2.has_key(ville[-1]):
            resu2 = mapville2[ville[-1]]
            if len(resu2) < 100:
                while True:
                    for ii in resu2:
                        nv_ville = decode(ii)
                        time2 = time.gmtime()
                        t = time2[3] * 3600 + time2[4] * 60 + time2[5] - time1
                        if t >= _tps_max:
                            break
                        if distance(ville_av1, nv_ville) <= vdist + teste1:
                            PhCdr = PhonexCdrVilleListe(nv_ville).split()
                            resu1 = []
                            for ii1 in PhCdr:
                                if mapville.has_key(ii1):
                                    mv = mapville[ii1]
                                    if resu1 == []:
                                        resu1 = mv[:]
                                    else:
                                        for mvv in mv:
                                            if mvv not in resu1:
                                                resu1.append(mvv)

                            for i in resu1:
                                if cpverif == '' or i[2][0:ta] == cpverif:
                                    i[0] = decode(i[0])
                                    if i not in resu:
                                        if distance(ville_av, i[0]) <= vdist + teste1:
                                            if cedex or ' CEDEX ' not in i[0] + ' ':
                                                resu.append(i[:])

                    if resu == []:
                        if teste1 < 2:
                            teste1 = teste1 + 1
                        else:
                            break
                    else:
                        break

    ll = len(ville_av1)
    if cpverif != '' and len(cpverif) == 5:
        if cpverif in cp_234:
            for _r in cp_234[cpverif]:
                i = _r[:]
                i[0] = decode(i[0])
                if ville_av1 == i[0][0:ll] or ville_av2 == i[0]:
                    if len(i) <= 3:
                        i.insert(2, cpverif)
                    if i not in resu:
                        resu.append(i)

    for i in range(0, len(resu)):
        if len(resu[i]) == 4:
            resu[i].append('')

    return resu


def RechercheVille(ville, fl = False):
    va = recherche_villeparnom(ville, '', flag_triville=False, flag_insuffisant=fl)
    if va != [] and va != [0]:
        if (ville + ' ')[0] == ' ':
            v1 = ville.strip()
        else:
            v1 = ville
        if len(v1) > 1:
            if v1[0] >= '0' and v1[0] <= '9':
                va = []
    if va != [] and va != [0]:
        if True:
            resu = {}
            taille = len(ville.split())
            _min = 999
            _max = 0
            for _va in va:
                _dep = _va[1][0:_lenDepartement]
                _va1 = [_va[0],
                 _va[1],
                 _va[3],
                 _va[4],
                 _va[2]]
                d1 = len(_va[0].split())
                if d1 < _min:
                    _min = d1
                if d1 > _max:
                    _max = d1
                if d1 in resu:
                    if _va[0] + '-' + _dep in resu[d1]:
                        if _va1 not in resu[d1][_va[0] + '-' + _dep]:
                            resu[d1][_va[0] + '-' + _dep].append(_va1)
                    else:
                        resu[d1][_va[0] + '-' + _dep] = [_va1]
                else:
                    resu[d1] = {_va[0] + '-' + _dep: [_va1]}

            resu0 = []
            resu1 = []
            for i in range(_min, _max + 1):
                if i in resu:
                    for _li in resu[i].keys():
                        liste = resu[i][_li]
                        vm = []
                        if len(liste) > 1:
                            vm = liste[0]
                            tr = [[vm[0], vm[4]]]
                            vm[0] += ' (' + vm[1][0:_lenDepartement] + ')'
                            for _li2 in liste[1:]:
                                if [_li2[1], _li2[4]] not in tr:
                                    vm[1] += '-' + _li2[1]
                                    vm[2] += '-' + _li2[2]
                                    vm[4] += '-' + _li2[4]
                                    tr.append(_li2[1])

                        else:
                            vm = liste[0]
                        if vm != []:
                            if i == taille:
                                resu0.append(vm)
                            else:
                                resu1.append(vm)

            resuf = resu0 + resu1
            resuf2 = []
            for _resuf in resuf:
                if '-' in _resuf[1]:
                    _va = _resuf[1].split('-')
                    _flag_va = True
                    mem = _va[0]
                    for i in _va[1:]:
                        if mem != i:
                            _flag_va = False
                            break

                    if _flag_va:
                        _nom = _resuf[0].replace(' (' + _va[0][0:_lenDepartement] + ')', '')
                        _prov = _resuf[2].split('-')
                        _int = _resuf[3]
                        _cp = _resuf[4].split('-')
                        for i in range(0, len(_va)):
                            _r = [_nom,
                             _va[i],
                             _prov[i],
                             _int,
                             _cp[i]]
                            if _r not in resuf2:
                                resuf2.append(_r)

                    else:
                        resuf2.append(_resuf)
                else:
                    resuf2.append(_resuf)

            va = triville(ville, resuf2, _tps_max)
            if _flag_bodacc:
                for i in range(0, len(va)):
                    va[i][0] = NormaliseBodacc(va[i][0])

    return va


def recup_cpcedex(ville, cp_recup, cp_base):
    if ' CEDEX ' in ville + ' ':
        if cp_base != '':
            return cp_base
    return cp_recup


def recup_cp(codecp, codeinsee, ville = ''):
    try:
        if ville != '' and ' CEDEX ' in ville + ' ':
            return ville
        tb = cp_234[codecp]
        if len(tb) == 1:
            v1 = decode(tb[0][0])
            if len(tb[0]) == 5:
                v1 += tb[0][4]
            if _flag_bodacc:
                v1 = NormaliseBodacc(v1)
            return v1
        for i in tb:
            if i[1] == codeinsee:
                v1 = decode(i[0])
                if len(i) == 5:
                    v1 += i[4]
                if _flag_bodacc:
                    v1 = NormaliseBodacc(v1)
                return v1

        v1 = decode(tb[0][0])
        if len(tb[0]) == 5:
            v1 += tb[0][4]
        if _flag_bodacc:
            v1 = NormaliseBodacc(v1)
    except:
        v1 = codecp

    return v1


def recup_tout_cp(codecp, codeinsee):
    try:
        tb = cp_234[codecp]
        if len(tb) == 1:
            v1 = decode(tb[0][0])
            if _flag_bodacc:
                v1 = NormaliseBodacc(v1)
            return [v1, tb[0][2], tb[0][3]]
        codeinsee2 = ''
        resu2 = []
        if '$' in codeinsee:
            codeinsee2 = codeinsee[0:codeinsee.index('$')]
        for i in tb:
            if i[1] == codeinsee:
                v1 = decode(i[0])
                if _flag_bodacc:
                    v1 = NormaliseBodacc(v1)
                return [v1, i[2], i[3]]
            if codeinsee2 != '' and i[1] == codeinsee2 and resu2 == []:
                v1 = decode(i[0])
                if _flag_bodacc:
                    v1 = NormaliseBodacc(v1)
                resu2 = [v1, i[2], i[3]]

        if resu2 != []:
            return resu2
        v1 = decode(tb[0][0])
        if _flag_bodacc:
            v1 = NormaliseBodacc(v1)
    except:
        v1 = codecp
        tb = [[v1,
          codeinsee,
          '*',
          v1]]

    return [v1, tb[0][2], tb[0][3]]


def RechercheGeoLoc(IDVoie, numero):
    coordonnee = []
    IDVoie = str(IDVoie)
    _tr = ''
    if _pays == 'FRA':
        if len(IDVoie) < 8:
            IDVoie = '00000000'[0:8 - len(IDVoie)] + IDVoie
    if _mapgeocodage.has_key(IDVoie):
        c = _mapgeocodage[IDVoie]
        if numero == '' or c[0] == '':
            if '0cv' in c:
                coordonnee = c[c.index('0cv') + 1][:]
                _tr = '0cv'
            else:
                coordonnee = c[1][:]
                _tr = c[0]
        elif numero in c:
            coordonnee = c[c.index(numero) + 1][:]
            _tr = c[c.index(numero)]
        elif ' ' in numero and numero.replace(' ', '') in c:
            nums = numero.replace(' ', '')
            coordonnee = c[c.index(nums) + 1][:]
            _tr = c[c.index(nums)]
        elif c != []:
            try:
                num1 = int(numero.split()[0])
            except:
                num1 = 0

            if num1 == 0:
                coordonnee = c[1][:]
                _tr = c[0]
            else:
                il = 0
                while il < len(c):
                    try:
                        num2 = int(c[il].split()[0])
                    except:
                        num2 = 0

                    if num2 >= num1:
                        coordonnee = c[il + 1][:]
                        _tr = c[il]
                        break
                    il += 2
                else:
                    coordonnee = c[-1][:]
                    _tr = c[-2]

    if coordonnee == []:
        coordonnee = ['0.00', '0.00', '']
    elif len(coordonnee) == 2:
        coordonnee.append('')
    elif coordonnee[2] == '':
        coordonnee[2] = '1'
    coordonnee.append(IDVoie + '_' + _tr)
    cpt = 0
    for v in coordonnee[0:2]:
        l = len(v)
        if l > 8:
            if '.' in v:
                i = l - v.index('.')
                if i > 8:
                    coordonnee[cpt] = '%3.8f' % float(v)
        cpt += 1

    return coordonnee


def distanceVilleOld(ref_init, b_init):

    def distance1(ref, b):
        resu = 0
        resu2 = 0
        try:
            try:
                b1 = b.encode('utf-8')
                b = b1
            except:
                pass

            ref = ref.translate(maps, notwanted)
            b = b.translate(maps, notwanted)
            if ref == b or ref.replace(' ', '') == b.replace(' ', ''):
                resu = 1.0
                resu2 = 1.0
            else:
                reflist = ref.split()
                blist = b.split()
                ref_final, b_final = ['', '']
                for refw in reflist[0:-1]:
                    if not refw in _articles:
                        ref_final += ' ' + refw

                ref_final += ' ' + reflist[-1]
                ref_final = ref_final.strip()
                for bw in blist[0:-1]:
                    if not bw in _articles:
                        b_final += ' ' + bw

                b_final += ' ' + blist[-1]
                b_final = b_final.strip()
                if ref_final == b_final or ref_final.replace(' ', '') == b_final.replace(' ', ''):
                    resu = 1.0
                    resu2 = 1.0
                else:
                    dist = editdist.distance(ref_final, b_final)
                    if dist == 0:
                        resu = 100.0
                    else:
                        mx = min(len(ref_final), len(b_final))
                        if mx != 0:
                            resu = 1.0 - dist * 1.0 / mx
                            if resu < 0.95:
                                mt1 = ref_final.split()[0]
                                mt2 = b_final.split()[0]
                                if mt1 == mt2:
                                    resu2 = 100
                                lref = ref_final.split()
                                lb = b_final.split()
                                dist = -1
                                if len(lref) == len(lb):
                                    dist = 0
                                    for i in range(0, len(lref)):
                                        mn = min(len(lref[i]), len(lb[i]))
                                        if lref[i][0:mn] == lb[i][0:mn]:
                                            dist += 0
                                        else:
                                            dist += editdist.distance(lref[i], lb[i])

                                if dist >= 0:
                                    resu1 = 1.0 - dist * 1.0 / mx
                                    if resu1 > resu:
                                        resu = resu1
        finally:
            if resu < 0:
                return [0, resu2]
            return [resu, resu2]

    if '(LD.' in b_init:
        _i = b_init.index('(LD.')
        v1 = distance1(ref_init, b_init[0:_i - 1])
        if v1[0] == 1.0:
            return v1
        else:
            v2 = distance1(ref_init, b_init[_i + 5:-1])
            if v1[0] < v2[0]:
                return v2
            return v1
    elif '(LD.' in ref_init:
        _i = ref_init.index('(LD.')
        v1 = distance1(ref_init[0:_i - 1], b_init)
        if v1[0] == 1.0:
            return v1
        else:
            v2 = distance1(ref_init[_i + 5:-1], b_init)
            if v1[0] < v2[0]:
                return v2
            return v1
    else:
        return distance1(ref_init, b_init)


def distanceVille(ref_init, b_init):

    def decoupecdx(valeur):
        va = valeur.split()
        dp = -1
        if va[-1].isdigit() and len(va) > 1:
            dp = -2
        if va[dp] in ('C', 'CE', 'CED', 'CEDE', 'CEDEX', 'CX', 'CDX'):
            return ' '.join(va[0:dp])
        else:
            return valeur

    def distance1(ref, b):
        resu = 0
        resu2 = 0
        try:
            try:
                b1 = b.encode('utf-8')
                b = b1
            except:
                pass

            ref = ref.translate(maps, notwanted)
            b = b.translate(maps, notwanted)
            if ref != '' and b != '' and (' CEDEX' in ref or ' CEDEX' in b):
                ref = decoupecdx(ref)
                b = decoupecdx(b)
            if ref == b or ref.replace(' ', '') == b.replace(' ', ''):
                resu = 1.0
                resu2 = 1.0
            else:
                reflist = ref.split()
                blist = b.split()
                ref_final, b_final = ['', '']
                for refw in reflist[0:-1]:
                    if not refw in _articles:
                        ref_final += ' ' + refw

                ref_final += ' ' + reflist[-1]
                ref_final = ref_final.strip()
                for bw in blist[0:-1]:
                    if not bw in _articles:
                        b_final += ' ' + bw

                b_final += ' ' + blist[-1]
                b_final = b_final.strip()
                if ref_final == b_final or ref_final.replace(' ', '') == b_final.replace(' ', ''):
                    resu = 1.0
                    resu2 = 1.0
                else:
                    dist = editdist.distance(ref_final, b_final)
                    if dist == 0:
                        resu = 100.0
                    else:
                        mx = min(len(ref_final), len(b_final))
                        if mx != 0:
                            resu = 1.0 - dist * 1.0 / mx
                            if resu < 0.95:
                                mt1 = ref_final.split()[0]
                                mt2 = b_final.split()[0]
                                if mt1 == mt2:
                                    resu2 = 100
                                lref = ref_final.split()
                                lb = b_final.split()
                                dist = -1
                                if len(lref) == len(lb):
                                    dist = 0
                                    for i in range(0, len(lref)):
                                        mn = min(len(lref[i]), len(lb[i]))
                                        dist += editdist.distance(lref[i], lb[i])

                                    if dist == 1 and mx > 3 and ref_final[0:mx - 1] == b_final[0:mx - 1]:
                                        resu = 0.9
                                        dist = -1
                                if dist >= 0:
                                    resu1 = 1.0 - dist * 1.0 / mx
                                    if resu1 > resu:
                                        resu = resu1
        finally:
            if resu < 0:
                return [0, resu2]
            return [resu, resu2]

    if '(LD.' in b_init:
        if '(LD.' in ref_init:
            _i = b_init.index('(LD.')
            _j = ref_init.index('(LD.')
            v1 = distance1(ref_init[0:_j - 1], b_init[0:_i - 1])
            return v1
        _i = b_init.index('(LD.')
        v1 = distance1(ref_init, b_init[0:_i - 1])
        if v1[0] == 1.0:
            return v1
        v2 = distance1(ref_init, b_init[_i + 5:-1])
        if v1[0] < v2[0]:
            return v2
        else:
            return v1
    elif '(LD.' in ref_init:
        _i = ref_init.index('(LD.')
        v1 = distance1(ref_init[0:_i - 1], b_init)
        if v1[1] == 1.0:
            return v1
        elif v1[1] == 100:
            v1[0] = 1.0
            return v1
        v2 = distance1(ref_init[_i + 5:-1], b_init)
        if v2[1] == 100:
            v2[0] = 1.0
        if b_init != '' and b_init[0].isdigit():
            if ref_init[_i + 5:-1] in b_init:
                v2[1] == 100
                v2[0] = 1.0
        if v1[0] < v2[0]:
            return v2
        else:
            return v1
    else:
        if b_init != '' and b_init[0].isdigit():
            if ref_init in b_init:
                return [1.0, 100]
        return distance1(ref_init, b_init)


def cedex(ville):
    vi = ville[:]
    if ville.find('CEDEX') >= 0:
        tb = ville.split()
        if 'CEDEX' in tb:
            a = tb.index('CEDEX')
            if a > 0:
                vi = ' '.join(tb[0:a]).strip()
            else:
                vi = ' '.join(tb[1:]).strip()
    return vi


def recherche_ligne2(voie):

    def Phonems(chaine):
        r = chaine.replace('Y', 'I')
        r = re.sub('([^PCS]|^)H', '\\1', r)
        r = r.replace('PH', 'F')
        r = re.sub('(.*)(IS|ES|ET|PS|TS|[STX])$', '\\1', r)
        r = re.sub('[AE]I[NM]([AEIOU])', 'EN\\1', r)
        r = r.replace('EAU', 'O')
        r = r.replace('OUA', '2')
        r = r.replace('EIN', '4')
        r = r.replace('EIM', '4')
        r = r.replace('AIM', '4')
        r = r.replace('AY', 'E')
        r = r.replace('RGM', 'RM')
        r = r.replace('OE', 'E')
        r = r.replace('EU', 'E')
        r = r.replace('\xe9', 'E')
        r = r.replace('\xe8', 'E')
        r = r.replace('\xea', ' E')
        r = r.replace('\xeb', 'E')
        r = r.replace('AI', 'E')
        r = r.replace('EI', 'E')
        r = r.replace('ER', 'YR')
        r = r.replace('ESS', 'YS')
        i1 = r.find('ES')
        if i1 != -1:
            if i1 + 2 >= len(r) or r[i1 + 2] == ' ':
                r = r.replace('ES', 'E')
        r = r.replace('ET', 'YT')
        r = r.replace('EZ', 'YZ')
        r = re.sub('AN([^AEIOU1234])', '1\\1', r)
        r = re.sub('ON([^AEIOU1234])', '1\\1', r)
        r = re.sub('AM([^AEIOU1234])', '1\\1', r)
        r = re.sub('EN([^AEIOU1234])', '1\\1', r)
        r = re.sub('EM([^AEIOU1234])', '1\\1', r)
        r = re.sub('IN([^AEIOU1234])', '4\\1', r)
        r = re.sub('([AEIOUY1234])S([AEIOUY1234])', '\\1Z\\2', r)
        r = r.replace('UN', '4')
        r = r.replace('AU', 'O')
        r = r.replace('OI', '2')
        r = r.replace('OY', '2')
        r = r.replace('OU', '3')
        r = r.replace('CH', '5')
        r = r.replace('SCH', '5')
        r = r.replace('SH', '5')
        r = r.replace('SS', 'S')
        r = r.replace('SC', 'S')
        r = re.sub('C([AOU])', 'K\\1', r)
        r = re.sub('C([EIY])', 'S\\1', r)
        r = r.replace('C', 'K')
        r = r.replace('Q', 'K')
        r = r.replace('QU', 'K')
        return r

    def suppdouble(mot):
        k = ''
        j = ''
        for i in mot:
            if i != j:
                k += i
            j = i

        return k

    voie = suppdouble(voie)
    mt1 = voie.upper()
    mt2 = Phonems(mt1)
    resu = []
    if mt1 != '':
        if _mapcherchevoie.has_key(mt1):
            resu.append(_mapcherchevoie[mt1])
        if mt2 != mt1:
            if _mapcherchevoie.has_key(mt2):
                if resu != []:
                    t1 = _mapcherchevoie[mt2]
                    for i in t1:
                        if i not in resu:
                            resu.append(i)

                else:
                    resu.append(_mapcherchevoie[mt2])
    if resu == []:
        tb = mt1.split()
        if len(tb) > 1:
            mt1 = tb[-1].upper()
            mt2 = Phonems(mt1)
            resu = []
            if mt1 != '':
                if _mapcherchevoie.has_key(mt1):
                    resu.append(_mapcherchevoie[mt1])
                if mt2 != mt1:
                    if _mapcherchevoie.has_key(mt2):
                        if resu != []:
                            t1 = _mapcherchevoie[mt2]
                            for i in t1:
                                if i not in resu:
                                    resu.append(i)

                        else:
                            resu.append(_mapcherchevoie[mt2])
    return resu


def testdistance(lvaleur, compare):
    fl = True
    for i in compare.split():
        for j in lvaleur:
            if j not in i:
                fl = False
                break

    return fl


def testdistance2(lvaleur, compare):
    fl = True
    lvaleur1 = []
    compare1 = []
    j = 1
    for i in lvaleur:
        lvaleur1.append([i, j])
        j += 1

    lvaleur1.sort()
    j = 1
    for i in compare.split():
        compare1.append([i, j])
        j += 1

    compare1.sort()
    poids = 0
    poidsr = 0
    moyenne = 0
    for vc in compare1:
        va = 0
        vp = -1
        moyenne += vc[1]
        for j in range(0, len(lvaleur1)):
            if lvaleur1[j][0] == vc[0]:
                va = 1
                vp = j
                break
            else:
                d1 = editdist.distance(vc[0], lvaleur1[j][0])
                l1 = min(len(vc[0]), len(lvaleur1[j][0]))
                l2 = max(len(vc[0]), len(lvaleur1[j][0]))
                v1 = d1 * 1.0 / l1
                if v1 <= 0.18:
                    va = l1 * 1.0 / l2
                    vp = j
                    break

        if vp != -1:
            lvaleur1.pop(vp)
            poids = poids + vc[1] * 1.0 * (1 - va)
        else:
            poidsr += vc[1] * 1.0

    for i in lvaleur1:
        poidsr += i[1] * 1.0
        moyenne += i[1]

    resu_final = poids * 1.0 / moyenne + poidsr * 1.0 / moyenne
    return resu_final


def testVille(valeurs, ville):
    if ville == '':
        return True
    resu = False
    for _ret in valeurs:
        vi = _ret[1][0]
        if '(LD.' in vi:
            vi1 = vi.split('(LD.')[0].strip()
            vi2 = vi.split('(LD.')[1][0:-1].strip()
            _dt = distanceVille(vi1, ville)[0]
            if _dt >= 0.9:
                resu = True
            else:
                _dt = distanceVille(vi2, ville)[0]
                if _dt >= 0.9:
                    resu = True
                elif vi1[0:len(ville)] == ville:
                    resu = True
        else:
            _dt = distanceVille(vi, ville)[0]
            if _dt >= 0.9:
                resu = True

    return resu


def trinomville(liste, ville):
    if liste == [] or ville == '':
        return liste
    vi = []
    for i in liste:
        if i[0] == ville:
            vi.append([0, i])
        elif ville in i[0]:
            vi.append([1, i])
        else:
            vi.append([2, i])

    vi.sort()
    resu = []
    for i in vi:
        resu.append(i[1])

    return resu


def TousLesMots(de, dans):
    fl = True
    for i in de:
        fl = i in dans
        if not fl:
            break

    return fl


def egalMD(valeur1, valeur2, md_romain = '', rec_numeric = ''):
    resu = valeur1 == valeur2
    if not resu and valeur1 != '' and valeur2 != '':
        if rec_numeric != '' and valeur1[0].isdigit():
            lvaleur = [valeur2, rec_numeric.replace(' ', '').strip() + ' ' + valeur2]
        else:
            lvaleur = [valeur2]
        for _valeur2 in lvaleur:
            r1 = re.sub('([A-Z])\\1+', '\\1', valeur1)
            r2 = re.sub('([A-Z])\\1+', '\\1', _valeur2)
            resu = r1 == r2
            if not resu:
                tb = valeur1.split()
                if isRomain(tb[-1]) and tb[-1] == md_romain:
                    tb = _valeur2.split()
                    tb[-1] = md_romain
                    r2 = ' '.join(tb)
                    resu = r1 == r2
                if not resu:
                    r1 = r1.replace(' ', '')
                    r2 = r2.replace(' ', '')
                    resu = r1 == r2
                else:
                    break
            else:
                break

    return resu


def cedexhub(ville):
    vi = ' ' + ville + ' '
    return ' CEDEX ' in vi or 'HUB ARMEE' in vi


def AjusteCPVille(valeur):
    if valeur == '':
        return valeur
    tb_valeur = valeur.strip().split()
    resu = ''
    for i in range(0, len(tb_valeur) - 1):
        if tb_valeur[i] in ('SAINT', 'SAINTE'):
            resu += ' ST'
        elif tb_valeur[i] not in ('DE', 'DU', 'SUR', 'LE', 'LA', 'LES', 'DES'):
            resu += ' ' + tb_valeur[i]

    return (resu + ' ' + tb_valeur[-1]).strip()


def TrouveLieuDitOld(valeurs, villes):
    if len(valeurs) >= 4 and valeurs[1] != '' and valeurs[2] != '' and valeurs[4] == '':
        _compville = AjusteCPVille(valeurs[2])
        for _ville in villes:
            if '(LD.' in _ville[0]:
                _a1 = AjusteCPVille(_ville[0][_ville[0].index('(LD.') + 4:-1])
                if _a1 == _compville:
                    return [[[_ville[1], _ville[4]],
                      [_ville[0], '*', ''],
                      '',
                      '',
                      '',
                      '',
                      '',
                      '']]

        return []
    else:
        return []


def TrouveLieuDit(valeurs, villes):
    if len(valeurs) >= 4 and valeurs[1] != '' and valeurs[2] != '' and valeurs[4] == '':
        _compville = AjusteCPVille(valeurs[2])
        if _compville == 'NOTHINGTODO':
            _compville = AjusteCPVille(valeurs[1])
            prio = []
            for _ville in villes:
                if '(LD.' not in _ville[0]:
                    _a1 = AjusteCPVille(_ville[0])
                    if _a1 == _compville:
                        prio.insert(0, [[[_ville[1], _ville[4]],
                          [_ville[0], '*', ''],
                          '',
                          '',
                          '',
                          '',
                          '',
                          '']])
                else:
                    _a1 = AjusteCPVille(_ville[0][0:_ville[0].index('(LD.')])
                    _comp = AjusteCPVille(_ville[0][_ville[0].index('(LD.') + 4:-1])
                    if _a1 == _compville:
                        prio.append([[[_ville[1], _ville[4]],
                          [_ville[0], '*', ''],
                          '',
                          '',
                          '',
                          '',
                          '',
                          '']])
                    elif _comp == _compville:
                        prio.append([[[_ville[1], _ville[4]],
                          [_ville[0], '*', ''],
                          '',
                          '',
                          '',
                          '',
                          '',
                          '']])

            if prio != []:
                if len(prio) == 1 or '(LD.' not in prio[0][0][1][0]:
                    return prio[0]
                suppLD = True
                for _prio in prio:
                    if '(LD.' not in _prio[0][1][0]:
                        suppLD = False
                        break

                if suppLD:
                    _prio = prio[0]
                    _prio[0][1][0] = _prio[0][1][0][0:_prio[0][1][0].index('(LD.')].strip()
                    return _prio
                return prio[0]
            else:
                return []
        else:
            for _ville in villes:
                if '(LD.' in _ville[0]:
                    _a1 = AjusteCPVille(_ville[0][_ville[0].index('(LD.') + 4:-1])
                    if _a1 == _compville:
                        return [[[_ville[1], _ville[4]],
                          [_ville[0], '*', ''],
                          '',
                          '',
                          '',
                          '',
                          '',
                          '']]

        return []
    else:
        return []


def RechAdresse(nom, NBMax = 400, Lookup = False, Appel = '', cpdefaut = '', vcedex = '', transvoie = True):

    def reduitNum(valeur):
        if valeur != '':
            if valeur.isdigit():
                if valeur[0] != '0':
                    return valeur
                res1 = ''
                for i in range(1, len(valeur)):
                    if res1 == '':
                        if valeur[i] != '0' and valeur[i] != ' ':
                            res1 += valeur[i]
                    else:
                        res1 += ''.join(valeur[i:])
                        break

                return res1
        return valeur

    try:
        if type(nom) == unicode:
            nom = nom.encode('utf-8')
    except:
        pass

    if _pays == 'KOR':
        chaine = nom.translate(_trans_t, '').upper()
    elif _pays not in ('KOR',):
        try:
            va0 = nom.decode('utf-8').encode('iso-8859-1').upper()
            try:
                t2 = va0.translate(_trans, '')
                va0 = t2
            except:
                va0 = va0

        except:
            try:
                va0 = convertUTFISO.convertUTF8(nom)
            except:
                va0 = nom.upper()

    else:
        try:
            va0 = nom.decode('utf-8').encode('utf-8')
        except:
            va0 = nom

    chaine = va0
    if _pays != 'FRA' and Appel == 'RNVP':
        resu_format = restructure.formatage(chaine)
    else:
        resu_format = formatage(chaine)
    recup = []
    codepostal = ''
    province = ''
    resu_final = []
    quelformat = 0
    if resu_format[1] == '<CP>':
        return recherche_cp(nom, True, fl_ajoutecp=True, flag_voie=Appel != 'RNVP', flag_cedexa=Appel != 'RNVP')
    elif len(resu_format[2]) == 2 and resu_format[1].find('<CEDEX>') >= 0:
        recup = decoupe_voie(_regles[resu_format[1]][quelformat], resu_format, transvoie)
        if recup[0] != '':
            if _cedexa.has_key(recup[0]):
                re = []
                for i in _cedexa[recup[0]]:
                    if len(i) > 9:
                        resu_final.append([[decode(i[9]), decode(i[7])],
                         [decode(i[8]), '*'],
                         decode(i[5]),
                         decode(i[4]),
                         '',
                         decode(i[0]),
                         '',
                         '',
                         'CEDEX',
                         [decode(i[1]),
                          decode(i[2]),
                          decode(i[3]),
                          decode(i[6])]])
                    else:
                        resu_final.append([['', decode(i[7])],
                         [decode(i[8]), '*'],
                         decode(i[5]),
                         decode(i[4]),
                         '',
                         decode(i[0]),
                         '',
                         '',
                         'CEDEX',
                         [decode(i[1]),
                          decode(i[2]),
                          decode(i[3]),
                          decode(i[6])]])

        else:
            resu_final = [['', ''],
             ['', ''],
             chaine,
             '',
             '',
             '',
             '',
             '',
             'CEDEX',
             []]
        return resu_final
    else:
        while True and resu_format != [[], '', []]:
            recup = []
            codepostal = ''
            mem_ville = ''
            mem_codepostal = ''
            resu_final = []
            if resu_format != []:
                if _regles.has_key(resu_format[1]):
                    recup = decoupe_voie(_regles[resu_format[1]][quelformat], resu_format, transvoie)
                    recup[4] = reduitNum(recup[4])
                elif '<virg>' not in resu_format[1]:
                    tb = chaine.split()
                    recup = ['',
                     tb[-1],
                     ' '.join(tb[0:-1]),
                     '',
                     '',
                     '',
                     '']
                else:
                    chaine = chaine.replace(',', ' ').replace(';', ' ')
                    resu_format = formatage(chaine)
                    if _regles.has_key(resu_format[1]):
                        recup = decoupe_voie(_regles[resu_format[1]][quelformat], resu_format, transvoie)
                    else:
                        tb = chaine.split()
                        recup = ['',
                         tb[-1],
                         ' '.join(tb[0:-1]),
                         '',
                         '',
                         '',
                         '']
                try:
                    mem_ville = recup[1]
                    mem_codepostal = recup[0]
                except:
                    pass

            if _pays in ('GBR', 'NLD', 'CZE', 'PRT', 'POL', 'KOR') and recup[0] != '':
                recup[0] = fct_majcp(recup[0])
            if recup[0] == '00000':
                recup[0] = ''
            if recup[5] != '':
                ts = recup[5].split()
                ts1 = []
                for i in ts:
                    if i not in _articles:
                        ts1.append(i)

                if recup[4] != '':
                    if len(ts) == 3:
                        recup[1] = ts1[-1]
                        recup[2] = ' '.join(ts[0:-1])
                    else:
                        recup[1] = ts1[-1]
                        recup[2] = ' '.join(ts1[0:-1])
                elif len(ts) == 2:
                    recup[1] = ts1[1]
                    recup[2] = ts1[0]
                else:
                    recup[1] = ts1[-1]
                    recup[2] = ' '.join(ts1[0:-1])
            if recup[0] == '' and recup[1] != '' and TestCP(recup[1]):
                recup[0] = recup[1][:]
                recup[1] = ''
            if recup[0] != '' or recup[1] != '':
                if recup[0] != '' and recup[1] != '':
                    villes = recherche_cp(recup[0], flag_voie=Appel != 'RNVP', flag_cedexa=Appel != 'RNVP')
                    if villes == [] and cpdefaut != '':
                        villes = recherche_cp(cpdefaut, flag_voie=Appel != 'RNVP', flag_cedexa=Appel != 'RNVP')
                        if len(villes) >= 1 and ' CEDEX ' not in villes[0][0] + ' ':
                            villes = []
                    if villes != [] and (len(villes) == 1 or ' CEDEX ' in villes[0][0] + ' ') and distanceVille(villes[0][0], recup[1])[0] >= 0.85 and ' CEDEX ' in villes[0][0] + ' ':
                        if len(villes) > 1 and vcedex != '':
                            vvilles = []
                            for vv in villes:
                                if ' (LD.' in vv[0]:
                                    if vv[0].split(' (LD.')[0].strip() == recup[1].strip() + ' ' + vcedex.strip():
                                        vvilles.append(vv)
                                elif vv[0] == recup[1].strip() + ' ' + vcedex.strip():
                                    vvilles.append(vv)

                            if vvilles != []:
                                villes = vvilles[:]
                        if len(villes) > 1 and '(LD. ' in villes[0][0]:
                            recup[1] = villes[0][0][0:villes[0][0].find('(LD.')].strip()
                        else:
                            recup[1] = villes[0][0]
                        recup[0] = villes[0][4]
                    villes1 = recherche_villeparnom(recup[1], recup[0][0:_lenDepartement], nbmax=1000)
                    if villes1 == []:
                        villes1 = recherche_villeparnom(recup[1])
                        fl_identif_ville = False
                        for i in villes:
                            if distanceVille(i[0], recup[1])[0] >= 0.9:
                                fl_identif_ville = True
                                break

                        if not fl_identif_ville:
                            fl_identif_ville = False
                            for i in villes1:
                                if distanceVille(i[0], recup[1])[0] >= 0.9:
                                    fl_identif_ville = True
                                    break

                            if fl_identif_ville:
                                recup[0] = i[2]
                                villes = recherche_cp(recup[0], flag_voie=Appel != 'RNVP', flag_cedexa=Appel != 'RNVP')
                    if villes == []:
                        if cpdefaut != '':
                            villes = recherche_cp(cpdefaut, flag_voie=Appel != 'RNVP', flag_cedexa=Appel != 'RNVP')
                        for j in villes1:
                            if [j[0],
                             j[1],
                             j[3],
                             j[4],
                             j[2]] not in villes:
                                villes.append([j[0],
                                 j[1],
                                 j[3],
                                 j[4],
                                 j[2]])

                        recup[0] = ''
                    elif villes1 != []:
                        fl_trouve = False
                        fl_identif_ville = False
                        for i in villes:
                            if not fl_identif_ville:
                                fl_identif_ville = distanceVille(i[0], recup[1])[0] >= 0.9
                            else:
                                break

                        if not fl_identif_ville:
                            for j in villes1:
                                if ' CEDEX ' not in j[0] + ' ':
                                    if distanceVille(j[0], recup[1])[0] >= 0.9 or distance(j[0], recup[1]) == 0:
                                        if [j[0],
                                         j[1],
                                         j[3],
                                         j[4],
                                         j[2]] not in villes:
                                            villes.append([j[0],
                                             j[1],
                                             j[3],
                                             j[4],
                                             j[2]])

                        for i in villes:
                            for j in villes1:
                                if cedex(i[0]) == cedex(j[0]):
                                    fl_trouve = True
                                    break

                            if fl_trouve:
                                break

                        if not fl_trouve:
                            villes2 = []
                            for j in villes1:
                                if cedex(j[2]) == recup[0]:
                                    villes2.append(j)

                            if villes2 != []:
                                villes = villes2
                            elif Appel == 'RNVP':
                                if recup[0] != '':
                                    villes1 = recherche_villeparnom(recup[1], recup[0][0:_lenDepartement])
                                else:
                                    villes1 = recherche_villeparnom(recup[1])
                                fl_identif_ville = False
                                for i in villes:
                                    if distanceVille(i[0], recup[1])[0] >= 0.9:
                                        fl_identif_ville = True
                                        break

                                if not fl_identif_ville:
                                    fl_identif_ville = False
                                    for i in villes1:
                                        if distanceVille(i[0], recup[1])[0] >= 0.9:
                                            fl_identif_ville = True
                                            break

                                    if fl_identif_ville:
                                        recup[0] = i[2]
                                        villes = recherche_cp(recup[0], flag_voie=Appel != 'RNVP', flag_cedexa=Appel != 'RNVP')
                                    else:
                                        villes = []
                                        villes1 = []
                            else:
                                villes = villes1
                                recup[0] = ''
                        else:
                            try:
                                if cp_234[recup[0]][0][0] == '*T*':
                                    codepostal = cp_234[recup[0]][0][1]
                                else:
                                    codepostal = recup[0]
                            except:
                                try:
                                    if cp_234[recup[0].replace(' ', '').replace('-', '')][0][0] == '*T*':
                                        codepostal = cp_234[recup[0].replace(' ', '').replace('-', '')][0][1]
                                    else:
                                        codepostal = recup[0]
                                except:
                                    codepostal = recup[0]

                    else:
                        try:
                            if cp_234[recup[0]][0][0] == '*T*':
                                codepostal = cp_234[recup[0]][0][1]
                            else:
                                codepostal = recup[0]
                        except:
                            try:
                                if cp_234[recup[0].replace(' ', '').replace('-', '')][0][0] == '*T*':
                                    codepostal = cp_234[recup[0].replace(' ', '').replace('-', '')][0][1]
                                else:
                                    codepostal = recup[0]
                            except:
                                codepostal = recup[0]

                elif recup[0] != '':
                    if recup[1] == '' and recup[2] == '':
                        resu = recherche_cp(recup[0], True, flag_voie=Appel != 'RNVP', flag_cedexa=Appel != 'RNVP')
                        if resu != []:
                            return resu
                    else:
                        villes = recherche_cp(recup[0], flag_voie=Appel != 'RNVP', flag_cedexa=Appel != 'RNVP')
                        codepostal = recup[0]
                        if villes != []:
                            try:
                                if cp_234[recup[0]][0][0] == '*T*':
                                    codepostal = cp_234[recup[0]][0][1]
                            except:
                                try:
                                    if cp_234[recup[0].replace(' ', '').replace('-', '')][0][0] == '*T*':
                                        codepostal = cp_234[recup[0].replace(' ', '').replace('-', '')][0][1]
                                except:
                                    codepostal = recup[0]

                else:
                    villes1 = recherche_villeparnom(recup[1], cedex=recup[0] != '')
                    villes = []
                    for j in villes1:
                        if [j[0],
                         j[1],
                         j[3],
                         j[4],
                         j[2]] not in villes:
                            villes.append([j[0],
                             j[1],
                             j[3],
                             j[4],
                             j[2]])

                    codepostal = ''
                _tld = TrouveLieuDit(recup, villes)
                if _tld:
                    return _tld
                if len(villes) == 0:
                    if recup[1] == '':
                        if cp_234.has_key(recup[0][0:_lenDepartement]):
                            codepostal = recherche_cp(recup[0][0:_lenDepartement], flag_voie=Appel != 'RNVP', flag_cedexa=Appel != 'RNVP')
                            resu_final1 = []
                            resu_final2 = []
                            lo = len(recup[3])
                            _tbvoie = recup[2].split()
                            voie = MotDirecteur(_tbvoie)
                            voie1 = ''
                            if Appel != 'RNVP':
                                if len(voie) == 1 and len(_tbvoie) > 2:
                                    voie1 = _tbvoie[-2]
                            if len(voie) == 1:
                                _nbm = 100
                                NBMax = 100
                            else:
                                _nbm = 10
                            resu2 = {}
                            for ville in codepostal:
                                if ville[1] not in resu2:
                                    resu1 = recherche_adr(ville[1], voie, _nbm, False, voiecomplete=_tbvoie, numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                                    resu2[ville[1]] = resu1
                                else:
                                    resu1 = resu2[ville[1]]
                                if voie1 != '':
                                    _resu1 = recherche_adr(ville[1], voie1, _nbm, False, voiecomplete=_tbvoie[0:-1], numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                                    if resu1 == []:
                                        resu1 = _resu1
                                    elif _resu1 != []:
                                        resu1 += _resu1
                                if resu1 != []:
                                    for j in resu1:
                                        if len(ville) == 3:
                                            if j[2] != codepostal and j[2] != '':
                                                _v0 = recup_cp(j[2], ville[1], recup[1])
                                            elif len(ville) == 6:
                                                _v0 = ville[0] + ville[5]
                                            else:
                                                _v0 = ville[0]
                                            _cp = recup_cpcedex(_v0, j[2], recup[0])
                                            if len(resu_final1) < NBMax:
                                                resu_final1.append([[ville[1], _cp[:]],
                                                 [_v0[:], ville[2]],
                                                 j[0],
                                                 recup[4],
                                                 '',
                                                 j[1],
                                                 recup[6]])
                                            if recup[3] != '' or j[0][0:lo] == recup[3]:
                                                if len(resu_final2) < NBMax:
                                                    resu_final2.append([[ville[1], _cp[:]],
                                                     [_v0[:], ville[2]],
                                                     j[0],
                                                     recup[4],
                                                     recup[3],
                                                     j[1],
                                                     recup[6]])
                                                else:
                                                    break
                                        else:
                                            if j[2] != ville[2] and j[2] != '':
                                                _v0 = recup_cp(j[2], ville[1], recup[1])
                                            elif len(ville) == 6:
                                                _v0 = ville[0] + ville[5]
                                            else:
                                                _v0 = ville[0]
                                            _v2 = recup_cpcedex(_v0, j[2], recup[0])
                                            if len(resu_final1) < NBMax:
                                                resu_final1.append([[ville[1], _v2[:]],
                                                 [_v0[:], ville[3], ville[4]],
                                                 j[0],
                                                 recup[4],
                                                 '',
                                                 j[1],
                                                 recup[6]])
                                            if recup[3] != '' or j[0][0:lo] == recup[3]:
                                                if len(resu_final2) < NBMax:
                                                    resu_final2.append([[ville[1], _v2[:]],
                                                     [_v0[:], ville[3], ville[4]],
                                                     j[0],
                                                     recup[4],
                                                     recup[3],
                                                     j[1],
                                                     recup[6]])
                                                else:
                                                    break

                            if resu_final2 != []:
                                resu_final = resu_final2
                            else:
                                resu_final = resu_final1
                    else:
                        if Appel == 'RNVP':
                            if recup[0] != '':
                                villes1 = recherche_villeparnom(recup[1], recup[0][0:_lenDepartement], cedex=recup[0] != '')
                            else:
                                villes1 = recherche_villeparnom(recup[1], cedex=recup[0] != '')
                        else:
                            villes1 = recherche_villeparnom(recup[1], cedex=recup[0] != '')
                        villes = []
                        for j in villes1:
                            if [j[0],
                             j[1],
                             j[3],
                             j[4],
                             j[2]] not in villes:
                                villes.append([j[0],
                                 j[1],
                                 j[3],
                                 j[4],
                                 j[2]])

                elif len(villes) == 1:
                    if recup[0] == '':
                        _tbvoie = recup[2].split()
                        voie = MotDirecteur(_tbvoie)
                        voie1 = ''
                        if Appel != 'RNVP':
                            if len(voie) == 1 and len(_tbvoie) > 2:
                                voie1 = _tbvoie[-2]
                        resu_voie = recherche_adr(villes[0][1], voie, 10, False, voiecomplete=_tbvoie, numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                        if voie1 != '':
                            _resu1 = recherche_adr(villes[0][1], voie1, 10, False, voiecomplete=_tbvoie[0:-1], numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                            if resu_voie == []:
                                resu_voie = _resu1
                            elif _resu1 != []:
                                resu_voie += _resu1
                        if len(resu_voie) == 0:
                            if len(voie) == 1:
                                _nbm = 100
                                NBMax = 100
                            else:
                                _nbm = 10
                            villes = recherche_villeparnom(recup[1], '', cedex=recup[0] != '')
                            resu_final1 = []
                            resu_final2 = []
                            lo = len(recup[3])
                            resu2 = {}
                            for ville in villes:
                                if ville[1] not in resu2 and len(ville) < 10:
                                    resu1 = recherche_adr(ville[1], voie, _nbm, False, voiecomplete=_tbvoie, numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                                    resu2[ville[1]] = resu1
                                else:
                                    resu1 = resu2[ville[1]]
                                if resu1 != []:
                                    for j in resu1:
                                        if j[2] != ville[2] and j[2] != '':
                                            _v0 = recup_cp(j[2], ville[1], recup[1])
                                        elif len(ville) == 6:
                                            _v0 = ville[0] + ville[5]
                                        else:
                                            _v0 = ville[0]
                                        _v2 = recup_cpcedex(_v0, j[2], recup[0])
                                        if len(resu_final1) < NBMax:
                                            resu_final1.append([[ville[1], _v2[:]],
                                             [_v0[:], ville[3], ville[4]],
                                             j[0],
                                             recup[4],
                                             '',
                                             j[1],
                                             recup[6]])
                                        if recup[3] != '' or j[0][0:lo] == recup[3]:
                                            if len(resu_final2) < NBMax:
                                                resu_final2.append([[ville[1], _v2[:]],
                                                 [_v0[:], ville[3], ville[4]],
                                                 j[0],
                                                 recup[4],
                                                 recup[3],
                                                 j[1],
                                                 recup[6]])
                                            else:
                                                break

                            if resu_final2 != []:
                                resu_final = resu_final2
                            else:
                                resu_final = resu_final1
                        elif len(resu_voie) >= 1:
                            if recup[3] != '':
                                trouve = []
                                if recup[3] != '':
                                    for i in resu_voie:
                                        if recup[3] + ' ' in i[0]:
                                            trouve.append(i)

                                if trouve == []:
                                    trouve = resu_voie
                            else:
                                trouve = resu_voie
                            resu_final1 = []
                            resu_final2 = []
                            lo = len(recup[3])
                            resu2 = []
                            for i in trouve:
                                if i[1] not in resu2:
                                    resu2.append(i[1])
                                    if codepostal == '':
                                        _cp = villes[0][2]
                                    else:
                                        _cp = codepostal
                                        if codepostal != villes[0][2]:
                                            _cp = villes[0][2]
                                    if i[2] != _cp:
                                        _v0 = recup_cp(i[2], villes[0][1], recup[1])
                                        _cp = recup_cpcedex(_v0, i[2], recup[0])
                                    else:
                                        _v0 = villes[0][0]
                                    if recup[3] != '' or i[0][0:lo] == recup[3]:
                                        if len(resu_final2) < NBMax:
                                            resu_final2.append([[villes[0][1], _cp[:]],
                                             [_v0[:], villes[0][3]],
                                             i[0],
                                             recup[4],
                                             recup[3],
                                             i[1],
                                             recup[6]])
                                        else:
                                            break
                                    else:
                                        if len(resu_final1) < NBMax:
                                            resu_final1.append([[villes[0][1], _cp[:]],
                                             [_v0[:], villes[0][3]],
                                             i[0],
                                             recup[4],
                                             '',
                                             i[1],
                                             recup[6]])
                                        if recup[3] != '' or i[0][0:lo] == recup[3]:
                                            if len(resu_final2) < NBMax:
                                                resu_final2.append([[villes[0][1], _cp[:]],
                                                 [_v0[:], villes[0][3]],
                                                 i[0],
                                                 recup[4],
                                                 recup[3],
                                                 i[1],
                                                 recup[6]])
                                            else:
                                                break

                            if resu_final2 != []:
                                resu_final = resu_final2
                            else:
                                resu_final = resu_final1
                    else:
                        resu_final = []
                        voie = MotDirecteur(recup[2].split())
                        _voie_romain = ''
                        if voie.isdigit():
                            if int(voie) < 100:
                                _voie_romain = ArabicToroman(int(voie))
                        if codepostal != '':
                            if len(voie) == 1:
                                _nbm = 100
                                NBMax = 100
                            else:
                                _nbm = 10
                            if ' CEDEX ' in villes[0][0] + ' ':
                                if recup[2] == '':
                                    resu1 = recherche_adr(villes[0][1], voie, _nbm, False, recup[0].split(), numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                                else:
                                    resu1 = recherche_adr(villes[0][1], voie, _nbm, False, voiecomplete=recup[2].split(), numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                            else:
                                resu1 = recherche_adr(villes[0][1], voie, _nbm, False, voiecomplete=recup[2].split(), numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                            resu_final1 = []
                            resu_final1B = []
                            resu_final2 = []
                            resu_final3 = []
                            lo = len(recup[3])
                            if resu1 != []:
                                for j in resu1:
                                    if j[2] == '' and villes[0][1] != '' and villes[0][1] in cp_234U:
                                        j[2] = cp_234U[villes[0][1]][0]
                                    if j[2] != recup[0] and j[2] != '':
                                        _v0 = recup_cp(j[2], villes[0][1], recup[1])
                                    else:
                                        _v0 = villes[0][0]
                                    _cp = recup_cpcedex(_v0, j[2], recup[0])
                                    if len(resu_final1) < NBMax:
                                        resu_final1.append([[villes[0][1], _cp[:]],
                                         [_v0[:], villes[0][2], villes[0][3]],
                                         j[0],
                                         recup[4],
                                         '',
                                         j[1],
                                         recup[6]])
                                        if j[2] == recup[0]:
                                            resu_final1B.append([[villes[0][1], _cp[:]],
                                             [_v0[:], villes[0][2], villes[0][3]],
                                             j[0],
                                             recup[4],
                                             '',
                                             j[1],
                                             recup[6]])
                                    if recup[3] != '' or j[0][0:lo] == recup[3]:
                                        if recup[2] == j[0] or recup[2] == j[0][0:len(recup[2])]:
                                            resu_final3.append([[villes[0][1], _cp[:]],
                                             [_v0[:], villes[0][2], villes[0][3]],
                                             j[0],
                                             recup[4],
                                             recup[3],
                                             j[1],
                                             recup[6]])
                                        if len(resu_final2) < NBMax:
                                            resu_final2.append([[villes[0][1], _cp[:]],
                                             [_v0[:], villes[0][2], villes[0][3]],
                                             j[0],
                                             recup[4],
                                             recup[3],
                                             j[1],
                                             recup[6]])
                                        else:
                                            break

                            if resu_final3 != []:
                                resu_final = resu_final3
                            elif resu_final2 != []:
                                resu_final = resu_final2
                            elif resu_final1B != []:
                                resu_final = resu_final1B
                            else:
                                resu_final = resu_final1
                        if resu_final == []:
                            if not Lookup:
                                if recup[1] != '':
                                    villes = recherche_villeparnom(recup[1], '', cedex=recup[0] != '')
                                else:
                                    villes = recherche_villeparnom(villes[0][0], villes[0][1][0:_lenDepartement], cedex=recup[0] != '')
                                resu_final1 = []
                                resu_final2 = []
                                resu_final3 = []
                                lo = len(recup[3])
                                resu2 = {}
                                if len(voie) == 1:
                                    _nbm = 100
                                    NBMax = 100
                                else:
                                    _nbm = 10
                                for ville in villes:
                                    if ville[1] not in resu2 and len(ville) < 10:
                                        resu1 = recherche_adr(ville[1], voie, _nbm, False, voiecomplete=recup[2].split(), numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                                        resu2[ville[1]] = resu1
                                    else:
                                        resu1 = resu2[ville[1]]
                                    if resu1 != []:
                                        for j in resu1:
                                            if j[2] != ville[2] and j[2] != '':
                                                _v0 = recup_cp(j[2], ville[1], recup[1])
                                            elif len(ville) == 6:
                                                _v0 = ville[0] + ville[5]
                                            else:
                                                _v0 = ville[0]
                                            _v2 = recup_cpcedex(_v0, j[2], recup[0])
                                            if len(resu_final1) < NBMax:
                                                resu_final1.append([[ville[1], _v2[:]],
                                                 [_v0[:], ville[3], ville[4]],
                                                 j[0],
                                                 recup[4],
                                                 '',
                                                 j[1],
                                                 recup[6]])
                                            if recup[3] != '' or j[0][0:lo] == recup[3]:
                                                if egalMD(j[0], recup[2], _voie_romain, recup[4]):
                                                    resu_final3.append([[ville[1], _v2[:]],
                                                     [_v0[:], ville[3], ville[4]],
                                                     j[0],
                                                     recup[4],
                                                     recup[3],
                                                     j[1],
                                                     recup[6]])
                                                if len(resu_final2) < NBMax:
                                                    resu_final2.append([[ville[1], _v2[:]],
                                                     [_v0[:], ville[3], ville[4]],
                                                     j[0],
                                                     recup[4],
                                                     recup[3],
                                                     j[1],
                                                     recup[6]])
                                                else:
                                                    break

                                if resu_final3 != []:
                                    resu_final = resu_final3
                                elif resu_final2 != []:
                                    resu_final = resu_final2
                                else:
                                    resu_final = resu_final1
                                if resu_final == []:
                                    if _pays == 'GBR' and recup[0] != '':
                                        return recherche_cp(recup[0], True)
                elif recup[1] != '':
                    _villes = []
                    for _vi in villes:
                        _dt = distanceVille(recup[1], _vi[0])[0]
                        _villes.append([_dt, 1000 - len(_vi[0]), _vi])

                    _villes.sort()
                    _villes.reverse()
                    _villes2 = []
                    for _vi in _villes:
                        _villes2.append(_vi[2])

                    villes = _villes2
                    vcomp = recup[1].split()
                    vdist = round(len(vcomp) * 0.9)
                    resu_ville = []
                    for ville in villes:
                        if len(ville) < 10:
                            if distance(ville[0], recup[1]) <= vdist or distance(recup[1], ville[0][0:len(recup[1])]) <= vdist or distanceVille(ville[0], recup[1])[0] >= 0.85:
                                if len(ville) > 4:
                                    if len(ville) == 6:
                                        resu_ville.append([ville[0] + ville[5],
                                         ville[1],
                                         ville[2],
                                         ville[3],
                                         ville[4]])
                                    else:
                                        resu_ville.append([ville[0],
                                         ville[1],
                                         ville[2],
                                         ville[3],
                                         ville[4]])
                                else:
                                    resu_ville.append([ville[0],
                                     ville[1],
                                     codepostal,
                                     ville[2],
                                     ''])

                    if len(resu_ville) == 0:
                        vcomp = PhonexCdrVilleListe(recup[1])
                        vdist = len(vcomp) - int(len(vcomp) * 0.9)
                        resu_ville = []
                        for ville in villes:
                            if len(ville) < 10:
                                comp = PhonexCdrVilleListe(ville[0])
                                if distance(comp, vcomp) <= vdist:
                                    resu_ville.append(ville)

                    if len(resu_ville) == 0:
                        resu_ville = []
                    elif len(resu_ville) == 1:
                        dvoie = recup[2].split()
                        voie = MotDirecteur(dvoie)
                        if len(voie) == 1:
                            _nbm = 100
                            NBMax = 100
                        else:
                            _nbm = 10
                        resu_voie = recherche_adr(resu_ville[0][1], voie, _nbm, False, voiecomplete=dvoie, numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                        if Appel != 'RNVP' and resu_voie == [] and len(dvoie) > 2:
                            idv = 2
                            while True:
                                voie = dvoie[-idv]
                                if len(voie) >= 2:
                                    resu_voie = recherche_adr(resu_ville[0][1], voie, _nbm, False, voiecomplete=dvoie, numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                                if resu_voie == []:
                                    if idv < len(dvoie) - 1:
                                        idv += 1
                                    else:
                                        break
                                else:
                                    break

                            vdist = len(recup[2]) - int(len(recup[2]) * 0.8)
                            resu_fi = []
                            try:
                                for _resu in resu_voie:
                                    if editdist.distance(convertUTFISO.convertUTF8(_resu[0]), recup[2]) <= vdist:
                                        resu_fi.append(_resu)

                            except:
                                pass

                            resu_voie = resu_fi
                        if codepostal == '':
                            codepostal = resu_ville[0][2]
                        if len(resu_voie) == 0:
                            villes = recherche_cp(recup[0], flag_voie=Appel != 'RNVP', flag_cedexa=Appel != 'RNVP')
                            codepostal = recup[0]
                            if villes != []:
                                try:
                                    if cp_234[recup[0]][0][0] == '*T*':
                                        codepostal = cp_234[recup[0]][0][1]
                                except:
                                    if cp_234[recup[0].replace(' ', '').replace('-', '')][0][0] == '*T*':
                                        codepostal = cp_234[recup[0].replace(' ', '').replace('-', '')][0][1]

                                resu_final1 = []
                                resu_final2 = []
                                resu_final3 = []
                                lo = len(recup[3])
                                _tbvoie = recup[2].split()
                                voie = MotDirecteur(_tbvoie)
                                voie1 = ''
                                if Appel != 'RNVP':
                                    if len(voie) == 1 and len(_tbvoie) > 2:
                                        voie1 = _tbvoie[-2]
                                if len(voie) == 1:
                                    _nbm = 100
                                    NBMax = 100
                                else:
                                    _nbm = 10
                                resu2 = {}
                                for ville in villes:
                                    if ville[1] not in resu2 and len(ville) < 10:
                                        resu1 = recherche_adr(ville[1], voie, _nbm, False, voiecomplete=_tbvoie, numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                                        resu2[ville[1]] = resu1
                                    else:
                                        resu1 = resu2[ville[1]]
                                    if voie1 != '':
                                        _resu1 = recherche_adr(ville[1], voie1, _nbm, False, voiecomplete=_tbvoie[0:-1], numvoie=recup[4], cpencours=recup[0], descrimination=Appel == 'RNVP')
                                        if resu1 == []:
                                            resu1 = _resu1
                                        elif _resu1 != []:
                                            resu1 += _resu1
                                    if resu1 != []:
                                        for j in resu1:
                                            qch = ''
                                            if len(j) == 6 and type(j[-1]) is list and j[-1][0] == 'W':
                                                qch = j[-1][1]
                                                j.pop(-1)
                                            if len(ville) == 3:
                                                if j[2] != codepostal:
                                                    _cp1 = j[2]
                                                    _v0 = recup_cp(j[2], ville[1], recup[1])
                                                else:
                                                    _cp1 = codepostal
                                                    if len(ville) == 6:
                                                        _v0 = ville[0] + ville[5]
                                                    else:
                                                        _v0 = ville[0]
                                                _cp1 = recup_cpcedex(_v0, _cp1, recup[0])
                                                if len(resu_final1) < NBMax:
                                                    if [[ville[1], _cp1[:]],
                                                     [_v0[:], ville[2]],
                                                     j[0],
                                                     recup[4],
                                                     '',
                                                     j[1],
                                                     recup[6],
                                                     qch] not in resu_final1:
                                                        resu_final1.append([[ville[1], _cp1[:]],
                                                         [_v0[:], ville[2]],
                                                         j[0],
                                                         recup[4],
                                                         '',
                                                         j[1],
                                                         recup[6]], qch)
                                                if recup[3] != '' or j[0][0:lo] == recup[3]:
                                                    if len(resu_final2) < NBMax:
                                                        if [[ville[1], _cp1[:]],
                                                         [_v0[:], ville[2]],
                                                         j[0],
                                                         recup[4],
                                                         recup[3],
                                                         j[1],
                                                         recup[6],
                                                         qch] not in resu_final2:
                                                            resu_final2.append([[ville[1], _cp1[:]],
                                                             [_v0[:], ville[2]],
                                                             j[0],
                                                             recup[4],
                                                             recup[3],
                                                             j[1],
                                                             recup[6],
                                                             qch])
                                                    else:
                                                        break
                                            else:
                                                if j[2] != ville[2] and j[2] != '':
                                                    _v2 = j[2]
                                                    _v0 = recup_cp(j[2], ville[1], recup[1])
                                                else:
                                                    _v2 = ville[2]
                                                    if len(ville) == 6:
                                                        _v0 = ville[0] + ville[5]
                                                    else:
                                                        _v0 = ville[0]
                                                _v2 = recup_cpcedex(_v0, _v2, recup[0])
                                                if len(resu_final1) < NBMax:
                                                    if recup[2] != '' and recup[2].upper() == j[0].upper():
                                                        if [[ville[1], _v2[:]],
                                                         [_v0[:], ville[3], ville[4]],
                                                         j[0],
                                                         recup[4],
                                                         '',
                                                         j[1],
                                                         recup[6],
                                                         qch] not in resu_final3:
                                                            resu_final3.append([[ville[1], _v2[:]],
                                                             [_v0[:], ville[3], ville[4]],
                                                             j[0],
                                                             recup[4],
                                                             '',
                                                             j[1],
                                                             recup[6],
                                                             qch])
                                                    elif [[ville[1], _v2[:]],
                                                     [_v0[:], ville[3], ville[4]],
                                                     j[0],
                                                     recup[4],
                                                     '',
                                                     j[1],
                                                     recup[6],
                                                     qch] not in resu_final1:
                                                        resu_final1.append([[ville[1], _v2[:]],
                                                         [_v0[:], ville[3], ville[4]],
                                                         j[0],
                                                         recup[4],
                                                         '',
                                                         j[1],
                                                         recup[6],
                                                         qch])
                                                if recup[3] != '' or j[0][0:lo] == recup[3]:
                                                    if len(resu_final2) < NBMax:
                                                        if [[ville[1], _v2[:]],
                                                         [_v0[:], ville[3], ville[4]],
                                                         j[0],
                                                         recup[4],
                                                         recup[3],
                                                         j[1],
                                                         recup[6],
                                                         qch] not in resu_final2:
                                                            resu_final2.append([[ville[1], _v2[:]],
                                                             [_v0[:], ville[3], ville[4]],
                                                             j[0],
                                                             recup[4],
                                                             recup[3],
                                                             j[1],
                                                             recup[6],
                                                             qch])
                                                    else:
                                                        break

                                if resu_final2 != []:
                                    resu_final = resu_final2
                                elif resu_final3 != []:
                                    resu_final = resu_final3 + resu_final1
                                else:
                                    resu_final = resu_final1
                        elif len(resu_voie) >= 1:
                            if recup[3] != '':
                                trouve = []
                                trouve1 = []
                                if recup[3] != '':
                                    for i in resu_voie:
                                        if '  ' in i[0]:
                                            i[0] = i[0].replace('  ', ' ')
                                        if recup[3] + ' ' in i[0]:
                                            trouve.append(i)
                                        elif len(i) == 6 and type(i[5]) is list and i[5][0] == 'W':
                                            trouve1.append(i)

                                if trouve == []:
                                    if trouve1 != []:
                                        trouve = trouve1
                                    else:
                                        trouve = resu_voie
                            else:
                                trouve = resu_voie
                            resu_final1 = []
                            resu_final2 = []
                            resu_final3 = []
                            lo = len(recup[3])
                            for i in trouve:
                                qch = ''
                                if len(i) == 6 and type(i[-1]) is list and i[-1][0] == 'W':
                                    qch = i[-1][1]
                                    i.pop(-1)
                                if i[2] != codepostal:
                                    try:
                                        if ' CEDEX' in resu_ville[0][0] and codepostal == resu_ville[0][4]:
                                            _cp = codepostal
                                            _v0 = resu_ville[0][0]
                                        else:
                                            _cp = i[2]
                                            _v0 = recup_cp(i[2], resu_ville[0][1], recup[1])
                                    except:
                                        _cp = i[2]
                                        _v0 = recup_cp(i[2], resu_ville[0][1], recup[1])

                                else:
                                    _cp = codepostal
                                    _v0 = resu_ville[0][0]
                                _cp = recup_cpcedex(_v0, _cp, recup[0])
                                if len(resu_ville[0]) == 3:
                                    if len(resu_final1) < NBMax:
                                        if [[resu_ville[0][1], _cp],
                                         [_v0, '*'],
                                         i[0],
                                         recup[4],
                                         '',
                                         i[1],
                                         recup[6],
                                         qch] not in resu_final1:
                                            resu_final1.append([[resu_ville[0][1], _cp],
                                             [_v0, '*'],
                                             i[0],
                                             recup[4],
                                             '',
                                             i[1],
                                             recup[6],
                                             qch])
                                    if recup[3] != '' or i[0][0:lo] == recup[3]:
                                        if len(resu_final2) < NBMax:
                                            if [[resu_ville[0][1], _cp],
                                             [_v0, '*'],
                                             i[0],
                                             recup[4],
                                             recup[3],
                                             i[1],
                                             recup[6],
                                             qch] not in resu_final2:
                                                resu_final2.append([[resu_ville[0][1], _cp],
                                                 [_v0, '*'],
                                                 i[0],
                                                 recup[4],
                                                 recup[3],
                                                 i[1],
                                                 recup[6],
                                                 qch])
                                        else:
                                            break
                                else:
                                    if len(resu_final1) < NBMax:
                                        if len(resu_ville[0]) == 5:
                                            if [[resu_ville[0][1], _cp],
                                             [_v0, resu_ville[0][2]],
                                             i[0],
                                             recup[4],
                                             '',
                                             i[1],
                                             recup[6],
                                             qch] not in resu_final1:
                                                resu_final1.append([[resu_ville[0][1], _cp],
                                                 [_v0, resu_ville[0][2]],
                                                 i[0],
                                                 recup[4],
                                                 '',
                                                 i[1],
                                                 recup[6],
                                                 qch])
                                        elif [[resu_ville[0][1], _cp],
                                         [_v0, resu_ville[0][3]],
                                         i[0],
                                         recup[4],
                                         '',
                                         i[1],
                                         recup[6],
                                         qch] not in resu_final1:
                                            resu_final1.append([[resu_ville[0][1], _cp],
                                             [_v0, resu_ville[0][3]],
                                             i[0],
                                             recup[4],
                                             '',
                                             i[1],
                                             recup[6],
                                             qch])
                                    if recup[3] != '' or i[0][0:lo] == recup[3]:
                                        if len(resu_final2) < NBMax:
                                            if len(resu_ville[0]) == 5:
                                                if [[resu_ville[0][1], _cp],
                                                 [_v0, resu_ville[0][2]],
                                                 i[0],
                                                 recup[4],
                                                 recup[3],
                                                 i[1],
                                                 recup[6],
                                                 qch] not in resu_final2:
                                                    resu_final2.append([[resu_ville[0][1], _cp],
                                                     [_v0, resu_ville[0][2]],
                                                     i[0],
                                                     recup[4],
                                                     recup[3],
                                                     i[1],
                                                     recup[6],
                                                     qch])
                                                    if (recup[3] + ' ' + recup[2]).strip() == i[0] and (recup[1] == '' or distanceVille(recup[1], resu_ville[0][0])[0] >= 0.85):
                                                        if [[resu_ville[0][1], _cp],
                                                         [_v0, resu_ville[0][2]],
                                                         i[0],
                                                         recup[4],
                                                         recup[3],
                                                         i[1],
                                                         recup[6],
                                                         qch] not in resu_final3:
                                                            resu_final3.append([[resu_ville[0][1], _cp],
                                                             [_v0, resu_ville[0][2]],
                                                             i[0],
                                                             recup[4],
                                                             recup[3],
                                                             i[1],
                                                             recup[6],
                                                             qch])
                                            elif [[resu_ville[0][1], _cp],
                                             [_v0, resu_ville[0][3]],
                                             i[0],
                                             recup[4],
                                             recup[3],
                                             i[1],
                                             recup[6],
                                             qch] not in resu_final2:
                                                resu_final2.append([[resu_ville[0][1], _cp],
                                                 [_v0, resu_ville[0][3]],
                                                 i[0],
                                                 recup[4],
                                                 recup[3],
                                                 i[1],
                                                 recup[6],
                                                 qch])
                                                if (recup[3] + ' ' + recup[2]).strip() == i[0] and (recup[1] == '' or distanceVille(recup[1], resu_ville[0][0])[0] >= 0.85):
                                                    if [[resu_ville[0][1], _cp],
                                                     [_v0, resu_ville[0][3]],
                                                     i[0],
                                                     recup[4],
                                                     recup[3],
                                                     i[1],
                                                     recup[6],
                                                     qch] not in resu_final3:
                                                        resu_final3.append([[resu_ville[0][1], _cp],
                                                         [_v0, resu_ville[0][3]],
                                                         i[0],
                                                         recup[4],
                                                         recup[3],
                                                         i[1],
                                                         recup[6],
                                                         qch])
                                        else:
                                            break
                                    elif i[0] == recup[2]:
                                        if len(resu_final2) < NBMax:
                                            if len(resu_ville[0]) == 5:
                                                if [[resu_ville[0][1], _cp],
                                                 [_v0, resu_ville[0][2]],
                                                 i[0],
                                                 recup[4],
                                                 recup[3],
                                                 i[1],
                                                 recup[6],
                                                 qch] not in resu_final2:
                                                    resu_final2.append([[resu_ville[0][1], _cp],
                                                     [_v0, resu_ville[0][2]],
                                                     i[0],
                                                     recup[4],
                                                     recup[3],
                                                     i[1],
                                                     recup[6],
                                                     qch])
                                                    if (recup[3] + ' ' + recup[2]).strip() == i[0] and (recup[1] == '' or distanceVille(recup[1], resu_ville[0][0])[0] >= 0.85):
                                                        if [[resu_ville[0][1], _cp],
                                                         [_v0, resu_ville[0][2]],
                                                         i[0],
                                                         recup[4],
                                                         recup[3],
                                                         i[1],
                                                         recup[6],
                                                         qch] not in resu_final3:
                                                            resu_final3.append([[resu_ville[0][1], _cp],
                                                             [_v0, resu_ville[0][2]],
                                                             i[0],
                                                             recup[4],
                                                             recup[3],
                                                             i[1],
                                                             recup[6],
                                                             qch])
                                            elif [[resu_ville[0][1], _cp],
                                             [_v0, resu_ville[0][3]],
                                             i[0],
                                             recup[4],
                                             recup[3],
                                             i[1],
                                             recup[6],
                                             qch] not in resu_final2:
                                                resu_final2.append([[resu_ville[0][1], _cp],
                                                 [_v0, resu_ville[0][3]],
                                                 i[0],
                                                 recup[4],
                                                 recup[3],
                                                 i[1],
                                                 recup[6],
                                                 qch])
                                                if (recup[3] + ' ' + recup[2]).strip() == i[0] and (recup[1] == '' or distanceVille(recup[1], resu_ville[0][0])[0] >= 0.85):
                                                    if [[resu_ville[0][1], _cp],
                                                     [_v0, resu_ville[0][3]],
                                                     i[0],
                                                     recup[4],
                                                     recup[3],
                                                     i[1],
                                                     recup[6],
                                                     qch] not in resu_final3:
                                                        resu_final3.append([[resu_ville[0][1], _cp],
                                                         [_v0, resu_ville[0][3]],
                                                         i[0],
                                                         recup[4],
                                                         recup[3],
                                                         i[1],
                                                         recup[6],
                                                         qch])
                                        else:
                                            break

                            if resu_final3 != []:
                                resu_final = resu_final3
                            elif resu_final2 != []:
                                resu_final = resu_final2
                            else:
                                resu_final = resu_final1
                    elif len(resu_ville) > 1:
                        resu_final1 = []
                        resu_final2 = []
                        resu_final3 = []
                        resu_final4 = []
                        resu_final44 = []
                        lo = len(recup[3])
                        _tbvoie = recup[2].split()
                        voie = MotDirecteur(_tbvoie)
                        _voie_romain = ''
                        if voie.isdigit():
                            if int(voie) < 100:
                                _voie_romain = ArabicToroman(int(voie))
                        if len(voie) == 1:
                            _nbm = 100
                            NBMax = 100
                        else:
                            _nbm = 10
                        voie1 = ''
                        if Appel != 'RNVP':
                            if len(voie) == 1 and len(_tbvoie) > 2:
                                voie1 = _tbvoie[-2]
                        resu2 = []
                        mem_deja1 = {}
                        mem_deja2 = {}
                        for ville in villes:
                            ville_mem = ville[:]
                            recup_0 = recup[0]
                            if recup_0 == '':
                                recup_0 = ville[2]
                            if [ville[1], ville[0]] not in resu2 and len(ville) < 10:
                                resu2.append([ville[1], ville[0]])
                                if ville[1] in mem_deja1:
                                    resu1 = mem_deja1[ville[1]]
                                else:
                                    resu1 = recherche_adr(ville[1], voie, _nbm, False, voiecomplete=_tbvoie, numvoie=recup[4], cpencours=recup_0, descrimination=Appel == 'RNVP')
                                    mem_deja1[ville[1]] = resu1
                                if voie1 != '':
                                    if ville[1] in mem_deja2:
                                        _resu1 = mem_deja2[ville[1]]
                                    else:
                                        _resu1 = recherche_adr(ville[1], voie1, _nbm, False, voiecomplete=_tbvoie[0:-1], numvoie=recup[4], cpencours=recup_0, descrimination=Appel == 'RNVP')
                                        mem_deja2[ville[1]] = resu1
                                    if resu1 == []:
                                        resu1 = _resu1
                                    elif _resu1 != []:
                                        if _resu1 != resu1:
                                            resu1 += _resu1
                                if resu1 != []:
                                    for j in resu1:
                                        qch = ''
                                        if len(j) == 6 and type(j[-1]) is list and j[-1][0] == 'W':
                                            qch = j[-1][1]
                                            j.pop(-1)
                                        _vij = ''
                                        _vld = ''
                                        if len(j) >= 4:
                                            if j[3] != '':
                                                try:
                                                    _vij0 = cpld_234[j[3]][0]
                                                    if _vij0[1] != '':
                                                        _vij = _vij0[0] + ' (LD. ' + _vij0[1] + ')'
                                                    else:
                                                        _vij = _vij0[0]
                                                except:
                                                    _vij = ville[0].strip()

                                            else:
                                                _vij = ville[0].strip()
                                        if _vij == '' or _vij == ville[0] or _vij[0:len(ville[0])] == ville[0]:
                                            if len(ville) == 3:
                                                if j[2] != codepostal:
                                                    _v0 = recup_cp(j[2], ville[1], recup[1])
                                                elif len(ville) == 6:
                                                    _v0 = ville[0] + ville[5]
                                                else:
                                                    _v0 = ville[0]
                                                _cp1 = recup_cpcedex(_v0, j[2], recup[0])
                                                if len(resu_final1) < NBMax:
                                                    if [[ville[1], _cp1[:]],
                                                     [_v0[:], ville[2]],
                                                     j[0],
                                                     recup[4],
                                                     '',
                                                     j[1],
                                                     recup[6],
                                                     qch] not in resu_final1:
                                                        resu_final1.append([[ville[1], _cp1[:]],
                                                         [_v0[:], ville[2]],
                                                         j[0],
                                                         recup[4],
                                                         '',
                                                         j[1],
                                                         recup[6],
                                                         qch])
                                                if recup[3] != '' or j[0][0:lo] == recup[3]:
                                                    if len(resu_final2) < NBMax:
                                                        if [[ville[1], _cp1[:]],
                                                         [_v0[:], ville[2]],
                                                         j[0],
                                                         recup[4],
                                                         recup[3],
                                                         j[1],
                                                         recup[6],
                                                         qch] not in resu_final2:
                                                            resu_final2.append([[ville[1], _cp1[:]],
                                                             [_v0[:], ville[2]],
                                                             j[0],
                                                             recup[4],
                                                             recup[3],
                                                             j[1],
                                                             recup[6],
                                                             qch])
                                                    else:
                                                        break
                                            else:
                                                if j[2] != ville[2] and j[2] != '':
                                                    if _pays == 'FRA' and ' CEDEX' in ville[0]:
                                                        j[2] = ville[4]
                                                    _v2 = j[2]
                                                    if len(ville) == 6:
                                                        _v0 = ville[0] + ville[5]
                                                    else:
                                                        _v0 = ville[0]
                                                else:
                                                    _v2 = ville[2]
                                                    if len(ville) == 6:
                                                        _v0 = ville[0] + ville[5]
                                                    else:
                                                        _v0 = ville[0]
                                                if len(resu_final1) < NBMax:
                                                    if len(j) >= 4 and _pays == 'FRA':
                                                        if j[3] == '':
                                                            if '(LD.' in _v0:
                                                                _v0 = _v0[0:_v0.index('(LD.')].strip()
                                                        else:
                                                            _v0 = _vij
                                                    if len(ville) == 5:
                                                        if [[ville[1], _v2[:]],
                                                         [_v0[:], ville[2], ville[3]],
                                                         j[0],
                                                         recup[4],
                                                         '',
                                                         j[1],
                                                         recup[6],
                                                         qch] not in resu_final1:
                                                            resu_final1.append([[ville[1], _v2[:]],
                                                             [_v0[:], ville[2], ville[3]],
                                                             j[0],
                                                             recup[4],
                                                             '',
                                                             j[1],
                                                             recup[6],
                                                             qch])
                                                    elif [[ville[1], _v2[:]],
                                                     [_v0[:], ville[3], ville[4]],
                                                     j[0],
                                                     recup[4],
                                                     '',
                                                     j[1],
                                                     recup[6],
                                                     qch] not in resu_final1:
                                                        resu_final1.append([[ville[1], _v2[:]],
                                                         [_v0[:], ville[3], ville[4]],
                                                         j[0],
                                                         recup[4],
                                                         '',
                                                         j[1],
                                                         recup[6],
                                                         qch])
                                                if recup[3] != '' or j[0][0:lo] == recup[3] or qch != '' and qch[0:lo] == recup[3]:
                                                    if len(resu_final2) < NBMax:
                                                        if len(ville) == 5:
                                                            if [[ville[1], _v2[:]],
                                                             [_v0[:], ville[2], ville[3]],
                                                             j[0],
                                                             recup[4],
                                                             recup[3],
                                                             j[1],
                                                             recup[6],
                                                             qch] not in resu_final2:
                                                                resu_final2.append([[ville[1], _v2[:]],
                                                                 [_v0[:], ville[2], ville[3]],
                                                                 j[0],
                                                                 recup[4],
                                                                 recup[3],
                                                                 j[1],
                                                                 recup[6],
                                                                 qch])
                                                        elif [[ville[1], _v2[:]],
                                                         [_v0[:], ville[3], ville[4]],
                                                         j[0],
                                                         recup[4],
                                                         recup[3],
                                                         j[1],
                                                         recup[6],
                                                         qch] not in resu_final2:
                                                            resu_final2.append([[ville[1], _v2[:]],
                                                             [_v0[:], ville[3], ville[4]],
                                                             j[0],
                                                             recup[4],
                                                             recup[3],
                                                             j[1],
                                                             recup[6],
                                                             qch])
                                                    if ville in resu_ville or '(LD.' in ville_mem[0]:
                                                        if len(resu_final3) < NBMax:
                                                            if len(ville) == 5:
                                                                if [[ville[1], _v2[:]],
                                                                 [_v0[:], ville[2], ville[3]],
                                                                 j[0],
                                                                 recup[4],
                                                                 recup[3],
                                                                 j[1],
                                                                 recup[6],
                                                                 qch] not in resu_final3:
                                                                    resu_final3.append([[ville[1], _v2[:]],
                                                                     [_v0[:], ville[2], ville[3]],
                                                                     j[0],
                                                                     recup[4],
                                                                     recup[3],
                                                                     j[1],
                                                                     recup[6],
                                                                     qch])
                                                                    if type(j[-1]) is list and j[-1][0] == 'W' and j[-1][1] == recup[2]:
                                                                        resu_final4.append([[ville[1], _v2[:]],
                                                                         [_v0[:], ville[2], ville[3]],
                                                                         j[0],
                                                                         recup[4],
                                                                         recup[3],
                                                                         j[1],
                                                                         recup[6],
                                                                         qch])
                                                                    elif (egalMD(j[0], recup[2], _voie_romain, recup[4]) or qch != '' and distance(qch, recup[2]) == 0) and (distanceVille(ville[0], recup[1])[0] == 1.0 or distanceVille(recup[1], _vld)[0] == 1.0) and egalMD(j[0], recup[2], _voie_romain, recup[4]):
                                                                        if [[ville[1], _v2[:]],
                                                                         [_v0[:], ville[2], ville[3]],
                                                                         j[0],
                                                                         recup[4],
                                                                         recup[3],
                                                                         j[1],
                                                                         recup[6],
                                                                         qch] not in resu_final4:
                                                                            resu_final4.append([[ville[1], _v2[:]],
                                                                             [_v0[:], ville[2], ville[3]],
                                                                             j[0],
                                                                             recup[4],
                                                                             recup[3],
                                                                             j[1],
                                                                             recup[6],
                                                                             qch])
                                                                        if distanceVille(ville[0], recup[1])[0] == 1.0 and (distance(j[0], recup[2]) == 0 or qch != '' and distance(qch, recup[2]) == 0) and [[ville[1], _v2[:]],
                                                                         [_v0[:], ville[2], ville[3]],
                                                                         j[0],
                                                                         recup[4],
                                                                         recup[3],
                                                                         j[1],
                                                                         recup[6],
                                                                         qch] not in resu_final44:
                                                                            resu_final44.append([[ville[1], _v2[:]],
                                                                             [_v0[:], ville[2], ville[3]],
                                                                             j[0],
                                                                             recup[4],
                                                                             recup[3],
                                                                             j[1],
                                                                             recup[6],
                                                                             qch])
                                                            elif [[ville[1], _v2[:]],
                                                             [_v0[:], ville[3], ville[4]],
                                                             j[0],
                                                             recup[4],
                                                             recup[3],
                                                             j[1],
                                                             recup[6],
                                                             qch] not in resu_final3:
                                                                resu_final3.append([[ville[1], _v2[:]],
                                                                 [_v0[:], ville[3], ville[4]],
                                                                 j[0],
                                                                 recup[4],
                                                                 recup[3],
                                                                 j[1],
                                                                 recup[6],
                                                                 qch])
                                                                if type(j[-1]) is list and j[-1][0] == 'W' and j[-1][1] == recup[2]:
                                                                    resu_final4.append([[ville[1], _v2[:]],
                                                                     [_v0[:], ville[3], ville[4]],
                                                                     j[0],
                                                                     recup[4],
                                                                     recup[3],
                                                                     j[1],
                                                                     recup[6],
                                                                     qch])
                                                                elif egalMD(j[0], recup[2], _voie_romain, recup[4]) or (distanceVille(ville[0], recup[1])[0] == 1.0 or distanceVille(recup[1], _vld)[0] == 1.0) and egalMD(j[0], recup[2], _voie_romain, recup[4]):
                                                                    resu_final4.append([[ville[1], _v2[:]],
                                                                     [_v0[:], ville[3], ville[4]],
                                                                     j[0],
                                                                     recup[4],
                                                                     recup[3],
                                                                     j[1],
                                                                     recup[6],
                                                                     qch])
                                                                    if distanceVille(ville[0], recup[1])[0] == 1.0 and distance(j[0], recup[2]) == 0:
                                                                        resu_final44.append([[ville[1], _v2[:]],
                                                                         [_v0[:], ville[3], ville[4]],
                                                                         j[0],
                                                                         recup[4],
                                                                         recup[3],
                                                                         j[1],
                                                                         recup[6],
                                                                         qch])
                                                        else:
                                                            break
                                                    elif recup[1] != '' and '(LD. ' + recup[1].split()[0] in ville[0]:
                                                        resu_final3.append([[ville[1], _v2[:]],
                                                         [_v0[:], ville[2], ville[3]],
                                                         j[0],
                                                         recup[4],
                                                         recup[3],
                                                         j[1],
                                                         recup[6],
                                                         qch])

                        if resu_final44 != []:
                            resu_final = resu_final44
                        elif resu_final4 != []:
                            resu_final = resu_final4
                        elif resu_final3 != []:
                            resu_final = resu_final3
                        elif resu_final2 != []:
                            resu_final = resu_final2
                        else:
                            resu_final = resu_final1
                else:
                    voie = MotDirecteur(recup[2].split())
                    if len(voie) == 1:
                        _nbm = 100
                        NBMax = 100
                    else:
                        _nbm = 10
                    trouve = []
                    resu2 = []
                    resu3 = []
                    for ville in villes:
                        recup_0 = recup[0]
                        if recup_0 == '':
                            recup_0 = ville[2]
                        if [ville[1], ville[0]] not in resu2 and len(ville) < 10:
                            resu2.append([ville[1], ville[0]])
                            v1 = recup[2].find(ville[0])
                            if v1 >= 0:
                                _voie1 = recup[2].replace(ville[0], '')
                                if _voie1 == '':
                                    voie1 = recup[2].split()[-1]
                                else:
                                    voie1 = _voie1.split()[-1]
                                resu_voie = recherche_adr(ville[1], voie1, _nbm, False, recup_0, voiecomplete=recup[2].split(), numvoie=recup[4], cpencours=recup_0, descrimination=Appel == 'RNVP')
                                if resu_voie == []:
                                    resu_voie = recherche_adr(ville[1], voie, _nbm, False, recup_0, voiecomplete=recup[2].split(), numvoie=recup[4], cpencours=recup_0, descrimination=Appel == 'RNVP')
                            else:
                                resu_voie = recherche_adr(ville[1], voie, _nbm, False, recup_0, voiecomplete=recup[2].split(), numvoie=recup[4], cpencours=recup_0, descrimination=Appel == 'RNVP')
                            if resu_voie != []:
                                resu4 = []
                                for i in resu_voie:
                                    if i[0] == 'CEDEX_ADR':
                                        resu3.append(i)
                                    else:
                                        resu4.append(i)

                                trouve.append([ville, resu4])

                    if len(trouve) >= 1:
                        trouve2 = []
                        if recup[3] != '':
                            for i in trouve:
                                for j in i[1]:
                                    if recup[3] in j[0]:
                                        trouve2.append([i[0], [j]])

                        if trouve2 != []:
                            trouve = trouve2
                        resu_final1 = []
                        resu_final2 = []
                        lo = len(recup[3])
                        resu2 = []
                        for i in trouve:
                            if True:
                                resu2.append(i[0][1])
                                for j in i[1]:
                                    qch = ''
                                    if len(j) == 6 and type(j[-1]) is list and j[-1][0] == 'W':
                                        qch = j[-1][1]
                                    if len(j) >= 5 and _pays == 'FRA' and (j[4] in cpld_234 or j[4] + '_' in cpld_234):
                                        if len(i[0]) >= 4:
                                            if j[4] in cpld_234:
                                                _v00 = cpld_234[j[4]]
                                            else:
                                                _v00 = cpld_234[j[4] + '_']
                                            _cedex = ''
                                            if 'CEDEX' in i[0][0]:
                                                _c = i[0][0].index('CEDEX')
                                                _cedex = ' ' + i[0][0][_c:].strip()
                                            if _v00[0][1] == '':
                                                _v0 = _v00[0][0] + _cedex
                                            else:
                                                _v0 = _v00[0][0] + _cedex + ' (LD. ' + _v00[0][1] + ')'
                                            if i[0][2] != j[2]:
                                                _cp = j[2]
                                            else:
                                                _cp = j[2]
                                            if len(resu_final1) < NBMax:
                                                if len(i[0]) >= 5:
                                                    if [[i[0][1], _cp[:]],
                                                     [_v0[:], i[0][2]],
                                                     j[0],
                                                     recup[4],
                                                     '',
                                                     j[1],
                                                     recup[6],
                                                     qch] not in resu_final1:
                                                        resu_final1.append([[i[0][1], _cp[:]],
                                                         [_v0[:], i[0][2]],
                                                         j[0],
                                                         recup[4],
                                                         '',
                                                         j[1],
                                                         recup[6],
                                                         qch])
                                                elif [[i[0][1], _cp[:]],
                                                 [_v0[:], i[0][3]],
                                                 j[0],
                                                 recup[4],
                                                 '',
                                                 j[1],
                                                 recup[6],
                                                 qch] not in resu_final1:
                                                    resu_final1.append([[i[0][1], _cp[:]],
                                                     [_v0[:], i[0][3]],
                                                     j[0],
                                                     recup[4],
                                                     '',
                                                     j[1],
                                                     recup[6],
                                                     qch])
                                            if recup[3] != '' or j[0][0:lo] == recup[3]:
                                                if len(resu_final2) < NBMax:
                                                    if [[i[0][1], _cp[:]],
                                                     [_v0[:], i[0][2]],
                                                     j[0],
                                                     recup[4],
                                                     recup[3],
                                                     j[1],
                                                     recup[6],
                                                     qch] not in resu_final2:
                                                        resu_final2.append([[i[0][1], _cp[:]],
                                                         [_v0[:], i[0][2]],
                                                         j[0],
                                                         recup[4],
                                                         recup[3],
                                                         j[1],
                                                         recup[6],
                                                         qch])
                                                else:
                                                    break
                                        else:
                                            if codepostal != j[2]:
                                                _cp = j[2]
                                                _v0 = recup_cp(j[2], i[0][1], recup[1])
                                            else:
                                                _cp = codepostal
                                                _v0 = i[0][0]
                                            _cp = recup_cpcedex(_v0, _cp, recup[0])
                                            if len(resu_final1) < NBMax:
                                                if [[i[0][1], _cp[:]],
                                                 [_v0[:], i[0][2]],
                                                 j[0],
                                                 recup[4],
                                                 '',
                                                 j[1],
                                                 recup[6],
                                                 qch] not in resu_final1:
                                                    resu_final1.append([[i[0][1], _cp[:]],
                                                     [_v0[:], i[0][2]],
                                                     j[0],
                                                     recup[4],
                                                     '',
                                                     j[1],
                                                     recup[6],
                                                     qch])
                                            if recup[3] != '' or j[0][0:lo] == recup[3]:
                                                if len(resu_final2) < NBMax:
                                                    if [[i[0][1], _cp[:]],
                                                     [_v0[:], i[0][2]],
                                                     j[0],
                                                     recup[4],
                                                     recup[3],
                                                     j[1],
                                                     recup[6],
                                                     qch] not in resu_final2:
                                                        resu_final2.append([[i[0][1], _cp[:]],
                                                         [_v0[:], i[0][2]],
                                                         j[0],
                                                         recup[4],
                                                         recup[3],
                                                         j[1],
                                                         recup[6],
                                                         qch])
                                                else:
                                                    break
                                    elif len(i[0]) >= 4:
                                        if i[0][2] != j[2]:
                                            _v0 = recup_cp(j[2], i[0][1], recup[1])
                                        else:
                                            _v0 = i[0][0]
                                        _cp = recup_cpcedex(_v0, j[2], recup[0])
                                        if len(resu_final1) < NBMax:
                                            if len(i[0]) >= 5:
                                                resu_final1.append([[i[0][1], _cp[:]],
                                                 [_v0[:], i[0][2]],
                                                 j[0],
                                                 recup[4],
                                                 '',
                                                 j[1],
                                                 recup[6],
                                                 qch])
                                            else:
                                                resu_final1.append([[i[0][1], _cp[:]],
                                                 [_v0[:], i[0][3]],
                                                 j[0],
                                                 recup[4],
                                                 '',
                                                 j[1],
                                                 recup[6],
                                                 qch])
                                        if recup[3] != '' or j[0][0:lo] == recup[3]:
                                            if len(resu_final2) < NBMax:
                                                if len(i[0]) >= 5:
                                                    resu_final2.append([[i[0][1], _cp[:]],
                                                     [_v0[:], i[0][2]],
                                                     j[0],
                                                     recup[4],
                                                     recup[3],
                                                     j[1],
                                                     recup[6],
                                                     qch])
                                                else:
                                                    resu_final2.append([[i[0][1], _cp[:]],
                                                     [_v0[:], i[0][3]],
                                                     j[0],
                                                     recup[4],
                                                     recup[3],
                                                     j[1],
                                                     recup[6],
                                                     qch])
                                            else:
                                                break
                                    else:
                                        if codepostal != j[2]:
                                            _cp = j[2]
                                            _v0 = recup_cp(j[2], i[0][1], recup[1])
                                        else:
                                            _cp = codepostal
                                            _v0 = i[0][0]
                                        _cp = recup_cpcedex(_v0, _cp, recup[0])
                                        if len(resu_final1) < NBMax:
                                            resu_final1.append([[i[0][1], _cp[:]],
                                             [_v0[:], i[0][2]],
                                             j[0],
                                             recup[4],
                                             '',
                                             j[1],
                                             recup[6],
                                             qch])
                                        if recup[3] != '' or j[0][0:lo] == recup[3]:
                                            if len(resu_final2) < NBMax:
                                                resu_final2.append([[i[0][1], _cp[:]],
                                                 [_v0[:], i[0][2]],
                                                 j[0],
                                                 recup[4],
                                                 recup[3],
                                                 j[1],
                                                 recup[6],
                                                 qch])
                                            else:
                                                break

                        if resu_final2 != []:
                            resu_final = resu_final2 + resu3
                        else:
                            resu_final = resu_final1 + resu3
            if _flag_mapcherchevoie and resu_format[1] in '<1>|<voie>|<num><1>|<num><voie>':
                r = recherche_ligne2(resu_format[2][-1])
                r1 = []
                nb = 0
                for i in r[0]:
                    vi = _mapinseecommune[i[0]]
                    r1.append([[i[0], i[2]],
                     [decode(vi[0]), '*', decode(vi[2])],
                     decode(adresse[str(int(i[1]))][0]),
                     recup[4],
                     '',
                     int(i[1]),
                     ''])
                    if nb > 20:
                        break
                    nb += 1

                if resu_final == []:
                    resu_final = r1
                else:
                    r2 = r1 + resu_final
                    resu_final = r2[:]
                vv = (recup[2] + ' ' + recup[1]).strip().split()
                tri = []
                for i in resu_final:
                    tri.append([distance_tri(i[2].split(), vv), i])

                tri.sort()
            if resu_final == []:
                resu_final = [[['', ''],
                  ['', ''],
                  chaine,
                  '',
                  '',
                  0,
                  '']]
                if resu_format != []:
                    if _regles.has_key(resu_format[1]):
                        quelformat = quelformat + 1
                        if quelformat >= len(_regles[resu_format[1]]):
                            break
                    else:
                        break
                else:
                    break
            else:
                for i in resu_final:
                    if i != [] and i[0] != 'CEDEX_ADR' and i[0] != 'CEDEXA':
                        t1 = i[2].split()
                        s1 = i[2]
                        if i[3] != '':
                            t2 = i[3].split()
                            if t1 != [] and t2[-1] == t1[0]:
                                t1.pop(0)
                            if t2[0:len(t2) / 2] == t2[len(t2) / 2:]:
                                i[3] = ' '.join(t2[0:len(t2) / 2])
                        i[4] = ''
                        if i[4] == '':
                            if len(t1) > 0:
                                if _voie_decoupe.has_key(t1[0].upper()):
                                    _vd = _voie_decoupe[t1[0].upper()]
                                    if str(type(_vd[0])) == "<type 'list'>":
                                        i[4] = ' '.join(_vd[0])
                                    else:
                                        i[4] = _vd[0]
                                    for j in _vd[1:]:
                                        if str(type(j)) == "<type 'list'>":
                                            if t1[0:len(j)][0].upper() == j[0]:
                                                if _pays != 'FRA':
                                                    _fl_tp = ' '.join(t1[0:len(j)]).strip()
                                                else:
                                                    _fl_tp = ' '.join(j).strip()
                                                if len(j) < len(t1):
                                                    _ok = True
                                                    for k in range(0, len(j)):
                                                        if j[k] != t1[k]:
                                                            _ok = False
                                                            break

                                                    if _ok:
                                                        i[4] = _fl_tp
                                                        break
                                        elif t1[0].upper() == j:
                                            i[4] = j
                                            break

                        s2 = ' '.join(t1).strip()
                        if i[4] != '':
                            if s2[0:len(i[4])].upper() == i[4].upper():
                                if len(t1) > 0 and len(i[4]) < len(t1[0]):
                                    i[4] = t1[0]
                                else:
                                    i[4] = s2[0:len(i[4])]
                                s2 = s2[len(i[4]) + 1:][:]
                        if s1 != s2:
                            i[2] = s2[:]

                if len(resu_final) > 1:
                    recup1 = recup[1].split()
                    if len(recup1) > 1:
                        resu_final2 = []
                        for i in resu_final:
                            i1 = i[1][0].upper().split()
                            fait = True
                            for j in recup1:
                                if j not in i1:
                                    fait = False
                                    break

                            if fait:
                                resu_final2.append(i[:])

                        if resu_final2 != []:
                            resu_final = resu_final2[:]
                if len(resu_final) > 1:
                    if recup[3] != '':
                        _recup = recup[2].replace(recup[3], '').strip()
                    else:
                        _recup = recup[2].strip()
                    decoupe = _recup.split()
                    vdist = len(_recup) - int(len(_recup) * 0.9)
                    vdist2 = len(_recup) - int(len(_recup) * 0.8)
                    if len(decoupe) > 1:
                        resu_final2 = []
                        resu_final3 = []
                        resu_final4 = []
                        for i in resu_final:
                            recup_0 = recup[0]
                            if recup_0 == '':
                                recup_0 = i[0][1]
                            mts = [i[2].upper()]
                            try:
                                if i[7] != '':
                                    mts.append(i[7].upper())
                            except:
                                pass

                            for rf in mts:
                                if (_recup.strip() == rf or _recup.strip() == (i[4] + ' ' + rf).strip() or recup[2] == rf) and distanceVille(i[1][0], recup[1])[0] >= 0.9 or distanceVille(i[1][0], recup[1])[0] >= 0.9 and TousLesMots(decoupe, rf.split()):
                                    if [[0, distance(i[0][1], cpdefaut)], i] not in resu_final4:
                                        resu_final4.append([[0, distance(i[0][1], cpdefaut)], i[:]])
                                        if len(resu_final4) > NBMax:
                                            break
                                elif resu_final4 == []:
                                    if distanceVille(i[1][0], recup[1])[0] >= 0.9 and recup_0 == i[0][1] and distance(rf, _recup) <= vdist2:
                                        vl = distance(i[4] + ' ' + i[2], _recup)
                                        resu_final4.append([[vl, distance(i[0][1], cpdefaut)], i[:]])
                                    else:
                                        v1 = testdistance2(decoupe, rf)
                                        if v1 <= 0.34:
                                            if [[v1, distance(i[0][1], cpdefaut)], i] not in resu_final3:
                                                resu_final3.append([v1, i[:]])
                                                if len(resu_final3) > NBMax:
                                                    break
                                        elif distance(rf, _recup) <= vdist:
                                            if [i] not in resu_final2:
                                                resu_final2.append(i[:])
                                            if len(resu_final2) > NBMax:
                                                break
                                elif resu_final4 != []:
                                    if distanceVille(i[1][0], recup[1])[0] >= 0.9 and recup_0 == i[0][1] and distance(rf, _recup) <= vdist2:
                                        vl = distance(i[4] + ' ' + i[2], _recup)
                                        if [[vl, distance(i[0][1], cpdefaut)], i[:]] not in resu_final4:
                                            resu_final4.append([[vl, distance(i[0][1], cpdefaut)], i[:]])

                        if resu_final4 != []:
                            resu_final4.sort()
                            resu_final = []
                            for i in resu_final4:
                                resu_final.append(i[1])

                        elif resu_final3 != []:
                            resu_final3.sort()
                            resu_final = []
                            for i in resu_final3:
                                resu_final.append(i[1])

                        elif resu_final2 != []:
                            resu_final = resu_final2
                if len(resu_final) > 1:
                    resu_final1 = []
                    resu_final2 = []
                    resu_final3 = []
                    ld = []
                    for i in resu_final:
                        if i[3] != '':
                            va1 = RechNumVoie([['',
                              '',
                              '',
                              i[3],
                              '',
                              i[5]]])
                            if va1 != []:
                                if va1[0][6] == 1 or cpdefaut != '' or cpdefaut == i[0][1]:
                                    resu_final1.append(i[:])
                                    if mem_codepostal != '':
                                        if i[0][1] == mem_codepostal:
                                            resu_final2.append(i[:])
                                            if mem_ville != '' and mem_ville.upper() == i[1][0]:
                                                resu_final3.append(i[:])
                                        elif mem_ville != '' and mem_ville.upper() == i[1][0]:
                                            resu_final2.append(i[:])
                                    elif mem_ville != '' and mem_ville.upper() == i[1][0]:
                                        resu_final2.append(i[:])
                        if i[4] == 'LIEU DIT':
                            ld.append(i)

                    if resu_final3 != []:
                        resu_final = resu_final3
                    elif resu_final2 != []:
                        resu_final = resu_final2
                    elif resu_final1 != []:
                        resu_final = resu_final1
                    if len(resu_final) > 1 and len(ld) == 1:
                        resu_final = ld
                break

        if len(resu_final) > 1 and cpdefaut != '' and recup[3] != '' and recup[2] != '':
            resu_final1 = []
            md = recup[2].split()[-1]
            for i in resu_final:
                if i[4] != '' and i[4] == recup[3] and i[2].split()[-1] == md:
                    resu_final1.append(i[:])

            if resu_final1 != []:
                resu_final = resu_final1
        if recup[4] == '' and recup[2] != '':
            ts = recup[2].split()
            if ts[0][0].isdigit():
                adr = ' '.join(ts[1:])
                resu_final1 = []
                for i in resu_final:
                    if (i[4] + ' ' + i[2]).strip() == adr:
                        va1 = RechNumVoie([['',
                          '',
                          '',
                          ts[0],
                          '',
                          i[5]]])
                        if va1 != []:
                            if va1[0][6] == 1:
                                i[3] = ts[0]
                                resu_final1.append(i[:])

                if resu_final1 != []:
                    resu_final = resu_final1[:]
        if len(resu_final) > 1 and recup[2].count(' ') > 1:
            _recup = recup[2][len(recup[3]):].strip().split()
            _recup.reverse()
            _recup.pop(0)
            _mot = ''
            for i in _recup:
                if i not in _articles and len(i) > 2:
                    _mot = i
                    break

            if _mot != '':
                resu_final1 = []
                for i in resu_final:
                    if _mot in i[2].split():
                        resu_final1.append(i)

                if resu_final1 != []:
                    resu_final = resu_final1[:]
        resu_f = []
        for i in range(0, len(resu_final)):
            if type(resu_final[i][5]) is str and resu_final[i][5] != '' and resu_final[i][5][0] == 'W':
                if resu_final[i][5] in changenomvoie:
                    _cv = changenomvoie[resu_final[i][5]]
                    if type(_cv) is list:
                        resu_final[i][5] = _cv[0]
                    else:
                        resu_final[i][5] = _cv
            if len(resu_final[i][1]) > 2:
                rs = resu_final[i][0][0] + '_' + resu_final[i][1][2]
                if resu_final[i][1][2] == '' or '(LD.' in resu_final[i][1][0]:
                    _r = resu_final[i][5]
                    if _r != '':
                        try:
                            if resu_final[i][1][2] == '':
                                _r = adresse[_r][2]
                                rs = _r + '_'
                            else:
                                rs = adresse[_r][2]
                        except:
                            rs = '!'

                if cpld_234.has_key(rs):
                    va = cpld_234[rs]
                    if va[0][1] != '':
                        resu_final[i][1][0] = va[0][0] + ' (LD. ' + va[0][1] + ')'
                if resu_final[i] not in resu_f:
                    resu_f.append(resu_final[i])
            else:
                resu_final[i][1].append(resu_final[i][0][1])
                resu_f.append(resu_final[i])

        if len(resu_f) > NBMax:
            return resu_f[0:NBMax]
        if len(resu_f) == 1 and resu_f[0][0] == ['', ''] and recup[1] != '' and ' CEDEX ' in recup[1] + ' ':
            try:
                if len(villes) >= 1:
                    insee = villes[0][1]
                else:
                    insee = ''
                if recup[3] != '' and recup[2][0:len(recup[3])] == recup[3]:
                    resu_f = [[[insee, recup[0]],
                      [recup[1], '*', ''],
                      recup[2][len(recup[3]):].strip(),
                      recup[4],
                      recup[3],
                      '',
                      '']]
                else:
                    resu_f = [[[insee, recup[0]],
                      [recup[1], '*', ''],
                      recup[2],
                      recup[4],
                      recup[3],
                      '',
                      '']]
            except:
                pass

        return resu_f


def lieudit(nomfichier, nom2fichier):
    _cherche = {}
    ff = open(nomfichier)
    _cpinterne = {}
    i = 0
    j = 0
    vm = '*'
    for line in ff:
        v1 = line[0:5]
        v2 = line[5:6]
        if vm != v1 and (v2 == ' ' or v2 == '*'):
            _cpinterne[v1] = line[6:44].strip()
            vm = v1
        if v2 == 'L':
            v3 = line[6:44].strip()
            v4 = line[44:49]
            v5 = line[50:].strip()
            if v3 != v5:
                if not _cherche.has_key(v4 + v5):
                    _cherche[v4 + v5] = ['', v3]
                elif v3 not in _cherche[v4 + v5]:
                    _cherche[v4 + v5].append(v3)
            i += 1

    ff.close()
    ff = open(nomfichier)
    i = 0
    j = 0
    for line in ff:
        v1 = line[0:5]
        v2 = line[5:6]
        if v2 == ' ' or v2 == '*':
            v3 = line[6:44].strip()
            v4 = line[44:49]
            v5 = line[50:].strip()
            if _cherche.has_key(v4 + v5) and _cherche[v4 + v5][0] == '':
                _cherche[v4 + v5][0] = v1[:]

    ff.close()
    ff = open(nom2fichier)
    for line in ff:
        if line[0] == 'L' and line[91] == '1':
            v1 = line[93:98]
            v2 = line[105:].strip()
            v3 = line[98:103]
            v4 = line[39:89].strip()
            if True:
                if not _cherche.has_key(v1 + v2):
                    _cherche[v1 + v2] = [v3, v4]
                elif v4 not in _cherche[v1 + v2]:
                    _cherche[v1 + v2].append(v4)

    ff.close()
    for i in _cherche.keys():
        va = _cherche[i]
        cp = i[0:5]
        nom = i[5:] + ' (LD. '
        for j in va[1:]:
            if cp_234.has_key(cp):
                enc = encode(nom + j + ')')
                tr = False
                for jj in cp_234[cp]:
                    if enc in jj:
                        tr = True
                        break

                if not tr:
                    cp_234[cp].append([enc[:], va[0][:], '*'])
            if cp_234.has_key(cp[0:_lenDepartement]):
                enc = encode(nom + j + ')')
                tr = False
                for jj in cp_234[cp[0:_lenDepartement]]:
                    if enc in jj:
                        tr = True
                        break

                if not tr:
                    cp_234[cp[0:_lenDepartement]].append([enc[:],
                     va[0][:],
                     cp,
                     '*'])
            mindex = va[0][:]
            mcp = cp[:]
            nomcomplet = nom + j + ')'
            mcommune = j[:]
            mprovince = '*'
            mtabcom = mcommune.split()
            for imt in mtabcom:
                if len(imt) > 2:
                    try:
                        _simt = QSoundex.getKey(PhonexCdrVilleListe(imt))[0]
                        simt = str(_simt)
                    except:
                        simt = _simt.encode('utf-8')

                    if mapville2.has_key(simt):
                        if encode(nomcomplet) not in mapville2[simt]:
                            mapville2[simt] = mapville2[simt] + [encode(nomcomplet)]
                    else:
                        mapville2[simt] = [encode(nomcomplet)]

            resu_commune = Combine(mcommune.translate(_trans, '').upper().split(), False, True)
            for ii in resu_commune:
                resu_1 = ''
                for jj in ii:
                    if resu_1 == '':
                        resu_1 = jj
                    else:
                        resu_1 = resu_1 + ' ' + jj

                if mapville.has_key(resu_1):
                    fl_trouve = False
                    for jj in mapville[resu_1]:
                        if jj[1] == mindex:
                            fl_trouve = True
                            break

                    if not fl_trouve:
                        mapville[resu_1] = mapville[resu_1] + [[encode(nomcomplet),
                          mindex,
                          mcp,
                          mprovince]]
                else:
                    mapville[resu_1] = [[encode(nomcomplet),
                      mindex,
                      mcp,
                      mprovince]]

    return True


def lieudit_NV(nom, lieudit, cp, insee):
    enc = encode(nom + ' (LD. ' + lieudit + ')')
    if cp_234.has_key(cp):
        tr = False
        for jj in cp_234[cp]:
            if enc in jj:
                tr = True
                break

        if not tr:
            cp_234[cp].append([enc[:], insee, '*'])
    else:
        cp_234[cp] = [[enc[:], insee, '*']]
    mindex = insee
    mcp = cp[:]
    nomcomplet = nom + ' (LD. ' + lieudit + ')'
    mcommune = nom
    mprovince = '*'
    mtabcom = lieudit.split()
    for imt in mtabcom:
        if len(imt) > 2:
            try:
                _simt = QSoundex.getKey(PhonexCdrVilleListe(imt))[0]
                simt = str(_simt)
            except:
                simt = _simt.encode('utf-8')

            if mapville2.has_key(simt):
                if encode(nomcomplet) not in mapville2[simt]:
                    mapville2[simt] = mapville2[simt] + [encode(nomcomplet)]
            else:
                mapville2[simt] = [encode(nomcomplet)]

    resu_commune = Combine(lieudit.translate(_trans, '').upper().split(), False, True)
    for ii in resu_commune:
        resu_1 = ''
        for jj in ii:
            if resu_1 == '':
                resu_1 = jj
            else:
                resu_1 = resu_1 + ' ' + jj

        if mapville.has_key(resu_1):
            fl_trouve = False
            for jj in mapville[resu_1]:
                if jj[1] == mindex:
                    fl_trouve = True
                    break

            if not fl_trouve:
                mapville[resu_1] = mapville[resu_1] + [[encode(nomcomplet),
                  mindex,
                  mcp,
                  mprovince]]
        else:
            mapville[resu_1] = [[encode(nomcomplet),
              mindex,
              mcp,
              mprovince]]
        moit = int(len(resu_1) * 0.4)
        while resu_1[moit] == ' ':
            moit += 1

        _fl_moit = moit
        if moit > 3:
            moit = 3
        for i1 in range(moit, len(resu_1)):
            _fl_fait = False
            if i1 < _fl_moit:
                if mapville3.has_key(resu_1[0:i1]):
                    _fl_fait = len(mapville3[resu_1[0:i1]]) < 40
                else:
                    _fl_fait = True
            if i1 >= _fl_moit or _fl_fait:
                if mapville3.has_key(resu_1[0:i1]):
                    fl_trouve = False
                    for j in mapville3[resu_1[0:i1]]:
                        if j[1] == mindex:
                            fl_trouve = True
                            break

                    if not fl_trouve:
                        mapville3[resu_1[0:i1]] = mapville3[resu_1[0:i1]] + [[encode(nomcomplet),
                          mindex,
                          mcp,
                          mprovince]]
                else:
                    mapville3[resu_1[0:i1]] = [[encode(nomcomplet),
                      mindex,
                      mcp,
                      mprovince]]

    tbb = lieudit.split()
    if len(tbb) > 1:
        resu_1 = ''.join(tbb)
        moit = int(len(resu_1) * 0.4)
        while resu_1[moit] == ' ':
            moit += 1

        _fl_moit = moit
        if moit > 3:
            moit = 3
        for i1 in range(moit, len(resu_1)):
            _fl_fait = False
            if i1 < _fl_moit:
                if mapville3.has_key(resu_1[0:i1]):
                    _fl_fait = len(mapville3[resu_1[0:i1]]) < 40
                else:
                    _fl_fait = True
            if i1 >= _fl_moit or _fl_fait:
                if mapville3.has_key(resu_1[0:i1]):
                    fl_trouve = False
                    for j in mapville3[resu_1[0:i1]]:
                        if j[1] == mindex:
                            fl_trouve = True
                            break

                    if not fl_trouve:
                        mapville3[resu_1[0:i1]] = mapville3[resu_1[0:i1]] + [[encode(nomcomplet),
                          mindex,
                          mcp,
                          mprovince]]
                else:
                    mapville3[resu_1[0:i1]] = [[encode(nomcomplet),
                      mindex,
                      mcp,
                      mprovince]]

    return True


def initialisehexacle3(fichier, pays):
    global _protocol
    if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse6.dqe'):
        os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse6.dqe')
    maphexa3 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse6.dqe', 'c', protocol=_protocol)
    if os.path.isfile(fichier):
        ff = open(fichier)
        li = 1
        flag_upu = False
        for line in ff:
            if li == 0:
                if not flag_upu:
                    idvoie = str(int(line[10:18])) + '_' + line[23:28].strip()
                    libelle = line[28:66].strip()
                else:
                    tb = line.split('\n')[0].split('\t')
                    if len(tb) > 2:
                        idvoie = tb[0].strip() + '_' + tb[1].strip()
                        libelle = tb[2]
                    else:
                        idvoie = tb[0].strip()
                        libelle = tb[1]
                if maphexa3.has_key(idvoie):
                    maphexa3[idvoie] = maphexa3[idvoie] + [encode(libelle)]
                else:
                    maphexa3[idvoie] = [encode(libelle)]
            else:
                li -= 1
                if 'LA POSTE' not in line:
                    flag_upu = True

        ff.close()
    else:
        print ('fichier hexaligne non trouve:', fichier)
    maphexa3.close()


def Tri_CompteVoie(fichier_voie, fichier_numero):
    ff = open(fichier_voie)
    tb = {}
    regroupe = []
    mem = '*'
    pre = True
    for line in ff:
        if line[0] == 'L':
            insee1 = line[7:12]
            ville1 = line[116:148].strip()
            if mem == ville1:
                if pre:
                    regroupe.append([insee])
                    pre = False
                if insee1 not in regroupe[-1]:
                    regroupe[-1].append(insee1)
            else:
                if regroupe != [] and len(regroupe[-1]) == 1:
                    regroupe.pop(-1)
                pre = True
            insee = insee1[:]
            ville = ville1[:]
            mem = ville

    ff.close()
    ff = open(fichier_numero)
    entete = True
    nbvoie = {}
    ii = 1
    for line in ff:
        if not entete:
            insee = line[23:28]
            if nbvoie.has_key(insee):
                nbvoie[insee] += 1
            else:
                nbvoie[insee] = 1
        else:
            entete = False

    ff.close()
    for i in regroupe:
        compte = 0
        for j in i:
            try:
                compte += nbvoie[str(j)]
            except:
                print j

        for j in i:
            try:
                nbvoie[str(j)] = compte
            except:
                print j

    nm = os.path.dirname(fichier_voie)
    if nm == '':
        f = open('cp_countpos.dqe', 'wb')
    else:
        f = open(nm + '\\cp_countpos.dqe', 'wb')
    pickle.dump(nbvoie, f)
    f.close()


def CreeProvince(fichierEntree, koreanonly = False):
    ff = open(fichierEntree)
    path = os.path.dirname(fichierEntree)
    if path[-1] != '/':
        path += '/'
    if os.path.isfile(path + 'prov_234.dqe'):
        os.remove(path + 'prov_234.dqe')
    fw = shelve.open(path + 'prov_234.dqe', 'c', protocol=_protocol)
    prov_n = []
    prov_n0 = []
    prov_k0 = []
    prov_k = []
    metro_n = {}
    metro_k = {}
    recap_nk = {}
    i = 0
    for line in ff:
        if line[0:3] == '\xef\xbb\xbf':
            line = line[3:]
        tb = line.split('\n')[0].split('\t')
        if '_' in tb[1]:
            if tb[7] not in prov_k0:
                prov_k0 += [tb[7]]
                prov_k += [[tb[7], i, tb[6]]]
        elif tb[7] not in prov_n0:
            prov_n0 += [tb[7]]
            prov_n += [[tb[7], i, tb[6]]]
            i += 1
        if '_' in tb[1]:
            if not metro_k.has_key(tb[6]):
                metro_k[tb[6]] = [tb[-1], [tb[5], tb[4]]]
            elif [tb[5], tb[4]] not in metro_k[tb[6]]:
                metro_k[tb[6]] += [[tb[5], tb[4]]]
        elif not metro_n.has_key(tb[6]):
            metro_n[tb[6]] = [tb[-1], [tb[5], tb[4]]]
        elif [tb[5], tb[4]] not in metro_n[tb[6]]:
            metro_n[tb[6]] += [[tb[5], tb[4]]]
        if recap_nk.has_key(tb[4]):
            recap_nk[tb[4]] += [[tb[1], tb[3]]]
        else:
            recap_nk[tb[4]] = [[tb[-1], tb[-3]], [tb[1], tb[3]]]

    prov_n.sort()
    if koreanonly:
        for i in prov_k:
            if fw.has_key('*'):
                fw['*'] += [[i[0], i[2]]]
            else:
                fw['*'] = [[i[0], i[2]]]

        for i in recap_nk.keys():
            fw[i] = recap_nk[i]

        for i in metro_k.keys():
            fw[i] = metro_k[i]

    else:
        for i in prov_n:
            if fw.has_key('*'):
                fw['*'] += [[i[0], i[2]]]
            else:
                fw['*'] = [[i[0], i[2]]]

        for i in prov_n:
            fw['*'] += [[prov_k[i[1]][0], prov_k[i[1]][2]]]

        for i in recap_nk.keys():
            fw[i] = recap_nk[i]

        for i in metro_n.keys():
            v = metro_n[i][1:]
            v.sort()
            fw[i] = [metro_n[i][0]] + v

        for i in metro_k.keys():
            fw[i] = metro_k[i]

    ff.close()
    fw.close()


def genere_lieu_dit(fichier, sortie):
    ff = open(fichier)
    if os.path.isfile(sortie):
        os.remove(sortie)
    ld = shelve.open(sortie, 'c', protocol=_protocol)
    entete = True
    for line in ff:
        if entete:
            entete = False
        else:
            tb = line.strip()
            if len(tb) > 100:
                cle = tb[6:11]
                cp = tb[89:94]
                va = tb[51:89].strip()
                vb = tb[94:126].strip()
                if tb[50] == 'M' and va != '' and va != vb:
                    valeur = [cle, va, vb]
                    if ld.has_key(cp):
                        if valeur not in ld[cp]:
                            ld[cp] += [valeur]
                    else:
                        ld[cp] = [valeur]

    ff.close()
    ld.close()


class TestConnect(object):

    @jsonp
    def index(self, chaine, param1 = '', param2 = '', param3 = '', param4 = ''):
        if chaine == None:
            _re = simplejson.dumps({})
            return _re
        else:
            if chaine.find('ReopenDataBase') >= 0:
                if type(Licence.client_ref).__name__ == 'list' or chaine.find(Licence.client_ref) >= 0:
                    print '>> Chargement des nouvelles bases'
                    fermeture()
                    chargement(_pays)
                    print '<< Chargement Effectue'
                    data = {'test': {'reponse': '<< Chargement Effectue'}}
            elif chaine.find('CloseDataBase') >= 0:
                if type(Licence.client_ref).__name__ == 'list' or chaine.find(Licence.client_ref) >= 0:
                    print '>> Fermeture des bases courantes'
                    fermeture()
                    data = {'test': {'reponse': '>> Fermeture des bases courantes'}}
            elif chaine.find('VersionINI') >= 0:
                if os.path.isfile(_pathinitial + 'updateINI/version.ini'):
                    ff = open(_pathinitial + 'updateINI/version.ini')
                    a = ''
                    for line in ff:
                        a += line

                    ff.close()
                    data = {'test': {'reponse': a}}
            elif chaine.find('DQEParamINI') >= 0:
                if os.path.isfile(_pathinitial + 'updateINI/dqeparam.ini'):
                    ff = open(_pathinitial + 'updateINI/dqeparam.ini')
                    a = ''
                    for line in ff:
                        a += line.decode('iso-8859-1').encode('utf-8')

                    ff.close()
                    data = {'test': {'reponse': a}}
            elif chaine.find('SaisieAdresseINI') >= 0:
                if os.path.isfile(_pathinitial + 'updateINI/SaisieAdresse.ini'):
                    ff = open(_pathinitial + 'updateINI/SaisieAdresse.ini')
                    a = ''
                    for line in ff:
                        a += line.decode('iso-8859-1').encode('utf-8')

                    ff.close()
                    data = {'test': {'reponse': a}}
            elif chaine == 'DQESQL' and param1 != '' and param2 != '' and _urltampon != '':
                f1 = urllib.urlencode({'requete': param1,
                 'cle': param2})
                if _urltampon[-1] == '/':
                    vurl = _urltampon + 'DQEREQUETE/?' + f1
                else:
                    vurl = _urltampon + '/DQEREQUETE/?' + f1
                try:
                    _opu = urllib2.urlopen(vurl)
                    retour = _opu.read()
                    _opu.close()
                    return retour
                except Exception as e:
                    pass

            elif chaine == 'DQECOMPTEUR' and param1 != '' and param2 != '' and _urltampon != '':
                f1 = urllib.urlencode({'Data': param1,
                 'Cle': param2})
                if _urltampon[-1] == '/':
                    vurl = _urltampon + 'DQESTAT2/?' + f1
                else:
                    vurl = _urltampon + '/DQESTAT2/?' + f1
                try:
                    _opu = urllib2.urlopen(vurl)
                    retour = _opu.read()
                    _opu.close()
                    return {}
                except Exception as e:
                    pass

            else:
                if chaine == 'DQEMAJLICENCE' and param1 != '' and param2 != '' and _urllicence != '':
                    if param3 == '':
                        f1 = urllib.urlencode({'client_ref': param1,
                         'code_match': param2,
                         'linkto': 'ADR'})
                    else:
                        f1 = urllib.urlencode({'client_ref': param1,
                         'code_match': param2,
                         'linkto': param3})
                    if _urllicence[-1] == '/':
                        vurl = _urllicence + 'DQEMAJLICENCE/?' + f1
                    else:
                        vurl = _urllicence + '/DQEMAJLICENCE/?' + f1
                    try:
                        _opu = urllib2.urlopen(vurl)
                        retour = _opu.read()
                    except Exception as e:
                        retour = ''

                    try:
                        _opu.close()
                    except:
                        pass

                    return retour
                if chaine == 'GETIDPROCESS' and param1 != '':
                    vkey = sha.sha('a8978BZ!GETIDPROCESS98@29bzh3').hexdigest().upper()
                    if vkey == param1:
                        a = [os.getpid()]
                        a.extend(os.times())
                        return simplejson.dumps(a)
                    else:
                        return ''
                elif chaine.find('DQEIP') >= 0:
                    try:
                        data = {'Adresse IP': {'reponse': ip}}
                    except:
                        data = {'Adresse IP': {'reponse': 'Inconnue'}}

                else:
                    data = {'test': {'reponse': chaine}}
            return simplejson.dumps(data)

    index.exposed = True


class RecupCpInter(object):

    @jsonp
    def index(self, Pays, CodePostal, Instance, Licence = '', Alpha = 'False', IDLocalite = '', Version = '1.0'):
        global _json_acao
        retour = {}
        if Pays == None or CodePostal == None or len(Pays) != 3:
            try:
                cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
                cherrypy.response.headers['Server'] = 'DQE Server'
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
            except:
                pass

            _re = simplejson.dumps(retour)
            return _re
        else:
            _nativecharset = 'true'
            if '-' in Pays:
                Pays = Pays.split('-')[0]
                _nativecharset = 'false'
            if ExisteCompteInter(Licence, Pays):
                if _flag_melissa:
                    try:
                        vok = True
                        lic_melissa = _dicomelissa[Licence]['id']
                    except:
                        lic_melissa = ''
                        vok = False

                    if lic_melissa == '':
                        vok = False
                    if vok:
                        pays_iso2 = _dicopaysiso[Pays]
                        if Alpha.upper() == 'TRUE':
                            Alpha = True
                        else:
                            Alpha = False
                        urlServer = ''
                        if Alpha:
                            try:
                                _f = {'id': lic_melissa,
                                 'Locality': CodePostal,
                                 'country': pays_iso2,
                                 'maxrecords': 20,
                                 'format': 'json',
                                 'opt': 'OUTPUTSCRIPT:NOCHANGE',
                                 'nativecharset': 'true'}
                                urlServer = 'http://expressentry.melissadata.net/jsonp/GlobalExpressLocalityAdministrativeArea?' + urllib.urlencode(_f)
                            except Exception as ex:
                                print str(ex)

                        else:
                            try:
                                _f = {'id': lic_melissa,
                                 'postalcode': CodePostal,
                                 'country': pays_iso2,
                                 'maxrecords': 20,
                                 'format': 'json',
                                 'opt': 'OUTPUTSCRIPT:NOCHANGE',
                                 'nativecharset': 'true'}
                                urlServer = 'http://expressentry.melissadata.net/jsonp/GlobalExpressPostalCode?' + urllib.urlencode(_f)
                            except Exception as ex:
                                print str(ex)

                        if urlServer != '':
                            try:
                                _opu = urllib2.urlopen(urlServer)
                                retour2 = _opu.read()
                                dico = {}
                                vok = True
                                retour2 = retour2.replace('null', '""')
                                ret = eval(retour2)
                                dico = UserDict.UserDict(eval(retour2))
                            except Exception as e:
                                print ('error : ', str(e))
                                vok = False

                            try:
                                _opu.close()
                            except:
                                pass

                            if vok:
                                taille_dico = len(dico['d']['Results'])
                                memville = []
                                for i in range(0, taille_dico):
                                    tp = {}
                                    tpnb = i + 1
                                    try:
                                        cp = dico['d']['Results'][i]['Address']['PostalCodePrimary']
                                        villetp = dico['d']['Results'][i]['Address']['Locality']
                                    except Exception as e:
                                        pass

                                    try:
                                        _prov = dico['d']['Results'][i]['Address']['CountrySubdivisionCode']
                                        if '-' in _prov:
                                            _prov = '-'.join(_prov.split('-')[1:])
                                    except:
                                        _prov = '*'

                                    if [villetp, cp] not in memville:
                                        tp['Province'] = _prov
                                        tp['Pays'] = Pays
                                        tp['Instance'] = '1'
                                        tp['CodePostal'] = cp
                                        tp['SousLocalite'] = ''
                                        tp['LieuDit'] = ''
                                        tp['Latitude'] = '0'
                                        tp['Longitude'] = '0'
                                        tp['Localite'] = capital(villetp, Pays)
                                        tp['Cedex'] = '0'
                                        if 'CEDEX' in tp['Localite']:
                                            tp['Cedex'] = '1'
                                        tp['IDLocalite'] = tp['Localite']
                                        memville.append([villetp, cp])
                                    retour[str(tpnb)] = tp

                            else:
                                retour['0'] = {}
                    else:
                        retour['0'] = {}
                else:
                    retour['0'] = {}
            else:
                retour['0'] = {}
            try:
                cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
                cherrypy.response.headers['Server'] = 'DQE Server'
                if _json_acao != '':
                    cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
            except:
                pass

            _re = simplejson.dumps(retour)
            return _re

    index.exposed = True


def present(dico, table):
    trouve = False
    for i in dico.keys():
        _table = dico[i]
        trouve = table == _table
        if trouve:
            break

    return trouve


class RecupCp(object):

    @jsonp
    def index(self, Pays, CodePostal, Instance, Alpha = 'false', Licence = '', IDLocalite = '', IP_Trace = '', Lat = '', Lon = '', Provenance = 'CP', McpCpt = True, Etendue = 'N', Version = '1.0', Filter = ''):
        global _compteur
        try:
            if type(CodePostal) == unicode:
                CodePostal = CodePostal.encode('utf-8')
            else:
                try:
                    va0 = CodePostal.decode('utf-8').encode('iso-8859-1').upper()
                    if CodePostal.count('.') != 3:
                        CodePostal = CodePostal.translate(maps, notwanted)
                except:
                    try:
                        va0 = convertUTFISO.convertUTF8(CodePostal).encode('utf-8')
                    except:
                        va0 = CodePostal

                    CodePostal = va0

        except:
            pass

        if Alpha.upper() == 'TRUE':
            Alpha = True
        else:
            Alpha = False
        retour = {}
        fl_manque = ''
        va = []
        trouve_id = {}
        _compteur += 1
        fl_etendue = False
        _flag_voie = Filter != '1'
        if ExisteCompte(Licence, '', Pays):
            _flag_voie = not inlicence2(Licence, 'CPONLY') and Filter != '1'
            fl_4 = False
            try:
                if Pays != '' and Pays[0:2] != _pays[0:2]:
                    va1 = RecupCpInter()
                    if isAlpha(CodePostal):
                        _va = va1.index(Pays, CodePostal, Instance, Licence, 'True')
                    else:
                        _va = va1.index(Pays, CodePostal, Instance, Licence)
                    va = eval(_va)
                    va1 = 0
                    if va == {}:
                        va = [['',
                          '',
                          '*',
                          '']]
                    else:
                        vb = []
                        for i in va.keys():
                            r = va[i]
                            if r != {}:
                                try:
                                    vb.append([r['Localite'].decode('unicode-escape'),
                                     r['CodePostal'].decode('unicode-escape'),
                                     r['CodePostal'].decode('unicode-escape'),
                                     r['Province'].decode('unicode-escape')])
                                except:
                                    vb.append([r['Localite'],
                                     r['CodePostal'],
                                     r['CodePostal'],
                                     r['Province']])

                        if vb != []:
                            va = vb[:]
                        else:
                            va = [['',
                              '',
                              '*',
                              '']]
                    fl_4 = True
                elif CodePostal == '' and IDLocalite != '':
                    va = recherche_IDcp(IDLocalite)
                    fl_4 = True
                elif not TestCP(CodePostal, Pays, Etendue):
                    if Pays != '' and Pays[0:2] != _pays[0:2]:
                        va = rechVilleInter(Pays, CodePostal, '')
                        if va == []:
                            va = [['',
                              '',
                              '*',
                              '']]
                        fl_4 = True
                    elif _pays != 'GBR' or len(CodePostal) > 2:
                        va = RechercheVille(CodePostal, True)
                    else:
                        va = [['',
                          '',
                          '*',
                          '']]
                    if va == [0]:
                        va = [['', '', '*']]
                        fl_manque = '99'
                elif Etendue in 'oOyY' and len(CodePostal) > 1:
                    va = recherche_cp(CodePostal, True, Provenance=Provenance, Etendue='Y', flag_voie=_flag_voie)
                    fl_etendue = True
                elif len(CodePostal) > 2:
                    va = recherche_cp(CodePostal, True, Provenance=Provenance, flag_voie=_flag_voie)
                else:
                    va = []
            except:
                va = []

            i = 0
            if va != []:
                try:
                    if McpCpt and not _new_compteur:
                        IncrementeCompte(Licence, 'json_cp')
                    elif McpCpt and CodePostal != None and CodePostal != '':
                        if CodePostal.count('.') == 3:
                            comptage_activite(Licence, Pays, 'CPIP', IP_Trace, CodePostal + ';OK')
                        elif Pays != _pays:
                            comptage_activite(Licence, Pays, 'CPINTER', IP_Trace, CodePostal + ';OK')
                        elif Pays == 'GBR' or CodePostal != '' and (CodePostal[0] in '0123456789' and len(CodePostal) == _lenCP or len(CodePostal) == 3):
                            comptage_activite(Licence, Pays, 'CP', IP_Trace, CodePostal + ';OK')
                except:
                    rien = ''

            else:
                try:
                    if McpCpt and _new_compteur:
                        if Etendue in 'OoYy':
                            if len(CodePostal) == 2:
                                comptage_activite(Licence, Pays, 'CP', IP_Trace, CodePostal + ';OK')
                        else:
                            comptage_activite(Licence, Pays, 'CP', IP_Trace, CodePostal + ';KO')
                except:
                    rien = ''

                tp = {}
                tp['Pays'] = Pays
                tp['Instance'] = Instance
                tp['LieuDit'] = ''
                tp['SousLocalite'] = ''
                tp['CodePostal'] = ''
                tp['Localite'] = ''
                tp['Province'] = ''
                tp['IDLocalite'] = ''
                tp['Latitude'] = ''
                tp['Longitude'] = ''
                tp['NbNumero'] = ''
                tp['Nbnumero'] = ''
                tp['ListeNumero'] = ''
                tp['IDVoie'] = ''
                tp['Complement'] = ''
                tp['Numero'] = ''
                tp['TypeVoie'] = ''
                tp['Entreprise'] = ''
                tp['Cedex'] = '0'
                if Filter != '':
                    tp['Type'] = '0'
                retour['1'] = tp
            tpnb = 0
            if fl_etendue and Etendue in 'YyOo' and va != [] and Pays == 'FRA':
                va1 = []
                for i in va:
                    if ' CEDEX ' in i[0] + ' ':
                        va1.append([2, i[0], i])
                    elif 'LD.' in i[0]:
                        va1.append([1, i[0], i])
                    elif 'VOIE_POSTE' in i[0]:
                        va1.append([3, i[0], i])
                    elif 'CEDEX_FRA' in i[0]:
                        va1.append([4, i[0], i])
                    else:
                        va1.append([0, i[0], i])

                va1.sort()
                va = []
                for i in range(0, len(va1)):
                    va.append(va1[i][2])
                    if i == 50:
                        break

            for x in va:
                if x != None:
                    tpnb += 1
                    tp = {}
                    fl_continue = True
                    tp['Pays'] = Pays
                    tp['Instance'] = Instance
                    tp['LieuDit'] = ''
                    tp['Province'] = ''
                    tp['SousLocalite'] = ''
                    tp['NbNumero'] = ''
                    tp['Nbnumero'] = ''
                    tp['ListeNumero'] = ''
                    tp['IDVoie'] = ''
                    tp['Complement'] = ''
                    tp['Numero'] = ''
                    tp['TypeVoie'] = ''
                    tp['Entreprise'] = ''
                    tp['Latitude'] = ''
                    tp['Longitude'] = ''
                    tp['Cedex'] = '0'
                    if Filter != '':
                        tp['Type'] = '0'
                    if fl_4:
                        tp['CodePostal'] = FormatCP(x[2])
                        tp['Localite'] = x[0]
                        if Pays == 'FRA' and '(LD.' in x[0]:
                            _tx0 = x[0].split('(LD.')
                            tp['LieuDit'] = _tx0[1][1:_tx0[1].index(')')].strip()
                            tp['Localite'] = (_tx0[0] + _tx0[1][_tx0[1].index(')') + 2:]).strip()
                        if 'CEDEX' in tp['Localite']:
                            tp['Cedex'] = '1'
                        tp['Province'] = x[3]
                        tp['IDLocalite'] = str(x[1])
                        if tp['IDLocalite'] == '':
                            tp['IDLocalite'] = x[0]
                    elif len(x) < 6:
                        if Alpha:
                            if x[2] != '' and x[2][0] == '*' or x[4] != '' and x[4][0] == '$':
                                if x[4] != '' and x[4][0] == '$':
                                    tp['CodePostal'] = ''
                                else:
                                    tp['CodePostal'] = x[4]
                            elif _pays not in ('ARE', 'SAU'):
                                if TestCP(CodePostal, Pays):
                                    tp['CodePostal'] = FormatCP(CodePostal)
                                else:
                                    tp['CodePostal'] = FormatCP(x[2])
                            else:
                                tp['CodePostal'] = ''
                        elif _pays in ('GBR', 'NLD', 'CZE', 'PRT', 'POL', 'KOR'):
                            tp['CodePostal'] = FormatCP(fct_majcp(CodePostal))
                        else:
                            tp['IDLocalite'] = x[1]
                            if '-' in str(x[1]) and '-' in x[4]:
                                tp['CodePostal'] = ''
                            else:
                                tp['CodePostal'] = x[4]
                        if Pays == 'FRA' and '-' not in tp['CodePostal'] and len(tp['CodePostal']) > 2 and '(' + tp['CodePostal'][0:2] + ')' in x[0]:
                            x[0] = x[0].replace('(' + tp['CodePostal'][0:2] + ')', '').strip()
                        tp['Localite'] = x[0]
                        tp['Province'] = x[2]
                        tp['IDLocalite'] = str(x[1])
                        if tp['IDLocalite'] == '':
                            tp['IDLocalite'] = x[0]
                        if '-' in tp['Province'] and '-' in tp['IDLocalite']:
                            mem = ''
                            _tpp = tp['IDLocalite'].split('-')
                            _rp = tp['Province'].split('-')
                            _rl = ''
                            _rrp = ''
                            j = 0
                            cp = 0
                            for i in _tpp:
                                if i not in _rl:
                                    cp += 1
                                    if _rl == '':
                                        _rl = i
                                        _rrp = _rp[j]
                                    else:
                                        _rl += '-' + i
                                        _rrp += '-' + _rp[j]
                                j += 1

                            tp['IDLocalite'] = _rl
                            tp['Province'] = _rrp
                            if cp == 1:
                                tp['Localite'] = tp['Localite'].replace('(' + _rl[0:2] + ')', '').strip()
                                if '-' in tp['CodePostal']:
                                    tp['CodePostal'] = tp['CodePostal'].split('-')[0]
                            if cp != 1 and '-' in tp['CodePostal']:
                                tp['CodePostal'] = ''
                            i1 = x[0].find('(LD. ')
                            if i1 >= 0:
                                i2 = x[0].find(')', i1)
                                tp['LieuDit'] = x[0][i1 + 4:i2].strip()
                                tp['Localite'] = (tp['Localite'][0:i1] + tp['Localite'][i2 + 1:]).strip()
                            else:
                                tp['LieuDit'] = ''
                            if 'CEDEX' in tp['Localite']:
                                tp['Cedex'] = '1'
                            if Pays == 'CZE':
                                tp['Localite'] = (x[0] + ' ' + x[4].strip()).strip()
                        else:
                            if _pays == 'FRA':
                                i1 = x[0].find('(LD. ')
                                if i1 >= 0:
                                    i2 = x[0].find(')', i1)
                                    tp['LieuDit'] = x[0][i1 + 4:i2].strip()
                                    tp['Localite'] = (tp['Localite'][0:i1] + tp['Localite'][i2 + 1:]).strip()
                                else:
                                    tp['LieuDit'] = ''
                                if 'CEDEX' in tp['Localite']:
                                    tp['Cedex'] = '1'
                            else:
                                tp['LieuDit'] = x[3]
                                tp['SousLocalite'] = x[3]
                            if Pays == 'CZE':
                                tp['Localite'] = (x[0] + ' ' + x[4].strip()).strip()
                    else:
                        tp['Nbnumero'] = ''
                        tp['NbNumero'] = ''
                        tp['ListeNumero'] = ''
                        tp['IDVoie'] = ''
                        tp['Complement'] = ''
                        tp['Numero'] = ''
                        tp['TypeVoie'] = ''
                        tp['Entreprise'] = ''
                        tp['Cedex'] = '0'
                        if Filter != '':
                            tp['Type'] = '0'
                        if x[0] == 'IP_ADDRESS':
                            tp['IDVoie'] = 'IP_ADDRESS'
                            tp['Pays'] = x[1]
                            tp['CodePostal'] = FormatCP(str(CodePostal))
                            tp['Localite'] = x[2]
                            if 'CEDEX' in tp['Localite']:
                                tp['Cedex'] = '1'
                            tp['IDLocalite'] = ''
                            tp['LieuDit'] = ''
                            tp['Voie'] = str(x[3]) + ':' + str(x[4])
                            tp['Latitude'] = str(x[3])
                            tp['Longitude'] = str(x[4])
                            if (str(x[3]) == '0' or str(x[4]) == '0') and _geoTab.has_key(Licence):
                                tp['Latitude'] = _geoTab[Licence][0]
                                tp['Longitude'] = _geoTab[Licence][1]
                                tp['CodePostal'] = _geoTab[Licence][2]
                                tp['Localite'] = _geoTab[Licence][3]
                                tp['IDLocalite'] = _geoTab[Licence][4]
                                tp['Voie'] = tp['Latitude'] + ':' + tp['Longitude']
                            fl_continue = False
                        elif x[0] == 'IP2_ADDRESS':
                            tp['IDVoie'] = 'IP2_ADDRESS'
                            tp['Pays'] = 'FRA'
                            tp['CodePostal'] = ''
                            tp['Localite'] = ''
                            tp['IDLocalite'] = x[1]
                            tp['LieuDit'] = ''
                            tp['Voie'] = str(x[2]) + ':' + str(x[3])
                            tp['Latitude'] = str(x[2])
                            tp['Longitude'] = str(x[3])
                            tp['Cedex'] = '0'
                            if Filter != '':
                                tp['Type'] = '0'
                            fl_continue = False
                        elif x[0] == 'CEDEX_FRA':
                            if True:
                                if Filter != '':
                                    tp['Type'] = '0'
                                tp['Pays'] = 'FRA'
                                tp['CodePostal'] = FormatCP(x[1][2])
                                tp['Localite'] = x[2][0]
                                if x[2][1] != '*':
                                    tp['Province'] = x[2][1]
                                else:
                                    tp['Province'] = ''
                                tp['IDLocalite'] = x[1][0]
                                tp['IDVoie'] = normaliseIDVoie(x[6])
                                if x[4] != '':
                                    tp['Nbnumero'] = '1'
                                    tp['NbNumero'] = '1'
                                    try:
                                        tp['ListeNumero'] = str(int(x[4]))
                                    except:
                                        tp['ListeNumero'] = x[4]

                                else:
                                    tp['Nbnumero'] = ''
                                    tp['NbNumero'] = ''
                                    tp['ListeNumero'] = ''
                                tp['Voie'] = x[10][0] + ',,' + x[3]
                                if 'CEDEX' in tp['Localite']:
                                    tp['Cedex'] = '1'
                                tp['Complement'] = x[10][2]
                                tp['Complement2'] = ''
                                tp['LieuDit'] = x[10][3]
                                tp['Entreprise'] = x[10][0]
                            fl_continue = False
                        elif x[0] == 'VOIE_POSTE':
                            if True:
                                if Filter != '':
                                    tp['Type'] = '0'
                                tp['Pays'] = Pays
                                tp['CodePostal'] = FormatCP(x[6])
                                tp['Localite'] = x[1]
                                tp['Province'] = x[3]
                                tp['IDLocalite'] = x[2]
                                tp['IDVoie'] = normaliseIDVoie(x[4])
                                tp['Voie'] = x[5]
                                if 'CEDEX' in tp['Localite']:
                                    tp['Cedex'] = '1'
                                if x[-1] != '' and x[-1] != x[1]:
                                    tp['SousLocalite'] = x[-1]
                                    tp['LieuDit'] = x[-1]
                                if ',' in x[5]:
                                    tp1 = x[5].split(',')
                                    tp['Adresse'] = tp1[-1].strip()
                                    if tp['Complement'] == '':
                                        if len(tp1) >= 3:
                                            tp['Complement'] = tp1[1].strip()
                                    tp['Voie'] = tp1[-1].strip()
                                    tp['Entreprise'] = tp1[0]
                                tp['Nbnumero'] = str(x[7])
                                tp['NbNumero'] = str(x[7])
                                tp['ListeNumero'] = x[8]
                            fl_continue = False
                        elif x[0] == 'CEDEXA':
                            if True:
                                if Filter != '':
                                    tp['Type'] = '0'
                                tp['Pays'] = Pays
                                tp['CodePostal'] = FormatCP(x[7])
                                tp['Localite'] = x[8]
                                tp['Province'] = x[9]
                                tp['IDLocalite'] = x[11]
                                tp['IDVoie'] = normaliseIDVoie(x[10])
                                tp['Voie'] = x[5]
                                if 'CEDEX' in tp['Localite']:
                                    tp['Cedex'] = '1'
                                fbp = False
                                if x[1][0:5] == '_BP_:':
                                    if x[5] == '':
                                        tp['Complement'] = ''
                                        tp['Voie'] = x[1][5:]
                                    else:
                                        tp['Voie'] = x[5] + ' ' + x[1][5:]
                                elif x[1][0:7] == '__BP__:':
                                    if x[5] == '':
                                        tp['Complement'] = ''
                                        tp['Voie'] = x[1][7:]
                                    else:
                                        tp['Voie'] = x[5] + ' ' + x[1][7:]
                                else:
                                    tp['Entreprise'] = x[1]
                                if x[4] != '':
                                    if '-' in x[4]:
                                        tt = x[4].split('-')
                                        if tt[0] == tt[1]:
                                            tp['Voie'] += ' ' + tt[0]
                                        else:
                                            tp['Voie'] += ' BP_'
                                            tp['Nbnumero'] = str(int(tt[1]) - int(tt[0]) + 1)
                                            tp['NbNumero'] = str(int(tt[1]) - int(tt[0]) + 1)
                                            tp['ListeNumero'] = str(tt[0])
                                            for iii in range(int(tt[0]) + 1, int(tt[1]) + 1):
                                                tp['ListeNumero'] += ';' + str(iii)

                                tp['Numero'] = ''
                                tp['TypeVoie'] = ''
                            fl_continue = False
                        elif 'str' in str(type(x[0])):
                            if Filter != '':
                                tp['Type'] = '0'
                            tp['Pays'] = Pays
                            tp['CodePostal'] = FormatCP(x[5])
                            tp['Localite'] = x[0]
                            tp['Province'] = x[2]
                            if x[3] != '' and x[3] != x[0]:
                                tp['SousLocalite'] = x[3]
                                tp['LieuDit'] = x[3]
                            tp['IDLocalite'] = x[1]
                            tp['IDVoie'] = ''
                            tp['Numero'] = ''
                            tp['TypeVoie'] = ''
                            tp['Voie'] = ''
                            tp['Complement'] = ''
                            if 'CEDEX' in tp['Localite']:
                                tp['Cedex'] = '1'
                            fl_continue = False
                        else:
                            if Filter != '':
                                tp['Type'] = '0'
                            tp['Pays'] = Pays
                            tp['CodePostal'] = FormatCP(x[0][1])
                            tp['Localite'] = x[1][0]
                            tp['Province'] = x[1][1]
                            try:
                                if x[1][2] != '':
                                    tp['SousLocalite'] = x[1][2]
                            except:
                                print ''

                            tp['IDLocalite'] = str(x[0][0])
                            tp['IDVoie'] = ''
                            tp['Numero'] = x[3]
                            tp['TypeVoie'] = ''
                            tp['Voie'] = x[2]
                            tp['Complement'] = x[9][0]
                            if 'CEDEX' in tp['Localite']:
                                tp['Cedex'] = '1'
                            fl_continue = False
                        if Version > '1.0':
                            if '(LD. ' in tp['Localite']:
                                i1 = tp['Localite'].find('(LD. ')
                                if i1 >= 0:
                                    i2 = tp['Localite'].find(')', i1)
                                    tp['LieuDit'] = tp['Localite'][i1 + 4:i2].strip()
                                    tp['Localite'] = (tp['Localite'][0:i1] + tp['Localite'][i2 + 1:]).strip()
                    if _flag_geoloczipcode and _pays == Pays:
                        if True:
                            if tp.has_key('IDLocalite'):
                                if '-' in tp['IDLocalite']:
                                    mem = ''
                                    for i in tp['IDLocalite'].split('-'):
                                        if mem != '' and mem != i:
                                            tp['Latitude'] = '0'
                                            tp['Longitude'] = '0'
                                            break
                                        else:
                                            mem = i
                                            if geoloczipcode.has_key(i):
                                                xx = geoloczipcode[i]
                                                tp['Latitude'] = xx[0]
                                                tp['Longitude'] = xx[1]

                                elif geoloczipcode.has_key(tp['IDLocalite']):
                                    xx = geoloczipcode[tp['IDLocalite']]
                                    tp['Latitude'] = xx[0]
                                    tp['Longitude'] = xx[1]
                            else:
                                tp['Latitude'] = '0'
                                tp['Longitude'] = '0'
                    if Lat != '' and Lon != '':
                        if tp.has_key('Latitude'):
                            fl_ko = True
                            if '-' in tp['IDLocalite']:
                                minlat = 1000
                                maxlat = 0
                                minlon = 1000
                                maxlon = 0
                                r_ti = []
                                for i in tp['IDLocalite'].split('-'):
                                    if geoloczipcode.has_key(i):
                                        xx = geoloczipcode[i]
                                        try:
                                            b1 = float(xx[0])
                                            b2 = float(xx[1])
                                        except:
                                            b1 = 0
                                            b2 = 0

                                        if not trouve_id.has_key(i):
                                            r_ti.append(i)
                                            if b1 != 0 and b2 != 0:
                                                if b1 < minlat:
                                                    minlat = b1
                                                if b1 > maxlat:
                                                    maxlat = b1
                                                if b2 < minlon:
                                                    minlon = b2
                                                if b2 > maxlon:
                                                    maxlon = b2

                                a1 = float(Lat)
                                a2 = float(Lon)
                                fl_ko = not (a1 >= minlat and a1 <= maxlat and a2 >= minlon and a2 <= maxlon)
                                if not fl_ko:
                                    for i in r_ti:
                                        trouve_id[i] = 1

                            else:
                                a1 = '%2.2f' % float(Lat)
                                a2 = '%2.2f' % float(Lon)
                                b1 = '%2.2f' % float(tp['Latitude'])
                                b2 = '%2.2f' % float(tp['Longitude'])
                                fl_ko = a1 != b1 or a2 != b2 or trouve_id.has_key(tp['IDLocalite'])
                            if fl_ko:
                                tpnb -= 1
                            elif not present(retour, tp):
                                retour[str(tpnb)] = tp
                            else:
                                tpnb -= 1
                        elif not present(retour, tp):
                            retour[str(tpnb)] = tp
                        else:
                            tpnb -= 1
                    elif not present(retour, tp):
                        retour[str(tpnb)] = tp
                    else:
                        tpnb -= 1
                    if tpnb == 50:
                        break

        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        _re = simplejson.dumps(retour)
        return _re

    index.exposed = True


def rechercheOldCP(insee = '', cp = '', localite = '', ddn = ''):
    supp = ['DE',
     'EN',
     'ET',
     'SUR',
     'LE',
     'LA',
     'LES']
    resu = set()
    resu_final = []
    localite = localite.replace('-', ' ').replace("'", ' ').upper()
    if insee != '' and 'I_' + insee in _OldInseeTab:
        resu = set(_OldInseeTab['I_' + insee])
    if cp != '' and 'C_' + cp in _OldInseeTab:
        if resu == set([]):
            resu = set(_OldInseeTab['C_' + cp])
        else:
            resu &= set(_OldInseeTab['C_' + cp])
    if localite != '' and 'L_' + localite.split()[0].upper() in _OldInseeTab:
        if resu == set([]):
            resu = set(_OldInseeTab['L_' + localite.split()[0].upper()])
        else:
            resu &= set(_OldInseeTab['L_' + localite.split()[0].upper()])
    if localite != '':
        _mots = localite.upper().split()[-1]
        if len(_mots) > 1 and _mots not in supp and 'S_' + _mots in _OldInseeTab:
            if resu == set([]):
                resu = set(_OldInseeTab['S_' + _mots])
            else:
                resu |= set(_OldInseeTab['S_' + _mots])
    resu = list(resu)
    tb3 = ddn.split('-')
    tb3[0] = int(tb3[0])
    tb3[1] = int(tb3[1])
    tb3[2] = int(tb3[2])
    ddnb = datetime.datetime(*tuple(tb3))
    resu_final_ok = []
    resu_final_ko = []
    len0 = len(localite.split())
    if resu != []:
        for i in resu:
            x = _OldInseeValeurs[i]
            fl = True
            fl1 = False
            if cp != '':
                fl = x[5][0:len(cp)] == cp
            if fl and insee != '':
                fl = x[0][0:len(insee)] == insee
            if fl and localite != '':
                fl = x[1][0:len(localite)] == localite
                fl1 = not fl and localite.split()[-1] in x[1]
            if fl or fl1:
                if ddnb >= x[3] and ddnb < x[4]:
                    if fl1:
                        if x[5].strip() != '':
                            _tr0 = 4
                        else:
                            _tr0 = 5
                    elif localite != '' and localite == x[1]:
                        if x[5].strip() != '':
                            _tr0 = 0
                        else:
                            _tr0 = 1
                    elif x[5].strip() != '':
                        _tr0 = 2
                    else:
                        _tr0 = 3
                    resu_final_ok.append([_tr0,
                     abs(len(x[1].split()) - len0),
                     x[5],
                     x])
                else:
                    resu_final_ko.append(x)

    if resu_final_ok != []:
        resu_final_ok.sort()
        resu = []
        for i in resu_final_ok:
            resu.append(i[3])

        resu_final_ok = resu
    return (resu_final_ok, resu_final_ko)


class RecupOldFRA(object):

    @jsonp
    def index(self, DDN, INSEE = '', CP = '', Localite = '', Licence = ''):
        _localite = Localite
        _CP = CP
        try:
            if Localite != '':
                if type(Localite) == unicode:
                    Localite = Localite.encode('utf-8')
                else:
                    try:
                        va0 = Localite.decode('utf-8').encode('iso-8859-1').upper()
                    except:
                        try:
                            va0 = convertUTFISO.convertUTF8(Localite).encode('utf-8')
                        except:
                            va0 = Localite

                        Localite = va0

        except:
            pass

        try:
            if CP != '':
                if type(CP) == unicode:
                    CP = CP.encode('utf-8')
                else:
                    try:
                        va0 = CP.decode('utf-8').encode('iso-8859-1').upper()
                    except:
                        try:
                            va0 = convertUTFISO.convertUTF8(CP).encode('utf-8')
                        except:
                            va0 = CP

                        CP = va0

        except:
            pass

        retour = {}
        if True:
            x = rechercheOldCP(INSEE, CP, Localite, DDN)
            tp = {}
            if x == [[], []]:
                tp['1'] = {}
                tp['1']['Insee'] = INSEE
                tp['1']['Localite'] = Localite
                tp['1']['Pays'] = 'FR'
                tp['1']['CodePostal'] = CP
                tp['1']['Status'] = 'KO'
            else:
                i = 1
                sto = []
                if x[0] != []:
                    for x0 in x[0]:
                        i0 = str(i)
                        if [x0[0], x0[1], x0[5]] not in sto:
                            sto.append([x0[0], x0[1], x0[5]])
                            tp[i0] = {}
                            tp[i0]['Insee'] = x0[0]
                            tp[i0]['Localite'] = x0[1]
                            tp[i0]['Pays'] = x0[2]
                            tp[i0]['CodePostal'] = x0[5]
                            tp[i0]['Status'] = 'OK'
                            i += 1

                if x[1] != []:
                    for x0 in x[1]:
                        i0 = str(i)
                        if [x0[0], x0[1], x0[5]] not in sto:
                            sto.append([x0[0], x0[1], x0[5]])
                            tp[i0] = {}
                            tp[i0]['Insee'] = x0[0]
                            tp[i0]['Localite'] = x0[1]
                            tp[i0]['Pays'] = x0[2]
                            tp[i0]['CodePostal'] = x0[5]
                            tp[i0]['Status'] = 'KO'
                            i += 1

            retour = tp
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        _re = simplejson.dumps(retour)
        return _re

    index.exposed = True


def fct_numerique(valeur):
    if len(valeur) >= 1:
        return valeur[0] in '0123456789'
    else:
        return False


def GeoLocEDF(valeur):
    valeur = str(valeur)
    if valeur in ('1', '2', '3', '4', '5', '6', '7', '8'):
        return '00'
    elif valeur in ('9',):
        return '02'
    elif valeur in ('10',):
        return '03'
    elif valeur in ('00',):
        return '01'
    else:
        return '02'


class RecupGeo(object):

    @jsonp
    def index(self, Pays, IDVoie, Num, Licence = '', IP_Trace = ''):
        global _compteur
        retour = {}
        _compteur += 1
        if _flag_log:
            log('%s|%s|%s|debut|RECUPGEO' % (datetime.datetime.now(), _port_num, _compteur))
        memLicence = [Licence, False]
        memLicence = test_geo_licence(Licence)
        if ExisteCompte(memLicence[0], '', Pays):
            if Pays == 'FRA' or _flag_mapgeocodage:
                tp = {}
                if _flag_mapgeocodage:
                    if memLicence[1]:
                        xy = RechercheGeoLoc(IDVoie, Num)
                        if len(xy) >= 2:
                            tp['Latitude'] = str(xy[0])
                            tp['Longitude'] = str(xy[1])
                            tp['Code'] = GeoLocEDF(xy[2])
                        else:
                            tp['Latitude'] = '0.00'
                            tp['Longitude'] = '0.00'
                            tp['Code'] = '92'
                    else:
                        tp['Latitude'] = '0.00'
                        tp['Longitude'] = '0.00'
                        tp['Code'] = '92'
                else:
                    tp['Latitude'] = '0.00'
                    tp['Longitude'] = '0.00'
                    tp['Code'] = '92'
                retour['1'] = tp
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


def deou(valeur):
    resu = -1
    for i in valeur:
        resu += 1
        if i != '0':
            break

    return resu


def TraiteFilter(filtre, valeur):
    try:
        if ',' in filtre:
            return True
        if filtre == '0':
            return int(valeur) < 6000000
        if filtre == '1':
            return int(valeur) >= 6000000
        return True
    except:
        return True

    return True


class RecupAdr(object):

    @jsonp
    def index(self, Pays, IDLocalite, Adresse, Instance, Licence = '', Taille = 38, CodePostal = '', IP_Trace = '', tpnbmax = 20, Etendue = 'N', Version = '1.0', Filter = '', flag_rnvp = False):
        global _compteur
        Taille = int(Taille)
        Adresse_mem = Adresse

        def modif_adresse_inversion(Adresse):
            a = Adresse.split()
            ad = ' '.join(a[0:-1])
            md = a[-1].upper()
            res = [(ad + ' ' + md).strip()]
            i = len(md) - 1
            while i >= 1:
                if md[i] not in 'AEIOUY' and md[i - 1] not in 'AEIOUY':
                    va = md[0:i - 1] + md[i] + md[i - 1] + md[i + 1:]
                    r = (ad + ' ' + va).strip()
                    if r not in res:
                        res.append(r)
                i -= 1

            return res

        def recherche_iterative(tab_dll, adr_test, MonAdresse, tpnbmax, IDTri):

            def egal(valeur):
                resu = False
                for i in adr_test:
                    if valeur[0:len(i)] == i:
                        resu = True
                        break
                    elif not valeur.isdigit() and not i.isdigit() and Phonems(valeur) == i:
                        resu = True
                        break

                return resu

            va = []
            Adresses = modif_adresse_inversion(MonAdresse)
            for Adresse in Adresses:
                for idl in tab_dll:
                    va1 = recherche_adr(idl, Adresse, int(tpnbmax), False, cedex=CodePostal)
                    if va1 != []:
                        va2 = []
                        _va2 = []
                        _va00 = []
                        for iva1 in va1:
                            if idl == IDTri:
                                _va00.append(iva1 + [idl])
                            elif egal(iva1[0].split()[-1]):
                                _va00.append(iva1 + [idl])
                            else:
                                adr2 = iva1[0].replace(' ', '')
                                if adr1 in adr2:
                                    _va2.append(iva1 + [idl])
                                else:
                                    va2.append(iva1 + [idl])

                        if _va00 != []:
                            _va0.extend(_va00[:])
                        if _va2 != []:
                            _va.extend(_va2[:])
                        if va2 != []:
                            va.extend(va2[:])

                if _va0 != []:
                    _va0.extend(_va)
                    va = _va0[:]
                elif _va != []:
                    va = _va[:]
                if va != []:
                    break

            return va

        retour = {}
        _compteur += 1
        if _flag_log:
            log('%s|%s|%s|debut|ADR' % (datetime.datetime.now(), _port_num, _compteur))
        vok = False
        LieuDitAdr = ''
        if '|' in Adresse:
            Adresse, LieuDitAdr = Adresse.split('|')[0:2]
        _nativecharset = 'true'
        if '-' in Pays:
            Pays = Pays.split('-')[0]
            _nativecharset = 'false'
        if ExisteCompteInter(Licence, Pays):
            if _flag_melissa:
                try:
                    vok = True
                    lic_melissa = _dicomelissa[Licence]['id']
                except:
                    lic_melissa = ''
                    vok = False

                if lic_melissa == '':
                    vok = False
        if vok:
            if Pays == _pays:
                vok = False
        if vok:
            pays_iso2 = _dicopaysiso[Pays]
            urlServer = ''
            try:
                if CodePostal == '' and IDLocalite != '':
                    if isAlpha(IDLocalite):
                        _f = {'format': 'jsonp',
                         'id': lic_melissa,
                         'address1': Adresse,
                         'postalcode': '',
                         'locality': IDLocalite,
                         'country': pays_iso2,
                         'maxrecords': 500,
                         'nativecharset': ''}
                    else:
                        _f = {'format': 'jsonp',
                         'id': lic_melissa,
                         'address1': Adresse,
                         'postalcode': IDLocalite,
                         'locality': '',
                         'country': pays_iso2,
                         'maxrecords': 500,
                         'nativecharset': ''}
                    urlServer = 'http://expressentry.melissadata.net/jsonp/GlobalExpressAddress?' + urllib.urlencode(_f)
                else:
                    if isAlpha(CodePostal):
                        _f = {'format': 'jsonp',
                         'id': lic_melissa,
                         'address1': Adresse,
                         'postalcode': '',
                         'locality': CodePostal,
                         'country': pays_iso2,
                         'maxrecords': 500,
                         'nativecharset': ''}
                    else:
                        _f = {'format': 'jsonp',
                         'id': lic_melissa,
                         'address1': Adresse,
                         'postalcode': CodePostal,
                         'locality': '',
                         'country': pays_iso2,
                         'maxrecords': 500,
                         'nativecharset': ''}
                    urlServer = 'http://expressentry.melissadata.net/jsonp/GlobalExpressAddress?' + urllib.urlencode(_f)
            except Exception as ex:
                print str(ex)

            if urlServer != '':
                vok = True
                try:
                    if Adresse + CodePostal != '':
                        _dm = decoupage_international(Adresse, '', '', CodePostal, '')
                        if _map_inter.has_key(Licence + '_' + _dm):
                            retour2 = str(MiseEnFormeMelissa(Licence + '_' + _dm, Adresse, '', '', CodePostal, ''))
                            if retour2 == '':
                                try:
                                    _opu = urllib2.urlopen(urlServer)
                                    retour2 = _opu.read()
                                except:
                                    retour2 = ''
                                    vok = False

                                try:
                                    _opu.close()
                                except:
                                    pass

                        else:
                            try:
                                _opu = urllib2.urlopen(urlServer)
                                retour2 = _opu.read()
                            except:
                                retour2 = ''
                                vok = False

                            try:
                                _opu.close()
                            except:
                                pass

                    else:
                        vok = False
                except:
                    vok = False

                dico = {}
                if vok:
                    try:
                        retour2 = retour2.replace('null', '""')
                        dico = UserDict.UserDict(eval(retour2))
                    except:
                        vok = False

            if vok:
                try:
                    taille_dico = len(dico['d']['Results'])
                    _vr = []
                    tp = {}
                    tpnb = 0
                    _nbn = 0
                    print '------------------------------------->'
                    for i in range(0, taille_dico):
                        cp = dico['d']['Results'][i]['Address']['PostalCodePrimary']
                        villetp = dico['d']['Results'][i]['Address']['Locality']
                        vprovince = str(dico['d']['Results'][i]['Address']['AdministrativeArea'])
                        _rr = [capital(dico['d']['Results'][i]['Address']['Thoroughfare']),
                         cp,
                         Adresse,
                         capital(villetp)]
                        if _rr not in _vr:
                            if tp != {}:
                                if tp['NbNumero'] != '1':
                                    _numt = tp['ListeNumero'].split(';')
                                    _numt.sort()
                                else:
                                    _numt = [tp['ListeNumero']]
                                for j in range(0, len(_numt)):
                                    _numt[j] = _numt[j][deou(_numt[j]):]

                                tp['ListeNumero'] = ';'.join(_numt)
                            tp = {}
                            _nbn = 1
                            tp['Pays'] = Pays
                            tp['Voie'] = capital(dico['d']['Results'][i]['Address']['Thoroughfare'])
                            tp['CodeVoie'] = cp
                            tp['CodePostal'] = FormatCP(cp)
                            tp['Saisie'] = Adresse_mem
                            tp['Instance'] = Instance
                            if Pays == 'JPN' and 'DependentLocality' in dico['d']['Results'][i]['Address']:
                                if dico['d']['Results'][i]['Address']['DependentLocality'] != '':
                                    tp['Localite'] = capital(villetp) + dico['d']['Results'][i]['Address']['DependentLocality'].decode('utf-8')
                                else:
                                    tp['Localite'] = capital(villetp)
                            else:
                                tp['Localite'] = capital(villetp)
                            tp['Cedex'] = '0'
                            if 'CEDEX' in tp['Localite']:
                                tp['Cedex'] = '1'
                            tp['Nbnumero'] = '1'
                            tp['NbNumero'] = '1'
                            tp['Province'] = vprovince
                            tp['IDLocalite'] = cp
                            tp['IDVoie'] = cp
                            tp['Entreprise'] = ''
                            tp['Complement2'] = ''
                            tp['LieuDit'] = ''
                            _num = ('00000000' + netAdresse(dico['d']['Results'][i]['Address']['Premise'].strip(), 2))[-8:]
                            try:
                                _num = str(int(_num))
                                tp['ListeNumero'] = _num
                            except:
                                _num = netAdresse(dico['d']['Results'][i]['Address']['Premise'])
                                tp['ListeNumero'] = ''

                            tp['Numero'] = _num
                            _vr.append(_rr)
                            tpnb += 1
                            retour[str(tpnb)] = tp
                        else:
                            _num = ('00000000' + netAdresse(dico['d']['Results'][i]['Address']['Premise'].strip(), 2))[-8:]
                            try:
                                _num = str(int(_num))
                            except:
                                _num = netAdresse(dico['d']['Results'][i]['Address']['Premise'])

                            if ';' + _num + ';' not in ';' + tp['ListeNumero'] + ';':
                                _nbn += 1
                                tp['ListeNumero'] += ';' + _num
                                tp['Nbnumero'] = str(_nbn)
                                tp['NbNumero'] = str(_nbn)

                    if tp != {}:
                        if tp['NbNumero'] != '1':
                            _numt = tp['ListeNumero'].split(';')
                            _numt.sort()
                        else:
                            _numt = [tp['ListeNumero']]
                        for j in range(0, len(_numt)):
                            _numt[j] = _numt[j][deou(_numt[j]):]

                        tp['ListeNumero'] = ';'.join(_numt)
                    _vr = []
                except:
                    retour = {}

        else:
            memLicence = [Licence, False]
            memLicence = test_geo_licence(Licence)
            try:
                va0 = Adresse.decode('utf-8').encode('iso-8859-1').upper()
                try:
                    t2 = va0.translate(_trans, '')
                    va0 = t2
                except:
                    va0 = va0

            except:
                try:
                    va0 = convertUTFISO.convertUTF8(Adresse).encode('utf-8')
                except:
                    va0 = Adresse

            Adresse_mem = Adresse
            Adresse = va0
            if ExisteCompte(memLicence[0], '', Pays):
                num = ''
                compte_num = 0
                if Pays in ('FRA', 'MAR'):
                    tb = Adresse.split()
                    if len(tb) >= 1:
                        if fct_numerique(tb[0]):
                            if Pays in ('FRA', 'MAR'):
                                if len(tb) > 2:
                                    if len(tb[1]) == 1 or _identifier.has_key(tb[1].upper()):
                                        if len(tb[1]) == 1:
                                            num = tb[0] + tb[1].upper()
                                        elif tb[1].upper() == 'BIS':
                                            num = tb[0] + 'B'
                                        elif tb[1].upper() == 'TER':
                                            num = tb[0] + 'T'
                                        elif tb[1].upper() == 'QUATER':
                                            num = tb[0] + 'Q'
                                        else:
                                            num = tb[0] + 'C'
                                        tb.pop(1)
                                    else:
                                        num = tb[0]
                                else:
                                    num = tb[0]
                            Adresse = ' '.join(tb[1:])
                            if num != '' and ' ' + num + ' ' in ' ' + Adresse + ' ':
                                compte_num += 1
                if Pays == _pays:
                    if IDLocalite == '' and CodePostal != '' and CodePostal.count('.') == 3:
                        CP = RecupCp()
                        resu = eval(CP.index(Pays, CodePostal, 'True', Licence=Licence))
                        if resu != {} and len(resu.keys()) == 1:
                            resu = eval(CP.index(Pays, resu['1']['Localite'], '6', 'True', Licence=Licence, Lat=resu['1']['Latitude'], Lon=resu['1']['Longitude']))
                            if resu != {} and len(resu.keys()) == 1:
                                IDLocalite = resu['1']['IDLocalite']
                                CodePostal = resu['1']['CodePostal']
                            else:
                                RL = RecupLibre()
                                return RL.index(Pays, Adresse, Instance, Licence, Taille, IP_Trace)
                        else:
                            RL = RecupLibre()
                            return RL.index(Pays, Adresse, Instance, Licence, Taille, IP_Trace)
                    if '-' in IDLocalite and Adresse != '':
                        tab_idl = IDLocalite.split('-')
                        va = []
                        _va = []
                        _va0 = []
                        adr0 = Adresse.split()[-1]
                        adr1 = Adresse.replace(' ', '')
                        if len(tab_idl) != 0:
                            for idl in tab_idl:
                                va1 = recherche_adr(idl, Adresse, int(tpnbmax), False, cedex=CodePostal)
                                if va1 != []:
                                    va2 = []
                                    _va2 = []
                                    _va00 = []
                                    for iva1 in va1:
                                        if iva1[0].split()[-1][0:len(adr0)] == adr0:
                                            _va00.append(iva1 + [idl])
                                        else:
                                            adr2 = iva1[0].replace(' ', '')
                                            if adr1 in adr2:
                                                _va2.append(iva1 + [idl])
                                            else:
                                                va2.append(iva1 + [idl])

                                    if _va00 != []:
                                        _va0.extend(_va00[:])
                                    if _va2 != []:
                                        _va.extend(_va2[:])
                                    if va2 != []:
                                        va.extend(va2[:])

                            if _va0 != []:
                                _va0.extend(_va)
                                va = _va0[:]
                            elif _va != []:
                                va = _va[:]
                    else:
                        Adresse = Adresse.strip()
                        if Pays not in ('FRA', 'MAR'):
                            if num == '':
                                resu_format = formatage(Adresse + ' ' + '00000000'[0:_lenCP])
                                if _regles.has_key(resu_format[1]):
                                    recup = decoupe_voie(_regles[resu_format[1]][0], resu_format)
                                    num = recup[4].replace(' ', '')
                                    if num != '':
                                        Adresse = recup[2]
                            va = recherche_adr(IDLocalite, Adresse, int(tpnbmax), False, cedex=CodePostal)
                        else:
                            fl_etendue = True
                            if Etendue != 'O' or Adresse == '':
                                va = recherche_adr(IDLocalite, Adresse, int(tpnbmax), False, cedex=CodePostal)
                                if Adresse != '':
                                    if Pays in ('FRA', 'MAR'):
                                        if not tb[-1].isdigit():
                                            if wordsToInteger_fr != None:
                                                _tra = int(wordsToInteger_fr.WordToInt(tb[-1]))
                                            else:
                                                _tra = -1
                                            if _tra != -1:
                                                for i in range(0, len(tb)):
                                                    _tra = int(wordsToInteger_fr.WordToInt(' '.join(tb[i:])))
                                                    if _tra != -1:
                                                        break

                                                if _tra != -1:
                                                    adr1 = ' '.join(tb[0:i]) + ' ' + str(_tra)
                                                    va1 = recherche_adr(IDLocalite, adr1, int(tpnbmax), False, cedex=CodePostal)
                                                    va2 = []
                                                    for i in va1:
                                                        if i not in va:
                                                            va2.append(i)

                                                    va.extend(va2)
                                                    va = tri2_lettres(va, tb, str(_tra), ArabicToroman(_tra), tb[-1])
                                            elif isRomain(tb[-1]):
                                                _tra = romanToArabic(tb[-1])
                                                if str(_tra) != '':
                                                    if len(tb) > 1:
                                                        adr1 = ' '.join(tb[0:-1]) + ' ' + str(_tra)
                                                        va1 = recherche_adr(IDLocalite, adr1, int(tpnbmax), False, cedex=CodePostal)
                                                        if va1 == [] and integerToWords_fr != None:
                                                            _tra = integerToWords_fr.IntToWord(str(_tra))
                                                            adr1 = ' '.join(tb[0:-1]) + ' ' + _tra
                                                            va1 = recherche_adr(IDLocalite, adr1, int(tpnbmax), False, cedex=CodePostal)
                                                            va2 = []
                                                            for i in va1:
                                                                if _tra in i[0] and i not in va:
                                                                    va2.append(i)

                                                            va.extend(va2)
                                                            va = tri2_lettres(va, tb, _tra, tb[-1])
                                                        else:
                                                            va2 = []
                                                            for i in va1:
                                                                if str(_tra) in i[0] and i not in va:
                                                                    va2.append(i)

                                                            va.extend(va2)
                                                            va = tri2_lettres(va, tb, str(_tra), ArabicToroman(_tra), tb[-1])
                                            fl_etendue = False
                                        else:
                                            _tra = 'None'
                                            if integerToWords_fr != None:
                                                _tra = integerToWords_fr.IntToWord(tb[-1])
                                                adr1 = ' '.join(tb[0:-1]) + ' ' + _tra
                                                va1 = recherche_adr(IDLocalite, adr1, int(tpnbmax), False, cedex=CodePostal)
                                                va2 = []
                                                for i in va1:
                                                    if _tra in i[0] and i not in va:
                                                        va2.append(i)

                                                va.extend(va2)
                                                va = tri2_lettres(va, tb, _tra, ArabicToroman(int(tb[-1])))
                                    fl_etendue = False
                            else:
                                va = []
                            if Adresse != '' and fl_etendue and va == []:
                                _va = recherche_IDcp(IDLocalite)
                                if _va != []:
                                    _vi = _va[0][0].strip()
                                    if mapville.has_key(_vi):
                                        _li = mapville[_vi]
                                        _lis = []
                                        for _l in _li:
                                            if _l[1][0:2] == IDLocalite[0:2]:
                                                if _l[1] not in _lis:
                                                    _lis.append(_l[1])

                                        if len(_lis) >= 1:
                                            tab_idl = _lis
                                            va = []
                                            _va = []
                                            _va0 = []
                                            adr0 = tb[-1]
                                            adr1 = Adresse.replace(' ', '')
                                            if len(tab_idl) != 0:
                                                _i = tab_idl.index(IDLocalite)
                                                tab_idl.pop(_i)
                                                tab_idl.insert(0, IDLocalite)
                                                va = recherche_iterative(tab_idl, [tb[-1]], Adresse, tpnbmax, IDLocalite)
                                                if Pays in ('FRA', 'MAR'):
                                                    if not tb[-1].isdigit():
                                                        if wordsToInteger_fr != None:
                                                            _tra = int(wordsToInteger_fr.WordToInt(tb[-1]))
                                                        else:
                                                            _tra = -1
                                                        if _tra != -1:
                                                            for i in range(0, len(tb)):
                                                                _tra = int(wordsToInteger_fr.WordToInt(' '.join(tb[i:])))
                                                                if _tra != -1:
                                                                    break

                                                            if _tra != -1:
                                                                adr1 = ' '.join(tb[0:i]) + ' ' + str(_tra)
                                                                va1 = recherche_iterative(tab_idl, [tb[-1], str(_tra), ArabicToroman(_tra)], adr1, tpnbmax, IDLocalite)
                                                                va2 = []
                                                                for i in va1:
                                                                    if i not in va:
                                                                        va2.append(i)

                                                                va.extend(va2)
                                                                va = tri2_lettres(va, tb, str(_tra), ArabicToroman(_tra), tb[-1])
                                                        elif isRomain(tb[-1]):
                                                            _tra = romanToArabic(tb[-1])
                                                            if _tra != '':
                                                                adr1 = ' '.join(tb[0:-1]) + ' ' + str(_tra)
                                                                va1 = recherche_iterative(tab_idl, [tb[-1], str(_tra)], adr1, tpnbmax, IDLocalite)
                                                                if va1 == [] and integerToWords_fr != None:
                                                                    _tra1 = str(_tra)
                                                                    _tra = integerToWords_fr.IntToWord(_tra1)
                                                                    adr1 = ' '.join(tb[0:-1]) + ' ' + _tra
                                                                    va1 = recherche_iterative(tab_idl, [tb[-1],
                                                                     _tra1,
                                                                     ArabicToroman(int(_tra1)),
                                                                     _tra], adr1, tpnbmax, IDLocalite)
                                                                    va2 = []
                                                                    for i in va1:
                                                                        if _tra in i[0] and i not in va:
                                                                            va2.append(i)

                                                                    va.extend(va2)
                                                                    va = tri2_lettres(va, tb, _tra, tb[-1])
                                                                else:
                                                                    va2 = []
                                                                    for i in va1:
                                                                        if i not in va:
                                                                            va2.append(i)

                                                                    va.extend(va2)
                                                                    va = tri2_lettres(va, tb, str(_tra), ArabicToroman(_tra), tb[-1])
                                                        fl_etendue = False
                                                    else:
                                                        _tra = 'None'
                                                        if integerToWords_fr != None:
                                                            _tra = integerToWords_fr.IntToWord(tb[-1])
                                                            adr1 = ' '.join(tb[0:-1]) + ' ' + _tra
                                                            va1 = recherche_iterative(tab_idl, [tb[-1], ArabicToroman(int(tb[-1])), _tra], adr1, tpnbmax, IDLocalite)
                                                            va2 = []
                                                            for i in va1:
                                                                if _tra in i[0] and i not in va:
                                                                    va2.append(i)

                                                            va.extend(va2)
                                                            va = tri2_lettres(va, tb, _tra, ArabicToroman(int(tb[-1])))
                                    else:
                                        va = []
                                        _va = []
                                        _va0 = []
                                        va = recherche_iterative([IDLocalite], [tb[-1]], Adresse, tpnbmax, IDLocalite)
                elif _python25:
                    va = common.clientinter.interRechercheVoie(Pays, IDLocalite, Adresse)
                else:
                    va = common27.clientinter.interRechercheVoie(Pays, IDLocalite, Adresse)
                tpnb = 0
                cv = ''
                if Pays in ('FRA', 'MAR') and len(va) > 0:
                    va = tri_adr(Adresse, va)
                for x in va:
                    if x != None and (Filter == '' or TraiteFilter(Filter, x[1])):
                        tpnb += 1
                        _v00 = []
                        if x[0] == 'CEDEX_ADR':
                            tp = {}
                            if Filter != '':
                                if int(x[1]) < 6000000:
                                    tp['Type'] = '0'
                                else:
                                    tp['Type'] = '1'
                            tp['Pays'] = _pays
                            if int(Taille) != 38:
                                tp['VoieCompleteCourte'] = NormaliseTaille(x[2], int(Taille))
                            if len(x[2]) >= int(Taille):
                                x[2] = NormaliseTaille(x[2], int(Taille))
                            tp['Voie'] = x[2]
                            tp['CodeVoie'] = x[4]
                            tp['CodePostal'] = FormatCP(x[1][1])
                            tp['Saisie'] = Adresse_mem
                            tp['Instance'] = Instance
                            tp['Localite'] = x[1][2]
                            tp['Cedex'] = '0'
                            if 'CEDEX' in x[1][2]:
                                tp['Cedex'] = '1'
                            tp['Nbnumero'] = '1'
                            tp['NbNumero'] = '1'
                            tp['ListeNumero'] = x[3].strip()
                            if x[1][3] == '*':
                                tp['Province'] = ''
                            else:
                                tp['Province'] = x[1][3]
                            tp['IDLocalite'] = x[1][0]
                            tp['IDVoie'] = x[4]
                            tp['Entreprise'] = x[5][0]
                            if x[5][1] == '' and x[5][2] != '':
                                tp['Complement'] = x[5][2]
                                tp['Complement2'] = ''
                            else:
                                tp['Complement'] = x[5][1]
                                tp['Complement2'] = x[5][2]
                            tp['LieuDit'] = x[5][3]
                            tp['Numero'] = x[3].strip()
                        else:
                            _ld_non = True
                            if Pays == 'FRA' and len(x) >= 4:
                                if len(x) == 4:
                                    if x[3] in cpld_234:
                                        _v00 = cpld_234[x[3]]
                                        cv = _v00[0][0] + ' (LD. ' + _v00[0][1] + ')'
                                    else:
                                        cv = recup_cp(x[2], IDLocalite)
                                        _ld_non = False
                                    x[3] = IDLocalite
                                elif x[3] in cpld_234:
                                    _v00 = cpld_234[x[3]]
                                    cv = _v00[0][0] + ' (LD. ' + _v00[0][1] + ')'
                                else:
                                    if len(x) > 4:
                                        cv = recup_cp(x[2], x[4])
                                    else:
                                        cv = recup_cp(x[2], IDLocalite)
                                    _ld_non = False
                            elif len(x) >= 4:
                                cv = recup_cp(x[2], x[3])
                            else:
                                cv = recup_cp(x[2], IDLocalite)
                            tp = {}
                            if Filter != '':
                                if int(x[1]) < 6000000:
                                    tp['Type'] = '0'
                                else:
                                    tp['Type'] = '1'
                            tp['Pays'] = _pays
                            if _pays in ('FRA', 'MAR') and num != '' and compte_num == 0 and ' ' + num + ' ' in x[0]:
                                if len(x[0].strip()) > Taille:
                                    tp['VoieCompleteCourte'] = NormaliseTaille(x[0].strip(), int(Taille))
                                if len(x[0]) >= int(Taille):
                                    x[0] = NormaliseTaille(x[0], int(Taille))
                            else:
                                if len((num + ' ' + x[0]).strip()) > Taille:
                                    tp['VoieCompleteCourte'] = NormaliseTaille((num + ' ' + x[0]).strip(), int(Taille))
                                if num == '':
                                    if len(x[0]) >= int(Taille):
                                        x[0] = NormaliseTaille(x[0], int(Taille))
                                elif len(num) + 1 + len(x[0]) >= int(Taille):
                                    x[0] = NormaliseTaille(x[0], int(Taille) - len(num) - 1)
                            tp['Voie'] = x[0]
                            tp['CodeVoie'] = x[1]
                            tp['IDVoie'] = x[1]
                            if _pays in ('FRA', 'MAR') and len(x) >= 5 and type(x[4]) is list and x[4][0] == 'W':
                                tp['AncVoie'] = x[4][1]
                                x.pop(4)
                            tp['CodePostal'] = FormatCP(x[2])
                            if '-' in IDLocalite:
                                if len(x) == 5:
                                    tp['IDLocalite'] = x[4]
                                else:
                                    tp['IDLocalite'] = x[3]
                            elif len(x) == 5:
                                tp['IDLocalite'] = x[4]
                            elif len(x) == 4:
                                tp['IDLocalite'] = x[3]
                            else:
                                tp['IDLocalite'] = IDLocalite
                            tp['Saisie'] = Adresse_mem
                            tp['Instance'] = Instance
                            tp['Localite'] = cv
                            tp['Cedex'] = '0'
                            if _flag_roudis:
                                tp['Roudis'] = ''
                            tp['ListeNumero'] = ''
                            if 'CEDEX' in tp['Localite']:
                                tp['Cedex'] = '1'
                            if len(x) == 5:
                                if '(LD.' in cv and _v00 != []:
                                    tp['LieuDit'] = _v00[0][1]
                            elif _ld_non and cpld_234.has_key(tp['IDLocalite'] + '_' + tp['CodePostal']):
                                _va = cpld_234[tp['IDLocalite'] + '_' + tp['CodePostal']]
                                if '(LD.' in cv:
                                    _pld = cv.index('(LD.')
                                    _ld0 = cv[0:_pld].strip()
                                    _ld1 = cv[_pld + 5:-1].strip()
                                    _fl0 = False
                                    for _i in _va:
                                        if _i[1] == _ld1:
                                            _fl0 = True
                                            break

                                    if not _fl0:
                                        _ld0 = _va[0][0]
                                        _ld1 = _va[0][1]
                                    tp['LieuDit'] = _ld1
                                    tp['Localite'] = _ld0 + ' (LD. ' + _ld1 + ')'
                                else:
                                    tp['LieuDit'] = _va[0][1]
                            if _pays != 'FRA' and tp['IDVoie'] != '':
                                try:
                                    _vv = adresse[tp['IDVoie']]
                                    if len(_vv) >= 3 and _vv[2] != '':
                                        _idcommune = _vv[2]
                                        if _idcommune != tp['IDLocalite']:
                                            _cp = cp_234U[_idcommune]
                                            tp['IDLocalite'] = _vv[2]
                                            tp['Localite'] = _cp[2]
                                            tp['Cedex'] = '0'
                                except:
                                    pass

                            if _pays not in ('FRA', 'MAR') or num != '' and (compte_num == 1 or ' ' + num + ' ' not in x[0]):
                                tp['Num'] = num
                                tp['Numero'] = num
                                tp['Cedex'] = '0'
                                va = RechNumVoie([['',
                                  '',
                                  '',
                                  num,
                                  '',
                                  x[1]]])
                                if len(va[0]) > 6:
                                    tp['Nbnumero'] = str(va[0][6])
                                    tp['NbNumero'] = str(va[0][6])
                                    tp['ListeNumero'] = va[0][7]
                                    if va[0][6] == 1 and va[0][1] != '' and va[0][1] != tp['CodePostal']:
                                        tp['CodePostal'] = FormatCP(va[0][1])
                                        if va[0][2] != '':
                                            if IDLocalite != va[0][2]:
                                                tp['IDLocalite'] = va[0][2]
                                                _nville = recup_cp(va[0][1], va[0][2])
                                                if _nville != tp['Localite']:
                                                    tp['Localite'] = _nville
                            else:
                                tp['Num'] = ''
                                tp['Numero'] = ''
                                va = RechNumVoie([['',
                                  '',
                                  '',
                                  '',
                                  '',
                                  x[1]]])
                                if len(va[0]) > 6:
                                    tp['Nbnumero'] = str(va[0][6])
                                    tp['NbNumero'] = str(va[0][6])
                                    tp['ListeNumero'] = va[0][7]
                                else:
                                    tp['Nbnumero'] = ''
                                    tp['NbNumero'] = ''
                                    tp['ListeNumero'] = ''
                            if Pays != 'FRA':
                                if cp_234U.has_key(tp['IDLocalite']):
                                    _cpU = cp_234U[tp['IDLocalite']]
                                    tp['Province'] = _cpU[2]
                                    tp['Souslocalite'] = _cpU[3]
                                    if tp['CodePostal'] == '':
                                        tp['CodePostal'] = _cpU[0]
                                else:
                                    tp['Souslocalite'] = ''
                            if _flag_mapgeocodage:
                                if memLicence[1]:
                                    xy = RechercheGeoLoc(tp['IDVoie'], num)
                                    tp['Latitude'] = str(xy[0])
                                    tp['Longitude'] = str(xy[1])
                                    tp['Geolocalisation_Error_Code'] = GeoLocEDF(xy[2])
                                    tp['TempTR'] = xy[3]
                            if _flag_roudis:
                                tp['Roudis'] = recuproudis(tp['IDVoie'], num)
                        if 'TypeVoie' not in tp:
                            tp['TypeVoie'] = ''
                        if Pays == 'FRA' and tp['TypeVoie'] == '':
                            _v2 = decoupagetypevoie(tp['Voie'])
                            tp['TypeVoie'] = _v2[0]
                        if 'LieuDit' not in tp:
                            tp['LieuDit'] = ''
                        vv = ['', '', '']
                        if 'Voie' in tp:
                            if ',' in tp['Voie']:
                                vv = tp['Voie'].split(',')
                                tp['Voie'] = vv[-1].strip()
                        if 'Complement' in tp:
                            if tp['Complement'] == '':
                                tp['Complement'] = vv[1].strip()
                        else:
                            tp['Complement'] = vv[1].strip()
                        if 'Entreprise' in tp:
                            if tp['Entreprise'] == '':
                                tp['Entreprise'] = vv[0].strip()
                        else:
                            tp['Entreprise'] = vv[0].strip()
                        if Version > '1.0':
                            if '(LD. ' in tp['Localite']:
                                i1 = tp['Localite'].find('(LD. ')
                                if i1 >= 0:
                                    i2 = tp['Localite'].find(')', i1)
                                    tp['LieuDit'] = tp['Localite'][i1 + 4:i2].strip()
                                    tp['Localite'] = (tp['Localite'][0:i1] + tp['Localite'][i2 + 1:]).strip()
                        if 'TempTR' in tp:
                            tp.pop('TempTR')
                        if 'Geolocalisation_Error_Code' in tp:
                            tp.pop('Geolocalisation_Error_Code')
                        if tp['IDVoie'] != '':
                            tp['IDVoie'] = normaliseIDVoie(tp['IDVoie'])
                            tp['CodeVoie'] = normaliseIDVoie(tp['IDVoie'])
                            if 'Latitude' not in tp:
                                tp['Latitude'] = ''
                                tp['Longitude'] = ''
                        else:
                            tp['Latitude'] = ''
                            tp['Longitude'] = ''
                        if tp['LieuDit'] == '' and tp['IDLocalite'] != '' and mapville6[tp['IDLocalite']] != '':
                            if LieuDitAdr != '':
                                tp['LieuDit'] = LieuDitAdr
                                retour[str(tpnb)] = tp.copy()
                            else:
                                retour[str(tpnb)] = tp.copy()
                                for _ld in mapville6[tp['IDLocalite']]:
                                    tpnb += 1
                                    tp['LieuDit'] = _ld
                                    retour[str(tpnb)] = tp.copy()

                        else:
                            retour[str(tpnb)] = tp
                        if tpnb == tpnbmax:
                            break

        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        try:
            _a1 = simplejson.dumps(retour)
        except:
            _a1 = retour

        return _a1

    index.exposed = True


class RecupAdrInter(object):

    @jsonp
    def index(self, Pays, Localite, Adresse, Instance, Licence = '', Taille = 38, CodePostal = '', IP_Trace = '', Version = '1.0'):
        retour = {}
        _nativecharset = 'true'
        Taille = int(Taille)
        if '-' in Pays:
            Pays = Pays.split('-')[0]
            _nativecharset = 'false'
        Adresse_mem = Adresse
        if ExisteCompteInter(Licence, Pays):
            if _flag_melissa:
                try:
                    try:
                        if _new_compteur:
                            comptage_activite(Licence, Pays, 'ADRINTER', IP_Trace)
                    except:
                        pass

                    vok = True
                    lic_melissa = _dicomelissa[Licence]['id']
                except:
                    lic_melissa = ''
                    vok = False

                if lic_melissa == '':
                    vok = False
                if vok:
                    pays_iso2 = _dicopaysiso[Pays]
                    urlServer = ''
                    try:
                        _f = {'format': 'jsonp',
                         'id': lic_melissa,
                         'address1': Adresse,
                         'postalcode': CodePostal,
                         'locality': Localite,
                         'country': pays_iso2,
                         'maxrecords': 20,
                         'nativecharset': ''}
                        urlServer = 'http://expressentry.melissadata.net/jsonp/GlobalExpressAddress?' + urllib.urlencode(_f)
                    except Exception as ex:
                        print str(ex)

                    if urlServer != '':
                        vok = True
                        try:
                            if Adresse + CodePostal != '':
                                _dm = decoupage_international(Adresse, '', '', CodePostal, Localite)
                                if _map_inter.has_key(Licence + '_' + _dm):
                                    retour2 = str(MiseEnFormeMelissa(Licence + '_' + _dm, Adresse, '', '', CodePostal, Localite))
                                    if retour2 == '':
                                        try:
                                            _opu = urllib2.urlopen(urlServer)
                                            retour2 = _opu.read()
                                        except:
                                            retour2 = ''
                                            vok = False

                                        try:
                                            _opu.close()
                                        except:
                                            pass

                                else:
                                    try:
                                        _opu = urllib2.urlopen(urlServer)
                                        retour2 = _opu.read()
                                    except:
                                        retour2 = ''
                                        vok = False

                                    try:
                                        _opu.close()
                                    except:
                                        pass

                            else:
                                vok = False
                        except:
                            vok = False

                        dico = {}
                        if vok:
                            try:
                                retour2 = retour2.replace('null', '""')
                                dico = UserDict.UserDict(eval(retour2))
                            except:
                                vok = False

                    if vok:
                        taille_dico = len(dico['d']['Results'])
                        _vr = []
                        for i in range(0, taille_dico):
                            tp = {}
                            tpnb = i + 1
                            cp = dico['d']['Results'][i]['Address']['PostalCodePrimary']
                            villetp = dico['d']['Results'][i]['Address']['Locality']
                            _rr = [capital(dico['d']['Results'][i]['Address']['Thoroughfare']),
                             cp,
                             Adresse,
                             capital(villetp),
                             netAdresse(dico['d']['Results'][i]['Address']['Premise'].strip(), 2)]
                            if _rr not in _vr:
                                tp['Voie'] = capital(dico['d']['Results'][i]['Address']['Thoroughfare'])
                                tp['CodeVoie'] = cp
                                tp['CodePostal'] = cp
                                tp['IDVoie'] = cp
                                tp['Saisie'] = Adresse_mem
                                tp['Instance'] = Instance
                                tp['IDLocalite'] = cp
                                if Pays == 'JPN' and 'DependentLocality' in dico['d']['Results'][i]['Address']:
                                    if dico['d']['Results'][i]['Address']['DependentLocality'] != '':
                                        tp['Localite'] = capital(villetp) + dico['d']['Results'][i]['Address']['DependentLocality'].decode('utf-8')
                                    else:
                                        tp['Localite'] = capital(villetp)
                                else:
                                    tp['Localite'] = capital(villetp)
                                tp['Cedex'] = '0'
                                if 'CEDEX' in tp['Localite']:
                                    tp['Cedex'] = '1'
                                tp['Num'] = netAdresse(dico['d']['Results'][i]['Address']['Premise'].strip(), 2)
                                tp['Nbnumero'] = '1'
                                tp['NbNumero'] = '1'
                                tp['Cedex'] = '0'
                                tp['ListeNumero'] = netAdresse(dico['d']['Results'][i]['Address']['Premise'].strip(), 2)
                                tp['Pays'] = Pays
                                _vr.append(_rr)
                                retour[str(tpnb)] = tp

                        _vr = []
                    else:
                        retour['0'] = {}
                else:
                    retour['0'] = {}
            else:
                retour['0'] = {}
        else:
            retour['0'] = {}
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


class RecupNum(object):

    @jsonp
    def index(self, Pays, CodePostal, IDLocalite, IDVoie, Licence = '', IP_Trace = '', Numero = '', Filter = ''):
        global _compteur
        retour = {}
        _compteur += 1
        if _flag_log:
            log('%s|%s|%s|debut|NUM' % (datetime.datetime.now(), _port_num, _compteur))
        if _pays == Pays:
            if Numero != '':
                va = RechNumVoie([['',
                  '',
                  '',
                  Numero,
                  '',
                  IDVoie]])
            else:
                va = RechNumVoie([['',
                  '',
                  '',
                  '',
                  '',
                  IDVoie]])
            if len(va[0]) > 6:
                tp = {}
                tp['Localite'] = ''
                tp['IDLocalite'] = IDLocalite
                tp['NbNumero'] = str(va[0][6])
                tp['ListeNumero'] = va[0][7]
                tp['IDVoie'] = IDVoie
                tp['CodePostal'] = CodePostal
                tp['Province'] = ''
                tp['SousLocalite'] = ''
                if va[0][2] != '' and va[0][6] == 1 and Numero != '':
                    tp['CodePostal'] = va[0][1]
                    if va[0][5] != '':
                        tp['IDVoie'] = va[0][5]
                    if va[0][2] != IDLocalite:
                        tp['IDLocalite'] = va[0][2]
                        a = recup_tout_cp(va[0][1], va[0][5])
                        if a != [] and len(a) >= 3:
                            tp['Localite'] = a[0].strip()
                            tp['Province'] = a[1]
                            tp['SousLocalite'] = a[2]
                tp['Cedex'] = '0'
                if 'CEDEX' in tp['Localite']:
                    tp['Cedex'] = '1'
            retour['1'] = tp
        if _flag_log:
            log('%s|%s|%s|fin|NUM' % (datetime.datetime.now(), _port_num, _compteur))
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


class RecupCompl(object):

    @jsonp
    def index(self, Pays, IDVoie, IDNum, Licence = '', Taille = 38, IP_Trace = '', AvecGeoloc = 'N', Filter = ''):
        global _compteur
        Taille = int(Taille)
        retour = {}
        _compteur += 1
        if _flag_log:
            log('%s|%s|%s|debut|COMPL' % (datetime.datetime.now(), _port_num, _compteur))
        if _pays == Pays:
            va = RechComplement(IDVoie, IDNum)
            tpnb = 0
            if AvecGeoloc == 'O':
                if Filter == '1':
                    va = []
                    retour['Latitude'] = ''
                    retour['Longitude'] = ''
                    retour['Code'] = '04'
                    retour['Type'] = '1'
                else:
                    lg = RechercheGeoLoc(IDVoie, IDNum)
                    retour['Latitude'] = '0.00'
                    retour['Longitude'] = '0.00'
                    retour['Code'] = '92'
                    if lg:
                        if len(lg) >= 2:
                            retour['Latitude'] = str(lg[0])
                            retour['Longitude'] = str(lg[1])
                            retour['Code'] = GeoLocEDF(lg[2])
                    if Filter != '':
                        retour['Type'] = '0'
                    if Pays == 'FRA' and _flag_irisilot and AvecGeoloc == 'O':
                        if inlicence2(Licence, 'IRIS'):
                            f = IDVoie
                            if f != '-1':
                                f = '00000000'[0:8 - len(f)] + f
                            n = IDNum
                            if 'Latitude' in retour and retour['Latitude'] != '0.0' and retour[i]['Latitude'] != '':
                                retour['ilot'] = ''
                                if 'Code' in retour:
                                    if retour['Code'] in ('00', '01', '02'):
                                        retour['iris'] = rechercheIRIS(retour['Longitude'], retour['Latitude'])[1]
                                        retour['Status_IrisIlot'] = 'INSEE'
                                    elif retour['Code'] == '03':
                                        r = rechercheIRIS(retour['Longitude'], retour['Latitude'])[1]
                                        if r == '0000':
                                            retour['iris'] = r
                                            retour['Status_IrisIlot'] = 'INSEE'
                                        else:
                                            retour['iris'] = ''
                                            retour['Status_IrisIlot'] = 'NO'
                                    else:
                                        retour['iris'] = ''
                                        retour['Status_IrisIlot'] = 'NO'
                                else:
                                    retour['iris'] = rechercheIRIS(retour['Longitude'], retour['Latitude'])[1]
                                    retour['Status_IrisIlot'] = 'INSEE'
                            else:
                                retour['ilot'] = ''
                                retour['iris'] = ''
                                retour['Status_IrisIlot'] = 'NO'
            if va != []:
                for x in va:
                    tpnb += 1
                    tp = {}
                    if len(x) > int(Taille):
                        x = NormaliseTaille(x, int(Taille))
                    tp['Batiment'] = x
                    retour[str(tpnb)] = tp
                    if tpnb == 20:
                        break

        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


class VerifInter(object):

    @jsonp
    def index(self, Pays, Adresse1, Adresse2, Adresse3, CodePostal, Ville, Licence = '', IP_Trace = ''):
        global _compteur
        _compteur += 1
        retour = {}
        if _flag_log:
            log('%s|%s|%s|debut|INTER' % (datetime.datetime.now(), _port_num, _compteur))
        _nativecharset = 'true'
        if '-' in Pays:
            Pays = Pays.split('-')[0]
            _nativecharset = 'false'
        if Pays in ('FRA', 'MAR'):
            if _new_compteur:
                comptage_activite(Licence, Pays, 'VERIFRNVP', IP_Trace)
            if _python25:
                va = common.clientinter._interVerifAdress(Pays, Adresse1, Adresse2, Adresse3, CodePostal, Ville, Licence)
            else:
                va = common27.clientinter._interVerifAdress(Pays, Adresse1, Adresse2, Adresse3, CodePostal, Ville, Licence)
            tpnb = 0
            for x in va:
                if x != None:
                    tpnb += 1
                    tp = {}
                    tp['Valide'] = x[0]
                    tp['Pays'] = x[7]
                    tp['CodePostal'] = x[1]
                    tp['Voie'] = x[3]
                    tp['Ville'] = x[2]
                    tp['NumVoie'] = x[4]
                    tp['BoitePostal'] = x[5]
                    tp['SousLocalite'] = ''
                    tp['Province'] = x[6]
                    tp['Statut'] = x[8]
                    tp['Libelle'] = x[9]
                    tp['Cedex'] = '0'
                    retour[str(tpnb)] = tp
                    if tpnb == 20:
                        break

        else:
            vok = False
            if ExisteCompteInter(Licence, Pays):
                if _new_compteur:
                    comptage_activite(Licence, Pays, 'VERIFINTER', IP_Trace)
                if _flag_melissa:
                    try:
                        vok = True
                        lic_melissa = _dicomelissa[Licence]['id']
                    except:
                        lic_melissa = ''
                        vok = False

                    if lic_melissa == '':
                        vok = False
            if not vok:
                if _python25:
                    va = common.clientinter._interVerifAdress(Pays, Adresse1, Adresse2, Adresse3, CodePostal, Ville, Licence)
                else:
                    va = common27.clientinter._interVerifAdress(Pays, Adresse1, Adresse2, Adresse3, CodePostal, Ville, Licence)
                tpnb = 0
                for x in va:
                    if x != None:
                        tpnb += 1
                        tp = {}
                        tp['Valide'] = x[0]
                        tp['Pays'] = x[7]
                        tp['CodePostal'] = x[1]
                        tp['Voie'] = x[3]
                        tp['Ville'] = x[2]
                        tp['NumVoie'] = x[4]
                        tp['BoitePostal'] = x[5]
                        tp['SousLocalite'] = ''
                        tp['Province'] = x[6]
                        tp['Statut'] = x[8]
                        tp['Libelle'] = x[9]
                        tp['Cedex'] = '0'
                        if 'CEDEX' in x[3]:
                            tp['Cedex'] = '1'
                        retour[str(tpnb)] = tp
                        if tpnb == 20:
                            break

            else:
                pays_iso2 = _dicopaysiso[Pays]
                vadresse1 = transUrl(netAdresse(Adresse1.strip()))
                vadresse2 = transUrl(netAdresse(Adresse2.strip()))
                vadresse3 = transUrl(netAdresse(Adresse3.strip()))
                vcp = transUrl(CodePostal)
                vville = transUrl(Ville)
                urlServer = ''
                try:
                    _f = {'id': lic_melissa,
                     'a1': Adresse1,
                     'a2': Adresse2,
                     'a3': Adresse3,
                     'postal': CodePostal,
                     'loc': Ville,
                     'ctry': pays_iso2,
                     'recordopt': 20,
                     'format': 'json',
                     'opt': 'OUTPUTSCRIPT:NOCHANGE'}
                    urlServer = 'http://address.melissadata.net/v3/WEB/GlobalAddress/doGlobalAddress?' + urllib.urlencode(_f)
                except Exception as ex:
                    print str(ex)
                    urlServer = ''

                if urlServer != '':
                    vok = True
                    try:
                        if vadresse1 + vadresse2 + vadresse3 + vcp + vville != '':
                            _dm = decoupage_international(vadresse1, vadresse2, vadresse3, vcp, vville)
                            if _map_inter.has_key(Licence + '_' + _dm):
                                retour2 = str(MiseEnFormeMelissa(Licence + '_' + _dm, vadresse1, vadresse2, vadresse3, vcp, vville))
                                if retour2 == '':
                                    try:
                                        _opu = urllib2.urlopen(urlServer)
                                        retour2 = _opu.read()
                                    except:
                                        retour2 = ''
                                        vok = False

                                    try:
                                        _opu.close()
                                    except:
                                        pass

                            else:
                                try:
                                    _opu = urllib2.urlopen(urlServer)
                                    retour2 = _opu.read()
                                except:
                                    retour2 = ''
                                    vok = False

                                try:
                                    _opu.close()
                                except:
                                    pass

                        else:
                            vok = False
                    except:
                        vok = False

                    dico = {}
                    if vok:
                        try:
                            retour2 = retour2.replace('null', '""')
                            dico = UserDict.UserDict(eval(retour2))
                        except:
                            vok = False

                    if vok:
                        if int(dico['TotalRecords']) == 1:
                            listecode = dico['Records'][0]['Results'].split(',')
                            tp = {}
                            _ct = controlecode(listecode)
                            vcoderreur = _ct[1]
                            vlib = _ct[2]
                            vstatut = _ct[3]
                            vcp = str(dico['Records'][0]['PostalCode'])
                            vville = capital(netAdresse(dico['Records'][0]['Locality'], 2))
                            vprovince = str(dico['Records'][0]['AdministrativeArea'])
                            vaddr1 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine1']), str(dico['Records'][0]['PostalCode'])), 2))
                            vaddr2 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine2']), str(dico['Records'][0]['PostalCode'])), 2))
                            vaddr3 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine3']), str(dico['Records'][0]['PostalCode'])), 2))
                            vbox = str(dico['Records'][0]['PostBox'])
                            vnum = str(dico['Records'][0]['PremisesNumber'])
                            vpays = str(dico['Records'][0]['CountryISO3166_1_Alpha3'])
                            vvoie = capital(netAdresse(dico['Records'][0]['ThoroughfareName'], 2))
                            vtypevoie = capital(netAdresse(dico['Records'][0]['ThoroughfareLeadingType'], 2))
                            if vtypevoie == '':
                                vtypevoie = capital(netAdresse(dico['Records'][0]['ThoroughfareTrailingType'], 2))
                            if vtypevoie != '':
                                if vaddr2 != '':
                                    if vtypevoie in [vaddr2]:
                                        vmemtp = vaddr1
                                        vaddr1 = vaddr2
                                        vaddr2 = vmemtp
                                    elif vaddr3 != '':
                                        if vtypevoie in [vaddr3]:
                                            vmemtp = vaddr1
                                            vaddr1 = vaddr3
                                            vaddr3 = vaddr2
                                            vaddr2 = vmemtp
                            tp = {}
                            tp['SousLocalite'] = ''
                            tp['Valide'] = vcoderreur
                            tp['Pays'] = vpays
                            tp['CodePostal'] = vcp
                            if vaddr3 != '':
                                tp['Voie'] = vaddr1
                                tp['BoitePostal'] = vaddr2
                                tp['SousLocalite'] = vaddr3
                            elif vaddr2 != '':
                                tp['Voie'] = vaddr1
                                tp['BoitePostal'] = vaddr2
                            else:
                                tp['Voie'] = vaddr1
                                tp['BoitePostal'] = ''
                            tp['Ville'] = vville
                            tp['NumVoie'] = vnum
                            if vbox != '':
                                tp['BoitePostal'] = vbox
                            tp['Province'] = vprovince
                            tp['Statut'] = vstatut
                            tp['Libelle'] = vlib
                            retour['1'] = tp
        if _flag_log:
            log('%s|%s|%s|fin|INTER' % (datetime.datetime.now(), _port_num, _compteur))
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


def test_langue(vpays, vval):
    try:
        vretour = False
        if vpays in ('CN', 'JP', 'HK', 'KR', 'KP', 'KH', 'SG', 'TH', 'TW'):
            vretour = True
            for car in vval.upper():
                if car >= 'A' and car <= 'Z':
                    vretour = False
                    break

    except:
        vretour = False

    return vretour


def cherche_numvoie(val):
    vretour = ['', '']
    vadr = ''
    vnum = ''
    if val[:1].isdigit:
        fnum = True
        for i in val:
            if i == ' ':
                fnum = False
            if fnum:
                vnum += i
            else:
                vadr += i

    elif val[-1:].isdigit:
        fnum = False
        fnumtp = False
        for i in val:
            if i == ' ':
                fnumtp = True
            elif fnumtp:
                if i.isdigit:
                    fnum = True
                    fnumtp = False
            if fnum:
                vnum += i
            else:
                vadr += i

    vretour[0] = vadr
    vretour[1] = vnum
    return vretour


class RecupLibreInter(object):

    @jsonp
    def index(self, Pays, Instance = '1', Adresse = '', Licence = '', Taille = 38, IP_Trace = ''):
        global _compteur
        retour = {}
        Taille = int(Taille)
        _nativecharset = 'true'
        if '-' in Pays:
            Pays = Pays.split('-')[0]
            _nativecharset = 'false'
        if ExisteCompteInter(Licence, Pays):
            if _flag_melissa:
                _compteur += 1
                if _flag_log:
                    log('%s|%s|%s|debut|SINGLEINTER' % (datetime.datetime.now(), _port_num, _compteur))
                if _new_compteur:
                    comptage_activite(Licence, Pays, 'ADRINTER', IP_Trace)
                try:
                    vok = True
                    lic_melissa = _dicomelissa[Licence]['id']
                except:
                    lic_melissa = ''
                    vok = False

                if lic_melissa == '':
                    vok = False
                if vok:
                    pays_iso2 = _dicopaysiso[Pays]
                    urlServer = ''
                    try:
                        dicoparam = {}
                        if test_langue(pays_iso2, Adresse):
                            dicoparam['native'] = 'true'
                        else:
                            dicoparam['native'] = 'false'
                        if str(type(lic_melissa)) != "<type 'unicode'>":
                            dicoparam['lic'] = lic_melissa.decode('ISO-8859-1')
                        else:
                            dicoparam['lic'] = lic_melissa
                        if str(type(Adresse)) != "<type 'unicode'>":
                            dicoparam['adr'] = Adresse
                        else:
                            dicoparam['adr'] = Adresse
                        if type(pays_iso2) != "<type 'unicode'>":
                            dicoparam['pays'] = pays_iso2
                        else:
                            dicoparam['pays'] = pays_iso2
                        if pays_iso2 == 'US':
                            if 'street' in dicoparam['adr'].lower():
                                dicoparam['adr'] = dicoparam['adr'].lower().replace('street', 'st')
                            if 'north' in dicoparam['adr'].lower():
                                dicoparam['adr'] = dicoparam['adr'].lower().replace('north', 'n')
                            if 'avenue' in dicoparam['adr'].lower():
                                dicoparam['adr'] = dicoparam['adr'].lower().replace('avenue', 'ave')
                        _f = {'id': dicoparam['lic'],
                         'ff': dicoparam['adr'],
                         'country': dicoparam['pays'],
                         'rmaxrecords': 30,
                         'format': 'json',
                         'nativecharset': dicoparam['native'],
                         'opt': 'OUTPUTSCRIPT:NOCHANGE'}
                        urlServer = 'http://expressentry.melissadata.net/jsonp/GlobalExpressFreeForm?' + urllib.urlencode(_f)
                    except Exception as ex:
                        print str(ex)

                    if urlServer != '':
                        urlServer = urlServer.encode('UTF-8')
                        try:
                            try:
                                _opu = urllib2.urlopen(urlServer)
                                retour2 = _opu.read()
                            except:
                                retour2 = ''
                                vok = False

                            try:
                                _opu.close()
                            except:
                                pass

                            dico = {}
                            vok = True
                            retour2 = retour2.replace('null', '""')
                            dico = UserDict.UserDict(eval(retour2))
                        except Exception as e:
                            vok = False

                        if vok:
                            taille_dico = len(dico['d']['Results'])
                            memville = []
                            for i in range(0, taille_dico):
                                tp = {}
                                tpnb = i + 1
                                cptp = capital(dico['d']['Results'][i]['Address']['PostalCodePrimary'])
                                villetp = capital(dico['d']['Results'][i]['Address']['Locality'])
                                vprovince = capital(str(dico['d']['Results'][i]['Address']['AdministrativeArea']))
                                vbox = str(dico['d']['Results'][i]['Address']['PostBox'])
                                cpvilletp = (cptp + ' ' + villetp + ' ' + vprovince).strip()
                                cpvilletp2 = (cptp + ' ' + villetp).strip()
                                tpadr2 = capital(dico['d']['Results'][i]['Address']['Address2'])
                                vaddr2 = ''
                                if cpvilletp.upper() != tpadr2.upper() and cpvilletp2.upper() != tpadr2.upper():
                                    vaddr2 = tpadr2
                                tpadr3 = capital(dico['d']['Results'][i]['Address']['Address3'])
                                vaddr3 = ''
                                if vbox == '':
                                    if cpvilletp.upper() != tpadr3.upper() and cpvilletp2.upper() != tpadr3.upper():
                                        vbox = tpadr3
                                elif cpvilletp.upper() != tpadr3.upper() and cpvilletp2.upper() != tpadr3.upper():
                                    vaddr3 = tpadr3
                                tp['CodePostal'] = cptp
                                tp['Localite'] = capital(dico['d']['Results'][i]['Address']['Locality'])
                                tp['Cedex'] = '0'
                                if 'CEDEX' in tp['Localite']:
                                    tp['Cedex'] = '1'
                                tp['Province'] = capital(str(dico['d']['Results'][i]['Address']['AdministrativeArea']))
                                tp['IDLocalite'] = cptp
                                tp['IDVoie'] = cptp
                                tp['TypeVoie'] = ''
                                tp['Voie'] = capital(dico['d']['Results'][i]['Address']['Thoroughfare'])
                                if tp['Voie'].strip() == '':
                                    voie_num = cherche_numvoie(capital(dico['d']['Results'][i]['Address']['Address1']))
                                    if voie_num[0] != '':
                                        tp['Voie'] = voie_num[0]
                                    if voie_num[1] != '':
                                        tp['Numero'] = voie_num[1]
                                        tp['ListeNumero'] = voie_num[1]
                                else:
                                    tp['Numero'] = netAdresse(dico['d']['Results'][i]['Address']['Premise'].strip(), 2)
                                    tp['ListeNumero'] = netAdresse(dico['d']['Results'][i]['Address']['Premise'].strip(), 2)
                                tp['Complement'] = vaddr2
                                tp['Complement2'] = vaddr3
                                tp['NbNumero'] = '1'
                                tp['SousLocalite'] = ''
                                tp['LieuDit'] = vbox
                                tp['Instance'] = Instance
                                tp['Pays'] = Pays
                                retour[str(tpnb)] = tp

                        else:
                            retour['1'] = {}
                    else:
                        retour['1'] = {}
                else:
                    retour['1'] = {}
            else:
                retour['1'] = {}
        else:
            retour['1'] = {}
        if _flag_log:
            log('%s|%s|%s|fin|SINGLEINTER' % (datetime.datetime.now(), _port_num, _compteur))
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


class RecupLibre(object):

    @jsonp
    def index(self, Pays, Adresse, Instance = '1', Licence = '', Taille = 38, IP_Trace = '', Lat = '', Lon = '', DistAdr = 0.01, NbMax = 30):
        global _compteur
        Taille = int(Taille)

        def RL_recupcp():
            CP = RecupCp()
            CodePostal = ''
            Ville = ''
            idl = ''
            fl_cont = False
            resu = eval(CP.index(Pays, IP_Trace, 'True', Licence=Licence, Provenance='IP'))
            if resu != {}:
                if len(resu.keys()) == 1:
                    fl_cont = True
                else:
                    fl_cont = True
                    for i in resu:
                        if resu[i]['IDVoie'] != 'IP_ADDRESS':
                            fl_cont = False
                            break

            if fl_cont:
                if resu['1']['IDVoie'] == 'IP2_ADDRESS':
                    return ['IP2_ADDRESS', '', resu['1']['IDLocalite']]
                resu1 = []
                for i in range(1, len(resu) + 1):
                    resu2 = eval(CP.index(Pays, resu[str(i)]['Localite'], '6', 'True', Licence=Licence, Lat=resu[str(i)]['Latitude'], Lon=resu[str(i)]['Longitude']))
                    if resu2 != {}:
                        for j in resu2:
                            CodePostal = resu2[j]['CodePostal']
                            Ville = resu2[j]['Localite']
                            idl = resu2[j]['IDLocalite']
                            if '(' in Ville:
                                Ville = Ville[0:Ville.index('(') - 1]
                            resu1.append([CodePostal, Ville, idl])

                return resu1
            return [[CodePostal, Ville, idl]]

        retour = {}
        _compteur += 1
        if _flag_log:
            log('%s|%s|%s|debut|SINGLE' % (datetime.datetime.now(), _port_num, _compteur))
        if Pays != _pays:
            c1 = RecupLibreInter()
            retour = c1.index(Pays, Instance, Adresse, Licence, Taille)
            c1 = 0
            return retour
        elif not ExisteCompte(Licence, '', Pays):
            return simplejson.dumps(retour)
        else:
            try:
                comptage_activite(Licence, Pays, 'SINGLE', IP_Trace)
            except:
                pass

            try:
                fl_rech = True
                if IP_Trace != '' and ',' not in Adresse:
                    resu_format = formatage(Adresse)
                    if resu_format[1] != '<CP>' and not (len(resu_format[2]) == 2 and resu_format[1].find('<CEDEX>') >= 0):
                        if _regles.has_key(resu_format[1]):
                            recup = decoupe_voie(_regles[resu_format[1]][0], resu_format)
                            if recup[0] == '':
                                resu = RL_recupcp()
                                if resu != ['', '']:
                                    if resu[0] == 'IP2_ADDRESS':
                                        RA = RecupAdr()
                                        resu = RA.index(Pays, resu[2], Adresse, '1', Licence, Taille, tpnbmax=100)
                                        return resu
                                    Adresse += ' ' + resu[0]
                        else:
                            resu = RL_recupcp()
                            if resu != ['', '']:
                                if resu[0] == 'IP2_ADDRESS':
                                    RA = RecupAdr()
                                    resu = RA.index(Pays, resu[2], Adresse, '1', Licence, Taille, tpnbmax=100)
                                    return resu
                                Adresse += ' ' + resu[0]
                elif Lat != '' and Lon != '' and ',' not in Adresse:
                    comptage_activite(Licence, Pays, 'GEOLOC')
                    if Adresse == '':
                        resu = RecupAdrLatLon(Adresse, Lat, Lon, float(DistAdr), int(NbMax))
                        if resu != {}:
                            return resu
                    else:
                        resu_format = formatage(Adresse)
                        if resu_format[1] != '<CP>' and not (len(resu_format[2]) == 2 and resu_format[1].find('<CEDEX>') >= 0):
                            idl = RecupAdrLatLon(Adresse, Lat, Lon, float(DistAdr), int(NbMax))
                            if idl != '':
                                RA = RecupAdr()
                                resu = RA.index(Pays, idl, Adresse, '1', Licence, Taille, tpnbmax=100)
                                return resu
                if fl_rech:
                    r1 = RechAdresse(Adresse, Lookup=True)
                if len(r1[0]) <= 5:
                    try:
                        if not _new_compteur:
                            IncrementeCompte(Licence, 'json_libre')
                    except:
                        rien = ''

                elif r1[0][5] != 0:
                    try:
                        if not _new_compteur:
                            IncrementeCompte(Licence, 'json_libre')
                    except:
                        rien = ''

                if r1 != []:
                    supp9 = False
                    for ii in r1:
                        if len(ii) >= 9 or len(ii) <= 5:
                            supp9 = True
                            break

                    if supp9:
                        tpnb = 0
                        for li in r1:
                            if li != None:
                                tpnb += 1
                                tp = {}
                                tp['Pays'] = Pays
                                if li[0] == 'VOIE_POSTE':
                                    tp['CodePostal'] = FormatCP(li[6])
                                    tp['Localite'] = li[1]
                                    tp['Province'] = li[3]
                                    tp['IDLocalite'] = li[2]
                                    tp['IDVoie'] = li[4]
                                    tp['Numero'] = ''
                                    tp['TypeVoie'] = ''
                                    tp['Voie'] = li[5]
                                    tp['Complement'] = ''
                                    tp['NbNumero'] = str(li[7])
                                    tp['SousLocalite'] = ''
                                    tp['ListeNumero'] = li[8]
                                    tp['Instance'] = Instance
                                    tp['LieuDit'] = ''
                                    tp['SousLocalite'] = li[-1]
                                    tp['Cedex'] = '0'
                                    if 'CEDEX' in tp['Localite']:
                                        tp['Cedex'] = '1'
                                    if ',' in li[5]:
                                        tp1 = li[5].split(',')
                                        tp['Adresse'] = tp1[-1]
                                        if tp['SousLocalite'] == '':
                                            if len(tp1) >= 3:
                                                tp['SousLocalite'] = tp1[1]
                                        tp['Entreprise'] = tp1[0]
                                        if len(tp1[-1]) > Taille:
                                            tp['VoieCompleteCourte'] = NormaliseTaille(tp1[-1], int(Taille))
                                    elif len(li[5]) > Taille:
                                        tp['VoieCompleteCourte'] = NormaliseTaille(li[5], int(Taille))
                                elif li[0] == 'CEDEXA':
                                    tp['CodePostal'] = FormatCP(li[7])
                                    tp['Localite'] = li[8]
                                    tp['Province'] = li[9]
                                    tp['IDLocalite'] = li[11]
                                    tp['SousLocalite'] = ''
                                    tp['IDVoie'] = li[10]
                                    tp['NbNumero'] = ''
                                    tp['ListeNumero'] = ''
                                    tp['Cedex'] = '0'
                                    if 'CEDEX' in tp['Localite']:
                                        tp['Cedex'] = '1'
                                    tp['Voie'] = li[5]
                                    fbp = False
                                    if li[1][0:5] == '_BP_:':
                                        if li[5] == '':
                                            tp['Complement'] = ''
                                            tp['Voie'] = li[1][5:]
                                        else:
                                            tp['Voie'] = li[5] + ' ' + li[1][5:]
                                    elif li[1][0:7] == '__BP__:':
                                        if li[5] == '':
                                            tp['Complement'] = ''
                                            tp['Voie'] = li[1][7:]
                                        else:
                                            tp['Voie'] = li[5] + ' ' + li[1][7:]
                                    else:
                                        tp['Complement'] = li[1]
                                    if li[4] != '':
                                        if '-' in li[4]:
                                            tt = li[4].split('-')
                                            if tt[0] == tt[1]:
                                                tp['Voie'] += ' ' + tt[0]
                                            else:
                                                tp['Voie'] += ' BP_'
                                                tp['NbNumero'] = str(int(tt[1]) - int(tt[0]) + 1)
                                                tp['ListeNumero'] = str(tt[0])
                                                for iii in range(int(tt[0]) + 1, int(tt[1]) + 1):
                                                    tp['ListeNumero'] += ';' + str(iii)

                                    tp['Numero'] = ''
                                    tp['TypeVoie'] = ''
                                    tp['Instance'] = Instance
                                    tp['LieuDit'] = ''
                                elif len(li) <= 5:
                                    tp['CodePostal'] = FormatCP(li[4])
                                    tp['Localite'] = li[0]
                                    tp['Cedex'] = '0'
                                    if 'CEDEX' in tp['Localite']:
                                        tp['Cedex'] = '1'
                                    if len(li) > 3:
                                        tp['SousLocalite'] = li[3]
                                    tp['Province'] = li[2]
                                    tp['Voie'] = ''
                                    tp['Numero'] = ''
                                    tp['TypeVoie'] = ''
                                    tp['IDLocalite'] = li[1]
                                    tp['IDVoie'] = ''
                                    tp['Instance'] = Instance
                                    tp['LieuDit'] = ''
                                    if tp['Localite'].find('(LD.') > 0:
                                        np1 = tp['Localite'].split('(')
                                        tp['LieuDit'] = np1[1][4:-1]
                                        if len(np1) > 2:
                                            tp['Localite'] = np1[0][:] + ' (' + np1[2]
                                        else:
                                            tp['Localite'] = np1[0][:].strip()
                                    tp['NbNumero'] = ''
                                    tp['ListeNumero'] = ''
                                    tp['Complement'] = ''
                                elif li[0] == 'CEDEX_FRA':
                                    tp['CodePostal'] = li[1][2]
                                    tp['Localite'] = li[2][0]
                                    tp['SousLocalite'] = ''
                                    tp['Province'] = ''
                                    tp['Voie'] = li[10][0] + ',,' + li[3]
                                    tp['Numero'] = li[4]
                                    tp['TypeVoie'] = ''
                                    tp['IDLocalite'] = li[1][0]
                                    tp['IDVoie'] = li[6]
                                    tp['Instance'] = Instance
                                    tp['LieuDit'] = li[10][3]
                                    if li[4] != '':
                                        tp['NbNumero'] = '1'
                                        tp['ListeNumero'] = li[4].strip()
                                    else:
                                        tp['NbNumero'] = ''
                                        tp['ListeNumero'] = ''
                                    tp['Complement'] = li[10][2]
                                    tp['Complement2'] = ''
                                    tp['Entreprise'] = li[10][0]
                                elif 'str' not in str(type(li[0])):
                                    tp['CodePostal'] = FormatCP(li[0][1])
                                    tp['Localite'] = li[1][0]
                                    tp['Cedex'] = '0'
                                    if 'CEDEX' in tp['Localite']:
                                        tp['Cedex'] = '1'
                                    tp['SousLocalite'] = ''
                                    if len(li[1]) > 2 and li[1][2] != '':
                                        tp['SousLocalite'] = li[1][2]
                                    tp['Province'] = li[1][1]
                                    adr = ((li[3] + ' ' + li[4]).strip() + ' ' + li[2]).strip()
                                    if Taille != _Taille_adresse:
                                        TailleMax = Taille
                                    else:
                                        TailleMax = _Taille_adresse
                                    if len(adr) > TailleMax:
                                        n1 = NormaliseTaille(adr, TailleMax).split()
                                        if li[3] != '':
                                            n1 = n1[len(li[3].split()):]
                                        if li[4] != '':
                                            li[4] = n1[0]
                                            n1.pop(0)
                                        li[2] = ' '.join(n1)
                                    tp['Numero'] = li[3]
                                    if not restructure.IsVoie(li[4]):
                                        li[2] = (li[4] + ' ' + li[2]).strip()
                                        li[4] = ''
                                    tp['TypeVoie'] = li[4]
                                    tp['Voie'] = li[2]
                                    tp['IDLocalite'] = li[0][0]
                                    tp['IDVoie'] = str(li[5])
                                    tp['Instance'] = Instance
                                    tp['LieuDit'] = ''
                                    if tp['Localite'].find('(LD.') > 0:
                                        np1 = tp['Localite'].split('(')
                                        tp['LieuDit'] = np1[1][4:-1]
                                        if len(np1) > 2:
                                            tp['Localite'] = np1[0][:] + ' (' + np1[2]
                                        else:
                                            tp['Localite'] = np1[0][:].strip()
                                    tp['NbNumero'] = ''
                                    tp['ListeNumero'] = ''
                                    tp['Complement'] = '\t'.join(li[9])
                                    tp['Cedex'] = '0'
                                    if 'CEDEX' in tp['Localite']:
                                        tp['Cedex'] = '1'
                                else:
                                    tp['CodePostal'] = FormatCP(li[5])
                                    tp['Localite'] = li[0]
                                    tp['SousLocalite'] = li[3]
                                    tp['Province'] = li[2]
                                    tp['Voie'] = ''
                                    tp['Numero'] = ''
                                    tp['TypeVoie'] = ''
                                    tp['IDLocalite'] = li[1]
                                    tp['IDVoie'] = ''
                                    tp['Instance'] = Instance
                                    tp['LieuDit'] = ''
                                    tp['NbNumero'] = ''
                                    tp['ListeNumero'] = ''
                                    tp['Complement'] = ''
                                    tp['Cedex'] = '0'
                                    if 'CEDEX' in tp['Localite']:
                                        tp['Cedex'] = '1'
                                if _flag_roudis:
                                    tp['Roudis'] = recuproudis(tp['IDVoie'], tp['Numero'])
                                if 'XY_' in Licence:
                                    if tp['IDVoie'] != '':
                                        try:
                                            xy = RechercheGeoLoc(tp['IDVoie'], tp['Numero'])
                                            if len(xy) >= 2:
                                                tp['Latitude'] = str(xy[0])
                                                tp['Longitude'] = str(xy[1])
                                                tp['Geolocalisation_Error_Code'] = GeoLocEDF(xy[2])
                                                tp['TempTR'] = xy[3]
                                            else:
                                                tp['Latitude'] = '0.00'
                                                tp['Longitude'] = '0.00'
                                                tp['Geolocalisation_Error_Code'] = '92'
                                        except:
                                            tp['Latitude'] = '0.00'
                                            tp['Longitude'] = '0.00'
                                            tp['Geolocalisation_Error_Code'] = '92'

                                    elif tp['IDLocalite'] != '' and tp['Localite'] != '' and tp['CodePostal'] != '':
                                        _xy = Recherche_CP_BAN(tp['IDLocalite'], tp['CodePostal'], tp['Localite'], tp['LieuDit'])
                                        if _xy == ['', '']:
                                            tp['Latitude'] = '0.00'
                                            tp['Longitude'] = '0.00'
                                        else:
                                            tp['Latitude'] = str(_xy[0])
                                            tp['Longitude'] = str(_xy[1])
                                    else:
                                        tp['Latitude'] = '0.00'
                                        tp['Longitude'] = '0.00'
                                retour[str(tpnb)] = tp
                                if tpnb >= NbMax:
                                    break

                        try:
                            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
                            cherrypy.response.headers['Server'] = 'DQE Server'
                            if _json_acao != '':
                                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
                        except:
                            pass

                        return simplejson.dumps(retour)
                    va = RechNumVoie(r1)
            except:
                va = []

            tpnb = 0
            for li in va:
                if li != None:
                    tpnb += 1
                    tp = {}
                    if li[0] == 'CEDEX_ADR':
                        tp['Pays'] = Pays
                        tp['Voie'] = li[5][0] + ',,' + li[2]
                        tp['CodeVoie'] = li[4]
                        tp['CodePostal'] = FormatCP(li[1][1])
                        tp['Localite'] = li[1][2].strip()
                        tp['Cedex'] = '0'
                        if 'CEDEX' in tp['Localite']:
                            tp['Cedex'] = '1'
                        tp['NbNumero'] = '1'
                        tp['ListeNumero'] = li[3].strip()
                        if li[1][3] == '*':
                            tp['Province'] = ''
                        else:
                            tp['Province'] = li[1][3]
                        tp['IDLocalite'] = li[1][0]
                        tp['IDVoie'] = li[4]
                        tp['Entreprise'] = li[5][0]
                        if li[5][1] == '' and li[5][2] != '':
                            tp['Complement'] = li[5][2]
                            tp['Complement2'] = ''
                        else:
                            tp['Complement'] = li[5][1]
                            tp['Complement2'] = li[5][2]
                        tp['LieuDit'] = li[5][3]
                        tp['Numero'] = li[3].strip()
                    else:
                        tp['Pays'] = Pays
                        tp['CodePostal'] = FormatCP(li[0][1])
                        if '(LD.' in li[1][0]:
                            _ld0 = li[1][0].split('(LD.')
                            _ld1 = _ld0[0].strip()
                            _ld2 = _ld0[1][0:-1].strip()
                            if len(_ld1) > int(Taille):
                                _ld1 = NormaliseTaille(_ld1, int(Taille))
                            if len(_ld2) > int(Taille):
                                _ld2 = NormaliseTaille(_ld2, int(Taille))
                            if _ld1 + ' (LD. ' + _ld2 + ')' != li[1][0]:
                                li[1][0] = _ld1 + ' (LD. ' + _ld2 + ')'
                        elif len(li[1][0]) > int(Taille):
                            li[1][0] = NormaliseTaille(li[1][0], int(Taille))
                        tp['Localite'] = li[1][0]
                        tp['Cedex'] = '0'
                        if 'CEDEX' in tp['Localite']:
                            tp['Cedex'] = '1'
                        tp['SousLocalite'] = ''
                        if len(li[1]) > 2 and li[1][2] != '':
                            tp['SousLocalite'] = li[1][2]
                        tp['Province'] = li[1][1]
                        adr = ((li[3] + ' ' + li[4]).strip() + ' ' + li[2]).strip()
                        if Taille != _Taille_adresse:
                            TailleMax = int(Taille)
                        else:
                            TailleMax = int(_Taille_adresse)
                        if len(adr) > TailleMax:
                            n1 = NormaliseTaille(adr, TailleMax).split()
                            if li[3] != '':
                                n1 = n1[len(li[3].split()):]
                            if li[4] != '':
                                li[4] = n1[0]
                                n1.pop(0)
                            li[2] = ' '.join(n1)
                        tp['Numero'] = li[3]
                        if not restructure.IsVoie(li[4]):
                            li[2] = (li[4] + ' ' + li[2]).strip()
                            li[4] = ''
                        tp['TypeVoie'] = li[4]
                        tp['Voie'] = li[2]
                        tp['IDLocalite'] = li[0][0]
                        tp['IDVoie'] = str(li[5])
                        tp['LieuDit'] = ''
                        tp['Instance'] = Instance
                        if tp['Localite'].find('(LD.') > 0:
                            np1 = tp['Localite'].split('(')
                            tp['LieuDit'] = np1[1][4:-1]
                            if len(np1) > 2:
                                tp['Localite'] = np1[0][:] + ' (' + np1[2]
                            else:
                                tp['Localite'] = np1[0][:].strip()
                            tp['Cedex'] = '0'
                            if 'CEDEX' in tp['Localite']:
                                tp['Cedex'] = '1'
                            if tp['TypeVoie'] == 'LIEU DIT' or tp['TypeVoie'] == 'LD':
                                tp['LieuDit'] = tp['TypeVoie'] + ' ' + tp['Voie']
                        if li[6] != '':
                            if tp.has_key('Complement'):
                                tp['Complement'] = tp['Complement'] + ' ' + li[6]
                            else:
                                tp['Complement'] = li[6]
                        else:
                            tp['Complement'] = ''
                            _ve_1 = 7
                            _ve_2 = 8
                            if len(li) > 7:
                                if len(li) > 9:
                                    _ve_1 = 8
                                    _ve_2 = 9
                            if li[_ve_1] == 1:
                                vc = RechComplement(str(li[5]), str(li[_ve_2]))
                                tpc = 0
                                if vc != []:
                                    for x in vc:
                                        tpc += 1
                                        if len(x) > int(Taille):
                                            x = NormaliseTaille(x, int(Taille))
                                        if tp['Complement'] != '':
                                            tp['Complement'] = tp['Complement'] + ';' + x
                                        else:
                                            tp['Complement'] = x
                                        if tpc == 20:
                                            break

                            if len(li) > 7:
                                if len(li) > 9:
                                    tp['NbNumero'] = str(li[8])
                                    tp['ListeNumero'] = li[9]
                                else:
                                    tp['NbNumero'] = str(li[7])
                                    tp['ListeNumero'] = li[8]
                            else:
                                tp['NbNumero'] = ''
                                tp['ListeNumero'] = ''
                    if _flag_roudis:
                        tp['Roudis'] = recuproudis(tp['IDVoie'], tp['Numero'])
                    if 'XY_' in Licence:
                        if tp['IDVoie'] != '':
                            try:
                                xy = RechercheGeoLoc(tp['IDVoie'], tp['Numero'])
                                if len(xy) >= 2:
                                    tp['Latitude'] = str(xy[0])
                                    tp['Longitude'] = str(xy[1])
                                    tp['Geolocalisation_Error_Code'] = GeoLocEDF(xy[2])
                                    tp['TempTR'] = xy[3]
                                else:
                                    tp['Latitude'] = '0.00'
                                    tp['Longitude'] = '0.00'
                                    tp['Geolocalisation_Error_Code'] = '92'
                            except:
                                tp['Latitude'] = '0.00'
                                tp['Longitude'] = '0.00'
                                tp['Geolocalisation_Error_Code'] = '92'

                        elif tp['IDLocalite'] != '' and tp['Localite'] != '' and tp['CodePostal'] != '':
                            _xy = Recherche_CP_BAN(tp['IDLocalite'], tp['CodePostal'], tp['Localite'], tp['LieuDit'])
                            if _xy == ['', '']:
                                tp['Latitude'] = '0.00'
                                tp['Longitude'] = '0.00'
                            else:
                                tp['Latitude'] = str(_xy[0])
                                tp['Longitude'] = str(_xy[1])
                        else:
                            tp['Latitude'] = '0.00'
                            tp['Longitude'] = '0.00'
                    retour[str(tpnb)] = tp
                    if tpnb >= NbMax:
                        break

            if _flag_log:
                log('%s|%s|%s|fin|SINGLE' % (datetime.datetime.now(), _port_num, _compteur))
            try:
                cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
                cherrypy.response.headers['Server'] = 'DQE Server'
                if _json_acao != '':
                    cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
            except:
                pass

            try:
                ra = simplejson.dumps(retour)
            except:
                print 'erreur'

            return ra
            return

    index.exposed = True


class RecupLibreV2(object):

    @jsonp
    def index(self, Pays, Adresse, Instance = '1', Licence = '', Taille = 38, IP_Trace = '', Lat = '', Lon = '', DistAdr = 0.01, NbMax = 30):
        global _compteur
        Taille = int(Taille)

        def RL_recupcp():
            CP = RecupCp()
            CodePostal = ''
            Ville = ''
            idl = ''
            fl_cont = False
            resu = eval(CP.index(Pays, IP_Trace, 'True', Licence=Licence, Provenance='IP'))
            if resu != {}:
                if len(resu.keys()) == 1:
                    fl_cont = True
                else:
                    fl_cont = True
                    for i in resu:
                        if resu[i]['IDVoie'] != 'IP_ADDRESS':
                            fl_cont = False
                            break

        retour = {}
        _compteur += 1
        if True:
            if not ExisteCompte(Licence, '', Pays):
                return simplejson.dumps(retour)
            try:
                comptage_activite(Licence, Pays, 'SINGLEV2', IP_Trace)
            except:
                pass

            try:
                fl_rech = True
                if IP_Trace != '' and ',' not in Adresse:
                    resu_format = formatage(Adresse)
                    if resu_format[1] != '<CP>' and not (len(resu_format[2]) == 2 and resu_format[1].find('<CEDEX>') >= 0):
                        if _regles.has_key(resu_format[1]):
                            recup = decoupe_voie(_regles[resu_format[1]][0], resu_format)
                            if recup[0] == '':
                                resu = RL_recupcp()
                                if resu != ['', '']:
                                    if resu[0] == 'IP2_ADDRESS':
                                        RA = RecupAdr()
                                        resu = RA.index(Pays, resu[2], Adresse, '1', Licence, Taille, tpnbmax=100)
                                        return resu
                                    Adresse += ' ' + resu[0]
                        else:
                            resu = RL_recupcp()
                            if resu != ['', '']:
                                if resu[0] == 'IP2_ADDRESS':
                                    RA = RecupAdr()
                                    resu = RA.index(Pays, resu[2], Adresse, '1', Licence, Taille, tpnbmax=100)
                                    return resu
                                Adresse += ' ' + resu[0]
                if fl_rech:
                    _f = {'Pays': Pays,
                     'Adresse': Adresse,
                     'Licence': Licence}
                    vurl = 'http://149.202.83.175:8080/SINGLE/?' + urllib.urlencode(_f)
                    try:
                        _opu = urllib2.urlopen(vurl)
                        r1 = _opu.read()
                    except:
                        r1 = '{}'

                    try:
                        _opu.close()
                    except:
                        pass

                    try:
                        cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
                        cherrypy.response.headers['Server'] = 'DQE Server'
                        if _json_acao != '':
                            cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
                    except:
                        pass

                    return r1
            except:
                retour = {}

        return simplejson.dumps(retour)

    index.exposed = True


def verifcomplement(ref1, ref2):
    vx = min(len(ref1), len(ref2))
    res = False
    if ref1[0:vx] == ref2[0:vx]:
        return True
    lr1 = ref1.count(' ')
    lr2 = ref2.count(' ')
    if lr1 > 0 or lr2 > 0:
        if lr1 <= lr2:
            rref1 = ref1.split()
            rref2 = ref2.split()
        else:
            rref1 = ref2.split()
            rref2 = ref1.split()
        rref1.sort()
        rref2.sort()
        compte = 0
        for i in range(0, len(rref1)):
            trouve = False
            for j in range(0, len(rref2)):
                vx = min(len(rref1[i]), len(rref2[j]))
                if rref1[i][0:vx] == rref2[j][0:vx]:
                    compte += 1
                    rref2.pop(j)
                    trouve = True
                    break

            if not trouve:
                res = False
                break

        res = compte == len(rref1)
    return res


def recuplieudit(lieudit, complement, liste):
    resu = []
    possible = []
    for i in liste:
        if lieudit != '':
            if lieudit == i[1]:
                resu = [lieudit,
                 complement,
                 i[2],
                 i[0]]
                break
            if complement != '':
                if complement == i[1]:
                    resu = [complement,
                     lieudit,
                     i[2],
                     i[0]]
                    break
                if distance(lieudit, i[1]) <= (len(lieudit) * 0.15, True):
                    possible.append([len(i[1]) - len(lieudit),
                     i[1],
                     complement,
                     i[2],
                     i[0]])
                elif distance(complement, i[1]) <= (len(complement) * 0.15, True):
                    possible.append([len(i[1]) - len(complement),
                     i[1],
                     lieudit,
                     i[2],
                     i[0]])
            elif distance(lieudit, i[1]) <= (len(lieudit) * 0.15, True):
                possible.append([len(i[1]) - len(lieudit),
                 i[1],
                 complement,
                 i[2],
                 i[0]])
        elif complement != '':
            if complement == i[1]:
                resu = [complement,
                 lieudit,
                 i[2],
                 i[0]]
                break
            if distance(complement, i[1]) <= (len(complement) * 0.15, True):
                possible.append([len(i[1]) - len(complement),
                 i[1],
                 lieudit,
                 i[2],
                 i[0]])

    if resu == [] and possible != []:
        possible.sort()
        if 'list' in str(type(possible[0])):
            resu = [possible[0][1],
             possible[0][2],
             possible[0][3],
             possible[0][4]]
    return resu


def RechIRIS_ILOT(IDVoie, numero):
    try:
        valeur = '%08d' % int(IDVoie)
    except:
        return ['', '']

    resu = ['', '']
    resud = ['', '']
    if _irisilot.has_key(valeur):
        vl = _irisilot[valeur]
        try:
            v = '0'
            for i in numero.strip():
                if i >= '0' and i <= '9':
                    v += i
                else:
                    break

            num = int(v)
        except:
            num = 0

        if num % 2 == 0:
            pair = True
        else:
            pair = False
        for i in vl:
            v1 = int(i[0])
            v2 = int(i[1])
            if i[0] == '0':
                if len(i) == 6:
                    resu = [i[3], i[4], i[5]]
                else:
                    resu = [i[3], i[4]]
            elif pair and (i[2] == '2' or i[2] == '3'):
                if num >= v1 and num <= v2:
                    if len(i) == 6:
                        resu = [i[3], i[4], i[5]]
                    else:
                        resu = [i[3], i[4]]
                    break
                if resud == ['', '']:
                    if len(i) == 6:
                        resud = [i[3], i[4], i[5]]
                    else:
                        resud = [i[3], i[4]]
                elif num < v1:
                    if len(i) == 6:
                        resud = [i[3], i[4], i[5]]
                    else:
                        resud = [i[3], i[4]]
            elif not pair and (i[2] == '1' or i[2] == '3'):
                if num >= v1 and num <= v2:
                    if len(i) == 6:
                        resu = [i[3], i[4], i[5]]
                    else:
                        resu = [i[3], i[4]]
                    break
                if resud == ['', '']:
                    if len(i) == 6:
                        resud = [i[3], i[4], i[5]]
                    else:
                        resud = [i[3], i[4]]
                elif num < v1:
                    if len(i) == 6:
                        resud = [i[3], i[4], i[5]]
                    else:
                        resud = [i[3], i[4]]

    if resu == ['', '']:
        resu = resud
    return resu


class NormalisationTaille(object):

    @jsonp
    def index(self, Pays, L2 = '', L3 = '', L4 = '', L5 = '', L6 = '', Licence = '', Taille = 38):
        if not ExisteCompte(Licence, '', Pays):
            retour = {}
            return simplejson.dumps(retour)
        if _new_compteur:
            try:
                comptage_activite(Licence, Pays, 'STYLEADR', '')
            except:
                pass

        l2 = ''
        if L2 != '':
            l2 = NormaliseTaille(L2, int(Taille))
        l3 = ''
        if L3 != '':
            l3 = NormaliseTaille(L3, int(Taille))
        l4 = ''
        if L4 != '':
            l4 = NormaliseTaille(L4, int(Taille))
        l5 = ''
        if L5 != '':
            l5 = NormaliseTaille(L5, int(Taille))
        l6 = ''
        if L6 != '':
            st1 = L6.split()
            if st1[0].isdigit():
                l6 = st1[0] + ' ' + NormaliseTaille(' '.join(st1[1:]), int(Taille) - 6)
            else:
                l6 = ' '.join(NormaliseTaille('00000 ' + L6, int(Taille)).split()[1:])
        tp = {}
        tp['Pays'] = Pays
        tp['L2'] = L2
        tp['L3'] = L3
        tp['L4'] = L4
        tp['L5'] = L5
        tp['L6'] = L6
        tp['DQE_L2'] = l2
        tp['DQE_L3'] = l3
        tp['DQE_L4'] = l4
        tp['DQE_L5'] = l5
        tp['DQE_L6'] = l6
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(tp)

    index.exposed = True


def decoupagetypevoie(valeur):
    t1 = valeur.split()
    tv = ''
    if restructure.IsVoie(t1[0]):
        if t1[0] in _voie_decoupe:
            _vd = _voie_decoupe[t1[0]]
            _max = 1
            for i in _vd:
                if 'list' in str(type(i)):
                    if len(i) > _max:
                        _max = len(i)

            if _max > 1:
                if _max <= len(t1) - 1:
                    va = range(1, _max + 1)
                    va.reverse()
                else:
                    va = range(1, len(t1))
                    va.reverse()
            else:
                va = [1]
            for j in va:
                if j == 1:
                    if t1[0] in _vd:
                        j0 = _vd.index(t1[0])
                        tv = _vd[j0].strip()
                        t1.pop(0)
                        break
                elif t1[0:j] in _vd:
                    j0 = _vd.index(t1[0:j])
                    tv = ' '.join(_vd[j0]).strip()
                    for k in range(0, j):
                        t1.pop(0)

                    break

            vv = ' '.join(t1).strip()
        else:
            vv = valeur
    else:
        vv = valeur
    return [tv, vv]


def CompareComplement(entree, liste):
    if type(liste) is str:
        liste = liste.split(';')
    if entree.strip() == '':
        if liste == [] or len(liste) == 0:
            return [1, '', '']
        elif len(liste) == 1:
            return [1, liste[0], '']
        else:
            return [7, '', '']
    if liste == []:
        return [4, entree, '']
    _li = liste
    emots = entree.split()
    resu = []
    tmax = {}
    for _i in range(0, len(_li)):
        mots = _li[_i].split()
        nbtrouve = 0
        trouve = []
        nontrouve = []
        for _mot in range(0, len(mots)):
            mot = mots[_mot]
            lequel = -1
            lenmot = -1
            for _emot in range(0, len(emots)):
                if _emot not in trouve:
                    emot = emots[_emot]
                    vam = min(len(emot), len(mot))
                    if emot == mot:
                        lequel = _emot
                        break
                    elif emot[0:vam] == mot[0:vam]:
                        if vam > lenmot:
                            lenmot = vam
                            lequel = _emot

            if lequel != -1:
                nbtrouve += 1
                trouve.append(lequel)

        if nbtrouve == len(emots):
            resu.append([nbtrouve,
             _i,
             trouve,
             len(mots),
             len(emots)])
        if nbtrouve in tmax:
            tmax[nbtrouve] += 1
        else:
            tmax[nbtrouve] = 1

    resu.sort()
    resu.reverse()
    if resu == []:
        return [5, entree, '']
    elif tmax[resu[0][0]] > 1:
        return [5, entree, '']
    verif = resu[0]
    if verif[0] == verif[3] or verif[0] == verif[4] or verif[0] >= int(verif[4] * 0.8):
        nt = ''
        for _emot in range(0, len(emots)):
            if _emot not in verif[2]:
                if nt == '':
                    nt = emots[_emot]
                else:
                    nt += ' ' + emots[_emot]

        return [1, _li[verif[1]], nt]
    else:
        return [5, entree, '']


def normaliseIDVoie(id):
    ll = len(id)
    if ll < 8:
        id = '0' * (8 - ll) + id
    return id


def ComparaisonTypeAdresse(adr1, adr2):
    if adr1 != '' and adr2 != '':
        tb1 = adr1.split()
        tb2 = adr2.split()
        if tb1[0][0].isdigit():
            tb1.pop(0)
        if tb2[0][0].isdigit():
            tb2.pop(0)
        if tb1 != [] and tb1[0] in _voie_transfo and tb2 != [] and tb2[0] in _voie_transfo:
            return _voie_transfo[tb1[0]] == _voie_transfo[tb2[0]]
    return True


def changementVoie(chaine1):
    chaine1 = restructure.SuppChiffres(chaine1)
    for i in restructure._change_mots:
        if chaine1.find(i[0]) >= 0:
            chaine1 = chaine1.replace(i[0], i[1])

    if '  ' in chaine1:
        chaine1 = ' '.join(chaine1.split())
    return chaine1


def formatagenumero(valeur):
    va = valeur.strip()
    if va == '':
        return ['', '', '']
    numero = valeur
    complement = ''
    numseul = ''
    tnum = va.split()
    ll = len(tnum)
    if ll == 1:
        numero = va
        if va.isdigit():
            numseul = va
    elif tnum[0].isalpha():
        numero = ' '.join(tnum)
    else:
        numseul = tnum[0]
        if tnum[1][0].isdigit() or len(tnum[1]) > 1 and tnum[1][0:4] not in ('BIS', 'TER', 'QUIN', 'QUAT'):
            numero = ' '.join(tnum)
            complement = ''
        else:
            complement = tnum[1]
            if len(complement) > 1 and complement[0:4] in ('BIS', 'TER', 'QUIN', 'QUAT'):
                if complement[0:4] == 'BIS':
                    complement = 'B'
                elif complement[0:4] == 'TER':
                    complement = 'T'
                elif complement[0:4] == 'QUIN':
                    complement = 'C'
                elif complement[0:4] == 'QUAT':
                    complement = 'Q'
                tnum[1] = complement
            if len(tnum) > 2:
                numero = (tnum[0] + tnum[1] + ' ' + ' '.join(tnum[2:])).strip()
            else:
                numero = tnum[0] + tnum[1]
    return [numero, complement, numseul]


def rechlieudit(cp, loc):
    _ldl = []
    try:
        lds = mapville4[cp]
        if loc == '':
            _ldl = lds
        else:
            _ldl = []
            for ld in lds:
                if ld[1] == loc:
                    _ldl.append(ld)

    except:
        pass

    return _ldl


def VerifCedexVille(cp, ville):
    if cp != '' and ville != '':
        resu = recherche_villeparnom(ville, cp)
        if resu == []:
            return ['70', 'KO', '1']
        else:
            return ['20', 'OK', '0']
    else:
        return ['20', 'OK', '0']


class VerifRnvp(object):

    def __init__(self, lequel = ''):
        self.lequel = lequel

    def Traite_rnvp(self, Pays, Adresse = '', Instance = '', ligne1 = '', ligne2 = '', ligne3 = '', ligne4 = '', ligne5 = '', ligne6 = '', cp = '', ville = '', Licence = '', Taille = 38, Mini = 0, Cedex = '', IP_Trace = '', Proposition = 'N', ForceInternational = 'N', tr_cpteffectif = 'O', modeBatch = 'N', Descrimination = True, cpdefaut = ''):
        global _compteur
        global _ipelfy

        def razAdresse(ana_adr):
            tp = {}
            tp['Cedex'] = ''
            tp['CodePostal'] = ''
            tp['CompNum'] = ''
            tp['Complement'] = ''
            tp['ListeComplements'] = ''
            tp['DQECodeDetail'] = ''
            tp['DQECodeErreur'] = ''
            tp['DQECompte'] = ''
            tp['DQELibErreur'] = ''
            tp['IDCle'] = ''
            tp['IDCleVoie'] = ''
            tp['IDHexaposte'] = ''
            tp['IDLocalite'] = ''
            tp['IDVoie'] = ''
            tp['Instance'] = ''
            tp['LieuDit'] = ''
            tp['Ligne2'] = ''
            tp['ListeNumero'] = ''
            tp['Localite'] = ''
            tp['NbNumero'] = ''
            tp['NumSeul'] = ''
            tp['Numero'] = ''
            tp['Pays'] = ''
            tp['Province'] = ''
            tp['Roudis'] = ''
            tp['TypeVoie'] = ''
            tp['Voie'] = ''
            tp['Pays'] = Pays
            if type(ana_adr) is list:
                ana0 = ana_adr[1][1]
            else:
                ana0 = ana_adr
            tp['CodePostal'] = ana0['rnvp_Cp']
            tp['Localite'] = (ana0['rnvp_Ville'] + ' ' + ana0['rnvp_Cedex']).strip()
            if tp['CodePostal'] in cp_234:
                cps = cp_234[tp['CodePostal']]
                for i in cps:
                    vi = decode(i[0])
                    if distanceVille(vi, tp['Localite'])[0] >= 0.9:
                        tp['IDLocalite'] = i[1]
                        if '(LD.' in vi:
                            ld = vi[vi.index('(LD.') + 5:-1].strip()
                            vi = vi[0:vi.index('(LD.')].strip()
                            if ld not in ana0['rnvp_Adr5']:
                                ana0['rnvp_Adr5'] = (ana0['rnvp_Adr5'] + ' ' + ld).strip()
                            if ld in ana0['rnvp_Adr2']:
                                ana0['rnvp_Adr2'] = ' '.join(ana0['rnvp_Adr2'].replace(ld, '').split())
                            elif ld in ana0['rnvp_Adr3']:
                                ana0['rnvp_Adr3'] = ' '.join(ana0['rnvp_Adr3'].replace(ld, '').split())
                        tp['Localite'] = vi.strip()
                        break

            tp['Cedex'] = '0'
            if 'CEDEX' in tp['Localite']:
                tp['Cedex'] = '1'
            tp['Province'] = '*'
            tp['Voie'] = ana0['rnvp_Adresse']
            tp['Instance'] = Instance
            tp['Complement'] = ana0['rnvp_Adr3']
            tp['LieuDit'] = ana0['rnvp_Adr5']
            tp['DQECodeErreur'] = '0'
            tp['DQELibErreur'] = 'Adresse non trouvee mais Cedex'
            if modeBatch == 'O':
                tp['DQECodeComplem'] = '4'
            tp['Adresse'] = tp['Voie']
            tp['DQECompte'] = ''
            tp['DQEPourcentErreur'] = ''
            tp['DQECodeDetail'], tp['DQELibErreur'], tp['DQECodeErreur'] = VerifCedexVille(tp['CodePostal'], tp['Localite'])
            if type(ana_adr) is list:
                tp['ligne1'] = ana[1][1]['rnvp_Adr1']
                tp['ligne2'] = ana[1][1]['rnvp_Adr2']
                tp['ligne3'] = NormaliseTaille(tp['Complement'], int(Taille)).strip()
                tp['ligne4'] = NormaliseTaille(tp['Voie'], int(Taille))
                tp['ligne5'] = NormaliseTaille(ana[1][1]['rnvp_Adr5'], int(Taille))
                tp['LieuDit'] = tp['ligne5']
                tp['ligne6'] = (tp['CodePostal'] + ' ' + tp['Localite']).strip()
            return tp

        def ajoutespace(valeur):
            if valeur == '' or valeur.isdigit():
                return valeur
            else:
                valeur = valeur.strip()
                for i in range(0, len(valeur)):
                    if valeur[i] == ' ':
                        return valeur
                    if not valeur[i].isdigit():
                        return valeur[0:i] + ' ' + valeur[i:]

                return valeur

        def nbmots(adr1, adr2):
            if adr1 == '' or adr2 == '':
                return 0
            else:
                cpt = 0
                tb0 = adr2.split()
                for i in adr1.split():
                    if i != '' and i in tb0:
                        cpt += 1
                        tb0.pop(tb0.index(i))
                        if tb0 == []:
                            break

                return cpt

        def formatnumfra(valeur):
            if valeur == '' or Pays != 'FRA':
                return valeur
            elif valeur.isdigit():
                return valeur
            res = ''
            tr = False
            for i in range(0, len(valeur)):
                if not valeur[i].isdigit():
                    tr = True
                    break

            if not tr or valeur[i] in '-;, :':
                return valeur
            else:
                return (valeur[0:i] + ' ' + valeur[i:]).strip()

        Taille = int(Taille)
        if Descrimination and Proposition in 'OoYy':
            Descrimination = False

        def extractnum(val):
            retour = ''
            for i in val:
                if i in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'):
                    retour += i

            return retour

        flag_cont = True
        flag_merge = False
        mem_retour = []
        mem_proposition_erreur = ''
        ana = {}
        _nativecharset = 'true'
        if '-' in Pays:
            Pays = Pays.split('-')[0]
            _nativecharset = 'false'
        if not ExisteCompte(Licence, '', Pays):
            retour = {}
            return simplejson.dumps(retour)
        if _new_compteur:
            if tr_cpteffectif != 'jeneveuxpas':
                try:
                    if Pays != _pays or Pays != 'FRA':
                        comptage_activite(Licence, Pays, 'RNVPINTER', IP_Trace)
                    else:
                        comptage_activite(Licence, Pays, 'RNVP', IP_Trace)
                except:
                    pass

        if self.lequel == 'RNVP' and _ipelfy != '' and Pays == 'FRA':
            tb = (Adresse + '|||||').split('|')
            if len(tb) >= 5:
                fl = False
                if tb[3] == '' and tb[4] == '':
                    if tb[0] != '':
                        if tb[1] != '':
                            ana = AnalyseRN(tb[1])
                            Adresse = tb[0] + '|' + ana['rnvp_Adresse'] + '|' + tb[2]
                        else:
                            ana = AnalyseRN(tb[0])
                            Adresse = '|' + ana['rnvp_Adresse'] + '|' + tb[2]
                        fl = True
                    elif tb[1] != '':
                        ana = AnalyseRN(tb[1])
                        Adresse = tb[0] + '|' + ana['rnvp_Adresse'] + '|' + tb[2]
                        fl = True
                    elif tb[2] != '':
                        ana = AnalyseRN(tb[2])
                        Adresse = '||' + ana['rnvp_Adresse']
                        fl = True
                    if fl:
                        Adresse = Adresse + '|' + ana['rnvp_Cp'] + '|' + ana['rnvp_Ville']
                try:
                    Adresse = Adresse.encode('utf-8')
                except:
                    pass

                _f = {'Pays': Pays,
                 'Adresse': Adresse,
                 'Instance': Instance,
                 'Licence': Licence,
                 'Taille': str(Taille),
                 'Mini': str(Mini),
                 'Cedex': Cedex}
            try:
                vurl = _ipelfy + '/RNVP/?' + urllib.urlencode(_f)
            except:
                print 'erreur'

            _fl_cp = False
            if _flag_rnvpextend and tb[0] + tb[1] + tb[2] == '' and (tb[3] != '' or tb[4] != ''):
                cp1 = RecupCp()
                if tb[3] != '':
                    if Pays in ['FRA', 'MAR'] and len(tb[3]) == 4 and tb[3].isdigit():
                        tb[3] = '0' + tb[3]
                    retour = eval(cp1.index(Pays=Pays, CodePostal=tb[3], Instance='1', Licence=Licence, McpCpt=False, Alpha='True'))
                else:
                    retour = eval(cp1.index(Pays=Pays, CodePostal=tb[4], Instance='1', Licence=Licence, McpCpt=False, Alpha='True'))
                for i in retour:
                    retour[i]['Voie'] = ''
                    retour[i]['Numero'] = ''
                    retour[i]['TypeVoie'] = ''
                    retour[i]['IDVoie'] = ''
                    retour[i]['Complement'] = ''
                    retour[i]['Ligne2'] = ''
                    retour[i]['DQECodeErreur'] = '0'

                if len(retour) > 1:
                    if tb[3] != '' and tb[4] != '':
                        ret1 = {}
                        _ret1 = 1
                        for i in retour:
                            _l1 = min(len(retour[i]['Localite']), len(tb[4]))
                            _l2 = distance(retour[i]['Localite'], tb[4])
                            if _l1 != 0:
                                _d = 1.0 - _l2 / (_l1 * 1.0)
                            else:
                                _d = 0
                            if tb[4].upper() in retour[i]['Localite'] or _d > 0.75:
                                ret1[str(_ret1)] = retour[i]
                                _ret1 += 1

                        if ret1 != {}:
                            retour = ret1
                flag_cont = False
                _fl_cp = True
                c1 = ''
            else:
                try:
                    _opu = urllib2.urlopen(vurl)
                    retour = _opu.read()
                except:
                    retour = {}

                try:
                    _opu.close()
                except:
                    pass

            ligne2 = ''
            if not _fl_cp:
                flag_cont = False
                if Proposition.upper() in ['O',
                 'OUI',
                 'YES',
                 'Y']:
                    try:
                        r1 = eval(retour)
                        mem_retour = r1
                        if len(r1) == 1:
                            if Pays == 'FRA' and Taille < 38:
                                if r1[0]['Numero'] != '':
                                    _t0 = len(r1[0]['Numero']) + 1
                                else:
                                    _t0 = 0
                                _t1 = (r1[0]['TypeVoie'] + ' ' + r1[0]['Voie']).strip()
                                if len(_t1) > Taille - _t0:
                                    _v = NormaliseTaille(_t1, Taille - _t0)
                                    _v2 = decoupagetypevoie(_v)
                                    if not restructure.IsVoie(_v2[0]):
                                        _v2[1] = (_v2[0] + ' ' + _v2[1]).strip()
                                        _v2[0] = ''
                                    r1[0]['TypeVoie'] = _v2[0]
                                    r1[0]['Voie'] = _v2[1]
                                    if _PosAdrNumero == 'L':
                                        r1[0]['Adresse'] = (r1[0]['Numero'] + ' ' + (r1[0]['TypeVoie'] + ' ' + r1[0]['Voie']).strip()).strip()
                                    else:
                                        r1[0]['Adresse'] = (r1[0]['Voie'] + ' ' + (r1[0]['TypeVoie'] + ' ' + r1[0]['Numero']).strip()).strip()
                            r1[0]['Numero'] = formatnumfra(r1[0]['Numero'])
                            if r1[0].has_key('DQECodeDetail') and r1[0]['DQECodeDetail'] in ['30',
                             '31',
                             '40',
                             '41',
                             '50',
                             '51',
                             '60',
                             '61',
                             '70',
                             '80']:
                                mem_proposition_erreur = r1[0]['DQECodeDetail']
                                ligne2 = r1[0]['Ligne2']
                                if r1[0]['Adresse'] != '':
                                    ch = (Adresse + '||||||||').split('|')
                                    Adresse = '|' + r1[0]['Adresse'] + '|' + r1[0]['LieuDit'] + '|' + ch[3] + '|' + ch[4]
                                flag_cont = True
                                flag_merge = True
                                print '*** recherche suite ****'
                            else:
                                tailleville = 2500
                                if 'IDLocalite' in r1[0] and r1[0]['IDLocalite'] in mapville5:
                                    tailleville = mapville5[r1[0]['IDLocalite']]
                                if r1[0]['DQECodeDetail'] in ['21',
                                 '22',
                                 '23',
                                 '24']:
                                    _n = RechNumVoie([['',
                                      '',
                                      '',
                                      r1[0]['Numero'],
                                      '',
                                      r1[0]['IDVoie']]])
                                    if _n[0][7] == '':
                                        r1[0]['DQECodeDetail'] = '10'
                                        r1[0]['DQECodeErreur'] = '0'
                                        r1[0]['DQELibErreur'] = 'Adresse Trouvee'
                                    else:
                                        r1[0]['DQELibErreur'] = 'KO numero inexistant dans la voie'
                                        r1[0]['NbNumero'] = str(_n[0][6])
                                        r1[0]['ListeNumero'] = _n[0][7]
                                        if r1[0]['Numero'] == '':
                                            if tailleville < 2500:
                                                r1[0]['DQECodeDetail'] = '22'
                                            else:
                                                r1[0]['DQECodeDetail'] = '24'
                                        elif tailleville < 2500:
                                            r1[0]['DQECodeDetail'] = '21'
                                        else:
                                            r1[0]['DQECodeDetail'] = '23'
                    except:
                        flag_cont = False

                else:
                    try:
                        if self.lequel == 'RNVP':
                            retour1 = eval(retour)
                            if retour1 != [] and len(retour1) == 1:
                                if Pays == 'FRA' and Taille < 38:
                                    if retour1[0]['Numero'] != '':
                                        _t0 = len(retour1[0]['Numero']) + 1
                                    else:
                                        _t0 = 0
                                    _t1 = (retour1[0]['TypeVoie'] + ' ' + retour1[0]['Voie']).strip()
                                    if len(_t1) > Taille - _t0:
                                        _v = NormaliseTaille(_t1, Taille - _t0)
                                        _v2 = decoupagetypevoie(_v)
                                        if not restructure.IsVoie(_v2[0]):
                                            _v2[1] = (_v2[0] + ' ' + _v2[1]).strip()
                                            _v2[0] = ''
                                        retour1[0]['TypeVoie'] = _v2[0]
                                        retour1[0]['Voie'] = _v2[1]
                                        if _PosAdrNumero == 'L':
                                            retour1[0]['Adresse'] = (retour1[0]['Numero'] + ' ' + (retour1[0]['TypeVoie'] + ' ' + retour1[0]['Voie']).strip()).strip()
                                        else:
                                            retour1[0]['Adresse'] = (retour1[0]['Voie'] + ' ' + (retour1[0]['TypeVoie'] + ' ' + retour1[0]['Numero']).strip()).strip()
                                if 'IDVoie' in retour1[0] and retour1[0]['IDVoie'] != '' and retour1[0]['IDVoie'] != '0':
                                    if retour1[0]['Complement'] == '':
                                        _c = RechComplement(retour1[0]['IDVoie'], retour1[0]['Numero'])
                                        if len(_c) > 0:
                                            _c = ';'.join(_c)
                                            retour1[0]['Complement'] = _c
                                    if 'NbNumero' in retour1[0] and (retour1[0]['NbNumero'] == '' or int(retour1[0]['NbNumero']) <= 0):
                                        _n = RechNumVoie([['',
                                          '',
                                          '',
                                          retour1[0]['Numero'],
                                          '',
                                          retour1[0]['IDVoie']]])
                                        tailleville = 2500
                                        if 'IDLocalite' in retour1[0] and retour1[0]['IDLocalite'] in mapville5:
                                            tailleville = mapville5[retour1[0]['IDLocalite']]
                                        if len(_n) == 1:
                                            if not (_n[0][3] == retour1[0]['Numero'] and _n[0][6] <= 1):
                                                retour1[0]['NbNumero'] = str(_n[0][6])
                                                retour1[0]['ListeNumero'] = _n[0][7]
                                                if retour1[0]['DQECodeDetail'] in ['10', '21', '22']:
                                                    if retour1[0]['Numero'] == '':
                                                        if tailleville < 2500:
                                                            retour1[0]['DQECodeDetail'] = '22'
                                                        else:
                                                            retour1[0]['DQECodeDetail'] = '24'
                                                        retour1[0]['DQECodeErreur'] = '4'
                                                        retour1[0]['DQELibErreur'] = 'KO numero inexistant dans la voie'
                                                    else:
                                                        if tailleville < 2500:
                                                            retour1[0]['DQECodeDetail'] = '21'
                                                        else:
                                                            retour1[0]['DQECodeDetail'] = '23'
                                                        retour1[0]['DQECodeErreur'] = '4'
                                                        retour1[0]['DQELibErreur'] = 'KO numero inexistant dans la voie'
                                                else:
                                                    if not retour1[0]['DQECodeDetail'] in ['30',
                                                     '31',
                                                     '40',
                                                     '41']:
                                                        if tailleville < 2500:
                                                            retour1[0]['DQECodeDetail'] = '21'
                                                        else:
                                                            retour1[0]['DQECodeDetail'] = '23'
                                                    retour1[0]['DQECodeErreur'] = '4'
                                                    retour1[0]['DQELibErreur'] = 'KO numero inexistant dans la voie'
                                            elif retour1[0]['DQECodeDetail'] in ['10',
                                             '21',
                                             '22',
                                             '23',
                                             '24'] and _n[0][7] == '':
                                                retour1[0]['DQECodeDetail'] = '10'
                                                retour1[0]['DQECodeErreur'] = '0'
                                                retour1[0]['DQELibErreur'] = 'Adresse Trouvee'
                                    elif 'Numero' in retour1[0] and 'DQECodeDetail' in retour1[0]:
                                        if retour1[0]['DQECodeDetail'] in ['10',
                                         '21',
                                         '22',
                                         '23',
                                         '24']:
                                            a1 = RechNumVoie([['',
                                              '',
                                              '',
                                              retour1[0]['Numero'],
                                              '',
                                              retour1[0]['IDVoie']]])
                                            if retour1[0]['DQECodeDetail'] == '10':
                                                retour1[0]['DQELibErreur'] = 'OK'
                                            else:
                                                retour1[0]['DQELibErreur'] = 'KO numero inexistant dans la voie'
                                    retour = {}
                                    retour['1'] = retour1[0]
                            else:
                                retour = retour1
                        else:
                            retour = eval(retour)
                    except:
                        retour1 = {}

        if flag_cont:
            retour = {}
            _compteur += 1
            if _flag_log:
                log('%s|%s|%s|debut|RNVP' % (datetime.datetime.now(), _port_num, _compteur))
            if Taille != None and int(Taille) > 20 and int(Taille) != _Taille_adresse:
                TailleMax = int(Taille)
            else:
                TailleMax = _Taille_adresse
            if (self.lequel == 'RNVP2' or Proposition in ['O',
             'Y',
             'OUI',
             'YES']) and Pays == _pays:
                try:
                    _validate = False
                    va = []
                    fl_eff = False
                    if Adresse != '':
                        flag_ana = True
                        if '|' in Adresse:
                            tb = Adresse.split('|')
                            ana = AnalyseRN(Adresse)
                            _Mligne4 = changementVoie(convertUTFISO.convertUTF8(tb[1], 'O'))
                            _Mligne3 = changementVoie(convertUTFISO.convertUTF8(tb[0], 'O'))
                            fl_reverse = ana['rnvp_Adr3'] != '' and ana['rnvp_Adresse'] != '' and _Mligne4 in ana['rnvp_Adr3'] and _Mligne3 in ana['rnvp_Adresse']
                            fl_reverseinc = False
                            if ana['rnvp_Adresse'] == '':
                                r1 = []
                                va = [[['', ''],
                                  ['', ''],
                                  '',
                                  '',
                                  '',
                                  0,
                                  '']]
                                if restructure.AnalyseSpecifique != None and restructure._isValidate:
                                    _validate = restructure.AnalyseSpecifique.isValidate(ana)
                                if not _validate and ana['rnvp_Cp'] != '' and ana['rnvp_Ville'] != '':
                                    if ana['rnvp_Adr5'] != '' and '<BP3>' in ana['Format']:
                                        r1 = RechAdresse(ana['rnvp_Adr5'] + ' ' + ana['rnvp_Cp'] + ' ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'], transvoie=False)
                                    else:
                                        r1 = RechAdresse('nothingtodo' + ' ' + ana['rnvp_Cp'] + ' ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'], transvoie=False)
                                    if len(r1) == 1 and r1[0][0] != ['', ''] and ' CEDEX ' in r1[0][1][0] + ' ':
                                        _validate = True
                                        r1[0][2] = ''
                            elif ana['rnvp_Cp'] == '':
                                r1 = RechAdresse(ana['rnvp_Adresse'] + ' , ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                if fl_reverse or fl_reverseinc:
                                    r2 = RechAdresse(_Mligne4 + ' , ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                    if len(r2) == 1 and r2[0][0] != ['', '']:
                                        if len(r1) != 1 or r1[0][0] == ['', '']:
                                            r1 = r2[:]
                                            if _Mligne3 != '' and _Mligne4 != '':
                                                ana['rnvp_Adresse'] = ana['rnvp_Adresse'].replace(_Mligne3, _Mligne4)
                                                ana['rnvp_Adr3'] = ana['rnvp_Adr3'].replace(_Mligne4, _Mligne3)
                                            else:
                                                ana['rnvp_Adresse'] = _Mligne4
                                                ana['rnvp_Adr3'] = _Mligne3
                            else:
                                if ana['rnvp_Ville'] != '' and ana['rnvp_Adresse'] != '' and len(ana['rnvp_Ville']) + 1 < len(ana['rnvp_Adresse']) and ' ' + ana['rnvp_Ville'] == ana['rnvp_Adresse'][-len(ana['rnvp_Ville']) - 1:]:
                                    _po = ana['rnvp_Adresse'].index(' ' + ana['rnvp_Ville'])
                                    r1 = RechAdresse(ana['rnvp_Adresse'][0:_po] + ' ' + ana['rnvp_Cp'] + ' ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                    if r1 != [] and r1[0] != '' and r1[0][0] == ['', '']:
                                        r1 = RechAdresse(ana['rnvp_Adresse'] + ' ' + ana['rnvp_Cp'] + ' ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                else:
                                    r1 = RechAdresse(ana['rnvp_Adresse'] + ' ' + ana['rnvp_Cp'] + ' ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                if len(r1) == 1 and r1[0][0] == ['', '']:
                                    if restructure.AnalyseSpecifique != None and restructure._isValidate:
                                        if restructure.AnalyseSpecifique.isValidate(ana):
                                            r1 = [[['', ''],
                                              ['', '', ''],
                                              ',',
                                              ',',
                                              ',']]
                                            _validate = True
                                elif len(r1) == 1 and ' CEDEX ' in r1[0][1][0] + ' ':
                                    _validate = True
                                if not _validate and fl_reverse:
                                    r2 = RechAdresse(_Mligne4 + ' ' + ana['rnvp_Cp'] + ' ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                    if len(r2) == 1 and r2[0][0] != ['', '']:
                                        if len(r1) != 1 or r1[0][0] == ['', '']:
                                            r1 = r2[:]
                                            if _Mligne3 != '' and _Mligne4 != '':
                                                ana['rnvp_Adresse'] = ana['rnvp_Adresse'].replace(_Mligne3, _Mligne4)
                                                ana['rnvp_Adr3'] = ana['rnvp_Adr3'].replace(_Mligne4, _Mligne3)
                                            else:
                                                ana['rnvp_Adresse'] = _Mligne4
                                                ana['rnvp_Adr3'] = _Mligne3
                                            flag_ana = False
                                elif not _validate and fl_reverseinc:
                                    r2 = RechAdresse(_Mligne4 + ' ' + ana['rnvp_Cp'] + ' ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                    if len(r2) == 1 and r2[0][0] != ['', '']:
                                        if len(r1) != 1 or r1[0][0] == ['', '']:
                                            r1 = r2[:]
                                            _m = ana['rnvp_Adresse']
                                            if _m != '' and _Mligne4 != '':
                                                ana['rnvp_Adresse'] = ana['rnvp_Adresse'].replace(_m, _Mligne4)
                                                ana['rnvp_Adr3'] = ana['rnvp_Adr3'].replace(_Mligne4, _m)
                                            else:
                                                ana['rnvp_Adresse'] = _Mligne4
                                                ana['rnvp_Adr3'] = _m
                                            flag_ana = False
                                if not _validate:
                                    try:
                                        if r1[0][0] == ['', ''] and ana['rnvp_Ville'] != '':
                                            r1 = RechAdresse(ana['rnvp_Adresse'] + ' , ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                            if r1[0][0] == ['', ''] and ana['rnvp_Adr3'] != '':
                                                r1 = RechAdresse(ana['rnvp_Adr3'] + ' , ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                                if r1[0][0] != ['', '']:
                                                    mem = ana['rnvp_Adr3'][:]
                                                    ana['rnvp_Adr3'] = ana['rnvp_Adresse'][:]
                                                    ana['rnvp_Adresse'] = mem
                                                    flag_ana = False
                                            if r1[0][0] == ['', ''] and ana['rnvp_Adr2'] != '':
                                                r1 = RechAdresse(ana['rnvp_Adr2'] + ' , ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                                if r1[0][0] != ['', '']:
                                                    mem = ana['rnvp_Adr2'][:]
                                                    ana['rnvp_Adr2'] = ''
                                                    ana['rnvp_Adr3'] = (ana['rnvp_Adr3'] + ' ' + ana['rnvp_Adresse']).strip()
                                                    ana['rnvp_Adresse'] = mem
                                                    flag_ana = False
                                            if r1[0][0] == ['', '']:
                                                _tb = (Adresse + '|||||').split('|')
                                                _adr = _tb[1]
                                                if _adr != '':
                                                    r1 = RechAdresse(_adr + ' , ' + ana['rnvp_Cp'] + ' , ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                                    if r1[0][0] != ['', '']:
                                                        ana0 = AnalyseRN(_tb[0] + '|8 RUE TEST||92800|PUTEAUX')
                                                        ana['rnvp_Adr2'] = ana0['rnvp_Adr2']
                                                        ana['rnvp_Adr3'] = ana0['rnvp_Adr3']
                                                        ana['rnvp_Adresse'] = _adr
                                                        flag_ana = False
                                    except:
                                        pass

                            fl_eff = True
                        else:
                            r1 = RechAdresse(Adresse, NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                            if len(r1) == 1 and r1[0][0] == ['', '']:
                                if restructure.AnalyseSpecifique != None and restructure._isValidate:
                                    if restructure.AnalyseSpecifique.isValidate(ana):
                                        r1 = [[['', ''],
                                          ['', '', ''],
                                          ',',
                                          ',',
                                          ',']]
                                        _validate = True
                        if not _validate and ana['rnvp_Adr3'] != '' and not testVille(r1, ana['rnvp_Ville']):
                            _r1 = RechAdresse(ana['rnvp_Adr3'] + ' ' + ana['rnvp_Cp'] + ' ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                            if testVille(_r1, ana['rnvp_Ville']):
                                r1 = _r1
                                mem = ana['rnvp_Adresse'][:]
                                ana['rnvp_Adresse'] = ana['rnvp_Adr3'][:]
                                ana['rnvp_Adr3'] = mem
                            elif '|' in Adresse:
                                tb = Adresse.split('|')
                                if tb[1] != ana['rnvp_Adr3'] or tb[1] != ana['rnvp_Adresse']:
                                    _r1 = RechAdresse(tb[1] + ' ' + ana['rnvp_Cp'] + ' ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                                    if testVille(_r1, ana['rnvp_Ville']):
                                        r1 = _r1
                                        mem = ana['rnvp_Adresse'][:]
                                        ana['rnvp_Adresse'] = tb[1][:]
                                        ana['rnvp_Adr3'] = ana['rnvp_Adr3'].replace(tb[1], '')
                                        ana['rnvp_Adr3'] = (ana['rnvp_Adr3'] + ' ' + mem).strip()
                                        flag_ana = False
                        LieuDitPresent = False
                        if not _validate:
                            if len(r1) != 0 and (len(r1) > 1 or r1[0][3] == '' and r1[0][4] != '' and len(r1) == 1):
                                if not fl_eff:
                                    ana = AnalyseRN(Adresse)
                                    r1 = RechAdresse(ana['rnvp_Adresse'] + ' ' + ana['rnvp_Cp'] + ' ' + ana['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana['rnvp_Cedex'])
                            elif flag_ana:
                                ana = AnalyseRN(Adresse)
                        if r1 != []:
                            if len(r1[0]) >= 9:
                                tpnb = 0
                                for li in r1:
                                    if li != None:
                                        tpnb += 1
                                        tp = {}
                                        tp['Pays'] = Pays
                                        tp['CodePostal'] = li[0][1]
                                        tp['Localite'] = li[1][0]
                                        tp['Province'] = li[1][1]
                                        tp['Cedex'] = '0'
                                        if 'CEDEX' in tp['Localite']:
                                            tp['Cedex'] = '1'
                                        adr = ((li[3] + ' ' + li[4]).strip() + ' ' + li[2]).strip()
                                        if Taille != _Taille_adresse:
                                            TailleMax = Taille
                                        else:
                                            TailleMax = _Taille_adresse
                                        if len(adr) > TailleMax:
                                            n1 = NormaliseTaille(adr, TailleMax).split()
                                            if li[3] != '':
                                                n1 = n1[len(li[3].split()):]
                                            if li[4] != '':
                                                li[4] = n1[0]
                                                n1.pop(0)
                                            li[2] = ' '.join(n1)
                                        if not restructure.IsVoie(li[4]):
                                            li[2] = (li[4] + ' ' + li[2]).strip()
                                            li[4] = ''
                                        tp['Voie'] = li[2]
                                        tp['TypeVoie'] = li[4]
                                        tp['Numero'] = li[3]
                                        tp['IDLocalite'] = li[0][0]
                                        tp['IDVoie'] = str(li[5])
                                        tp['Instance'] = Instance
                                        tp['Complement'] = ''
                                        tp['ListeComplements'] = ''
                                        if tp['Localite'].find('(LD.') > 0:
                                            LieuDitPresent = True
                                            np1 = tp['Localite'].split('(')
                                            tp['LieuDit'] = np1[1][4:-1]
                                            if len(np1) > 2:
                                                tp['Localite'] = np1[0][:] + ' (' + np1[2]
                                            else:
                                                tp['Localite'] = np1[0][:].strip()
                                            if tp['TypeVoie'] == 'LIEU DIT' or tp['TypeVoie'] == 'LD':
                                                tp['LieuDit'] = tp['TypeVoie'] + ' ' + tp['Voie']
                                            else:
                                                tp['LieuDit'] = ''
                                        if ana['rnvp_Adr3'] != '':
                                            tp['Complement'] = NormaliseTaille(ana['rnvp_Adr3'], int(Taille))
                                            if tp['LieuDit'] == '' and ana['rnvp_Adr5'] != '':
                                                tp['LieuDit'] = NormaliseTaille(ana['rnvp_Adr5'], int(Taille))
                                            elif tp['LieuDit'] == '':
                                                tp['LieuDit'] = NormaliseTaille(ana['rnvp_Adr1'] + ' ' + ana['rnvp_Adr2'], int(Taille))
                                        else:
                                            tp['Complement'] = NormaliseTaille(ana['rnvp_Adr1'] + ' ' + ana['rnvp_Adr2'], int(Taille))
                                        tp['Numero'], tp['CompNum'], tp['NumSeul'] = formatagenumero(tp['Numero'])
                                        if _PosAdrNumero != 'L':
                                            tp['Adresse'] = ' '.join((tp['TypeVoie'] + ' ' + tp['Voie'] + ' ' + tp['Numero']).split())
                                        else:
                                            tp['Adresse'] = ' '.join((tp['Numero'] + ' ' + tp['TypeVoie'] + ' ' + tp['Voie']).split())
                                        tp['Ligne2'] = ana['rnvp_Adr2']
                                        tp['DQECompte'] = ''
                                        tp['Cedex'] = ''
                                        tp['DQEPourcentErreur'] = ''
                                        if tp['IDLocalite'] != '':
                                            if tp['IDVoie'] != '':
                                                if tp['NbNumero'] != '' and int(tp['NbNumero']) > 1:
                                                    tp['DQECodeErreur'] = '4'
                                                    tp['DQELibErreur'] = 'KO numero inexistant dans la voie'
                                                    tp['DQECodeDetail'] = '23'
                                                else:
                                                    tp['DQECodeErreur'] = '0'
                                                    tp['DQELibErreur'] = 'OK'
                                                    tp['DQECodeDetail'] = '10'
                                            else:
                                                tp['DQECodeErreur'] = '3'
                                                tp['DQELibErreur'] = 'KO verification manuelle'
                                                tp['DQECodeDetail'] = '50'
                                                tp['DQEPourcentErreur'] = '60'
                                        else:
                                            tp['DQECodeErreur'] = '1'
                                            tp['DQECodeDetail'] = '80'
                                            tp['DQELibErreur'] = 'KO Aucune correspondance'
                                        retour[str(tpnb)] = tp

                            else:
                                va = RechNumVoie(r1, cpdefaut=cpdefaut)
                    else:
                        LieuDitPresent = False
                        if (ligne1 + ligne2 + ligne3 + ligne4 + ligne5 + cp + ville).strip() != '':
                            try:
                                if ligne6 != '':
                                    ana = AnalyseRN_COMPLET(ligne1, ligne2, ligne3, ligne4, ligne5, ligne6)
                                else:
                                    if cp == '' and ville != '':
                                        cp = '00000'
                                    if len(cp) < 5:
                                        cp = '00000'[0:5 - len(cp)] + cp
                                    ana = AnalyseRN_COMPLET(ligne1, ligne2, ligne3, ligne4, ligne5, '', cp, ville)
                                _Mligne4 = changementVoie(convertUTFISO.convertUTF8(ligne4, 'O'))
                                _Mligne3 = changementVoie(convertUTFISO.convertUTF8(ligne3, 'O'))
                                fl_reverse = ana[1][1]['rnvp_Adr3'] != '' and ana[1][1]['rnvp_Adresse'] != '' and _Mligne4 in ana[1][1]['rnvp_Adr3'] and _Mligne3 in ana[1][1]['rnvp_Adresse']
                                fl_reverseinc = ana[1][1]['rnvp_Adr3'] != '' and ana[1][1]['rnvp_Adresse'] != '' and ana[1][1]['rnvp_Adresse'] in _Mligne3
                                r1 = []
                                if ana[1][1]['rnvp_Adresse'] != '':
                                    if ana[1][1]['rnvp_Cp'] == '00000':
                                        r1 = RechAdresse(ana[1][1]['rnvp_Adresse'] + ' , ' + ana[1][1]['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana[1][1]['rnvp_Cedex'])
                                    else:
                                        r1 = RechAdresse(ana[1][1]['rnvp_Adresse'] + ' ' + ana[1][1]['rnvp_Cp'] + ' ' + ana[1][1]['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana[1][1]['rnvp_Cedex'])
                                else:
                                    if restructure.AnalyseSpecifique != None and restructure._isValidate:
                                        _validate = restructure.AnalyseSpecifique.isValidate(ana[1][1])
                                    if not _validate and ana[1][1]['rnvp_Cp'] != '' and ana[1][1]['rnvp_Ville'] != '':
                                        if ana[1][1]['rnvp_Adr5'] != '' and '<BP3>' in ana[1][1]['Format']:
                                            r1 = RechAdresse(ana[1][1]['rnvp_Adr5'] + ' ' + ana[1][1]['rnvp_Cp'] + ' ' + ana[1][1]['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana[1][1]['rnvp_Cedex'], transvoie=False)
                                        else:
                                            r1 = RechAdresse('nothingtodo ' + ana[1][1]['rnvp_Cp'] + ' ' + ana[1][1]['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana[1][1]['rnvp_Cedex'], transvoie=False)
                                    if len(r1) == 1:
                                        r1[0][2] = ''
                                _validate = False
                                if len(r1) == 0 or r1[0][0] == ['', '']:
                                    if restructure.AnalyseSpecifique != None and restructure._isValidate:
                                        if restructure.AnalyseSpecifique.isValidate(ana[1][1]):
                                            r1 = [[['', ''],
                                              ['', '', ''],
                                              ',',
                                              ',',
                                              ',']]
                                            _validate = True
                                elif len(r1) == 1 and ' CEDEX ' in r1[0][1][0] + ' ':
                                    _validate = True
                                if not _validate and len(r1) == 1 and len(r1[0]) >= 1 and r1[0][0] == ['', '']:
                                    if ana[1][1]['rnvp_Cp'] != '' and ana[1][1]['rnvp_Ville'] != '':
                                        r2 = RechAdresse(ana[1][1]['rnvp_Adresse'] + ' 00000 ' + ana[1][1]['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana[1][1]['rnvp_Cedex'])
                                        if len(r2) == 1 and r2[0][0] != ['', '']:
                                            r1 = r2[:]
                                if not _validate and fl_reverse:
                                    r2 = RechAdresse(_Mligne4 + ' ' + ana[1][1]['rnvp_Cp'] + ' ' + ana[1][1]['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana[1][1]['rnvp_Cedex'])
                                    if len(r2) == 1 and r2[0][0] != ['', '']:
                                        r1 = r2[:]
                                        ana[1][1]['rnvp_Adresse'] = ana[1][1]['rnvp_Adresse'].replace(_Mligne3, _Mligne4)
                                        ana[1][1]['rnvp_Adr3'] = ana[1][1]['rnvp_Adr3'].replace(_Mligne4, _Mligne3)
                                        flag_ana = False
                                elif not _validate and fl_reverseinc:
                                    r2 = RechAdresse(_Mligne4 + ' ' + ana[1][1]['rnvp_Cp'] + ' ' + ana[1][1]['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana[1][1]['rnvp_Cedex'])
                                    if len(r2) == 1 and r2[0][0] != ['', '']:
                                        r1 = r2[:]
                                        _m = ana[1][1]['rnvp_Adresse']
                                        ana[1][1]['rnvp_Adresse'] = ana[1][1]['rnvp_Adresse'].replace(_m, _Mligne4)
                                        ana[1][1]['rnvp_Adr3'] = ana[1][1]['rnvp_Adr3'].replace(_Mligne4, _m)
                                        flag_ana = False
                                if not _validate and ana[1][1]['rnvp_Adr3'] != '' and not testVille(r1, ana[1][1]['rnvp_Ville']):
                                    _r1 = RechAdresse(ana[1][1]['rnvp_Adr3'] + ' ' + ana[1][1]['rnvp_Cp'] + ' ' + ana[1][1]['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana[1][1]['rnvp_Cedex'])
                                    if testVille(_r1, ana[1][1]['rnvp_Ville']):
                                        r1 = _r1
                                        mem = ana[1][1]['rnvp_Adresse']
                                        ana[1][1]['rnvp_Adresse'] = ana[1][1]['rnvp_Adr3']
                                        ana[1][1]['rnvp_Adr3'] = mem[:]
                                    else:
                                        try:
                                            _voie = convertUTFISO.convertUTF8(ligne4)
                                        except:
                                            try:
                                                _voie = convertUTFISO.convertUTF8(ligne4.decode('utf-8'))
                                            except:
                                                _voie = ligne4

                                elif not _validate and ana[1][1]['rnvp_Adr3'] == '' and ana[1][1]['rnvp_Adr2'] != '' and not testVille(r1, ana[1][1]['rnvp_Ville']):
                                    _r1 = RechAdresse(ana[1][1]['rnvp_Adr2'] + ' ' + ana[1][1]['rnvp_Cp'] + ' ' + ana[1][1]['rnvp_Ville'], NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut, vcedex=ana[1][1]['rnvp_Cedex'])
                                    if testVille(_r1, ana[1][1]['rnvp_Ville']):
                                        r1 = _r1
                                        mem = ana[1][1]['rnvp_Adresse']
                                        ana[1][1]['rnvp_Adresse'] = ana[1][1]['rnvp_Adr2']
                                        ana[1][1]['rnvp_Adr3'] = mem[:]
                                        ana[1][1]['rnvp_Adr2'] = ''
                                if not _validate and len(r1) == 0:
                                    if ligne4 != '':
                                        r1 = RechAdresse(ligne4 + ' , ' + cp + ' , ' + ville, NBMax=40, Lookup=True, Appel='RNVP', cpdefaut=cpdefaut)
                                        if r1[0][0] != ['', '']:
                                            ana0 = AnalyseRN_COMPLET(ligne1, ligne2, ligne3, '8 RUE TEST', '', '', '92800', 'PUTEAUX')
                                            ana['rnvp_Adr2'] = ana0['rnvp_Adr2']
                                            ana['rnvp_Adr3'] = ana0['rnvp_Adr3']
                                            ana['rnvp_Adresse'] = ligne4
                                            flag_ana = False
                                if r1 != [] and len(r1) > 1:
                                    _r1 = RechNumVoie(r1, cpdefaut=cpdefaut)
                                    if len(_r1) >= 1:
                                        r1 = _r1
                                va = []
                                if r1 != []:
                                    if r1[0][0] == ['', '']:
                                        tp = {}
                                        tp['IDLocalite'] = ''
                                        tp['Pays'] = Pays
                                        tp['CodePostal'] = ana[1][1]['rnvp_Cp']
                                        tp['Localite'] = (ana[1][1]['rnvp_Ville'] + ' ' + ana[1][1]['rnvp_Cedex']).strip()
                                        if tp['CodePostal'] in cp_234:
                                            cps = cp_234[tp['CodePostal']]
                                            for i in cps:
                                                vi = decode(i[0])
                                                if distanceVille(vi, tp['Localite'])[0] >= 0.9:
                                                    tp['IDLocalite'] = i[1]
                                                    if '(LD.' in vi:
                                                        ld = vi[vi.index('(LD.') + 5:-1].strip()
                                                        vi = vi[0:vi.index('(LD.')].strip()
                                                        if not ld in ana[1][1]['rnvp_Adr5']:
                                                            ana[1][1]['rnvp_Adr5'] = (ana[1][1]['rnvp_Adr5'] + ' ' + ld).strip()
                                                        if ld in ana[1][1]['rnvp_Adr2']:
                                                            ana[1][1]['rnvp_Adr2'] = ' '.join(ana[1][1]['rnvp_Adr2'].replace(ld, '').split())
                                                        elif ld in ana[1][1]['rnvp_Adr3']:
                                                            ana[1][1]['rnvp_Adr3'] = ' '.join(ana[1][1]['rnvp_Adr3'].replace(ld, '').split())
                                                    tp['Localite'] = vi.strip()
                                                    break

                                        tp['Cedex'] = '0'
                                        if 'CEDEX' in tp['Localite']:
                                            tp['Cedex'] = '1'
                                        tp['Province'] = '*'
                                        tp['Voie'] = ana[1][1]['rnvp_Adresse']
                                        tp['Numero'] = ''
                                        tp['TypeVoie'] = ''
                                        tp['IDVoie'] = ''
                                        tp['Instance'] = Instance
                                        tp['Complement'] = ana[1][1]['rnvp_Adr3'].strip()
                                        tp['ListeComplements'] = ''
                                        tp['ligne1'] = ana[1][1]['rnvp_Adr1']
                                        tp['ligne2'] = ana[1][1]['rnvp_Adr2']
                                        tp['ligne3'] = NormaliseTaille(tp['Complement'], int(Taille)).strip()
                                        tp['ligne4'] = NormaliseTaille(tp['Voie'], int(Taille))
                                        tp['ligne5'] = NormaliseTaille(ana[1][1]['rnvp_Adr5'], int(Taille))
                                        tp['LieuDit'] = tp['ligne5']
                                        tp['ligne6'] = (tp['CodePostal'] + ' ' + tp['Localite']).strip()
                                        if _validate:
                                            tp['DQECodeErreur'] = '0'
                                            tp['DQELibErreur'] = 'Adresse non trouvee mais Cedex'
                                        else:
                                            tp['DQECodeErreur'] = '1'
                                            tp['DQELibErreur'] = 'Adresse non trouvee'
                                        if modeBatch == 'O':
                                            tp['DQECodeComplem'] = '4'
                                        tp['Numero'], tp['CompNum'], tp['NumSeul'] = formatagenumero(tp['Numero'])
                                        if _PosAdrNumero != 'L':
                                            tp['Adresse'] = ' '.join((tp['TypeVoie'] + ' ' + tp['Voie'] + ' ' + tp['Numero']).split())
                                        else:
                                            tp['Adresse'] = ' '.join((tp['Numero'] + ' ' + tp['TypeVoie'] + ' ' + tp['Voie']).split())
                                        tp['Ligne2'] = ana[1][1]['rnvp_Adr2']
                                        tp['DQECompte'] = ''
                                        tp['Cedex'] = ''
                                        tp['DQEPourcentErreur'] = ''
                                        if _validate:
                                            tp['DQECodeDetail'], tp['DQELibErreur'], tp['DQECodeErreur'] = VerifCedexVille(tp['CodePostal'], tp['Localite'])
                                            tp['Cedex'] = 'validate'
                                            if tp['IDLocalite'] != '':
                                                if tp['IDVoie'] != '':
                                                    if tp['NbNumero'] != '' and int(tp['NbNumero']) <= 1:
                                                        tp['DQECodeErreur'] = '0'
                                                        tp['DQELibErreur'] = 'OK'
                                                        tp['DQECodeDetail'] = '10'
                                                        tp['Cedex'] = ''
                                        elif tp['IDLocalite'] != '':
                                            if tp['IDVoie'] != '':
                                                if tp['NbNumero'] != '' and int(tp['NbNumero']) > 1:
                                                    tp['DQECodeErreur'] = '4'
                                                    tp['DQELibErreur'] = 'KO numero inexistant dans la voie'
                                                    tp['DQECodeDetail'] = '23'
                                                else:
                                                    tp['DQECodeErreur'] = '0'
                                                    tp['DQELibErreur'] = 'OK'
                                                    tp['DQECodeDetail'] = '10'
                                            else:
                                                tp['DQECodeErreur'] = '3'
                                                tp['DQELibErreur'] = 'KO verification manuelle'
                                                tp['DQECodeDetail'] = '50'
                                                tp['DQEPourcentErreur'] = '60'
                                        else:
                                            tp['DQECodeErreur'] = '1'
                                            tp['DQECodeDetail'] = '80'
                                            tp['DQELibErreur'] = 'KO Aucune correspondance'
                                        retour['1'] = tp
                                    elif len(r1[0]) >= 7:
                                        tpnb = 0
                                        cumul = []
                                        for li in r1:
                                            if li != None:
                                                tpnb += 1
                                                tp = {}
                                                tp['Pays'] = Pays
                                                tp['CodePostal'] = li[0][1]
                                                tp['Localite'] = li[1][0].strip()
                                                tp['Province'] = li[1][1]
                                                tp['Cedex'] = '0'
                                                if 'CEDEX' in tp['Localite']:
                                                    tp['Cedex'] = '1'
                                                if modeBatch == 'O':
                                                    tp['DQECodeComplem'] = ''
                                                adr = ((li[3] + ' ' + li[4]).strip() + ' ' + li[2]).strip()
                                                if Taille != _Taille_adresse:
                                                    TailleMax = Taille
                                                else:
                                                    TailleMax = _Taille_adresse
                                                if len(adr) > TailleMax:
                                                    n1 = NormaliseTaille(adr, TailleMax).split()
                                                    if li[3] != '':
                                                        n1 = n1[len(li[3].split()):]
                                                    if li[4] != '':
                                                        li[4] = n1[0]
                                                        n1.pop(0)
                                                    li[2] = ' '.join(n1)
                                                if not restructure.IsVoie(li[4]):
                                                    li[2] = (li[4] + ' ' + li[2]).strip()
                                                    li[4] = ''
                                                tp['Voie'] = li[2]
                                                li[3] = ajoutespace(li[3])
                                                tp['Numero'] = MefNumero(li[3], Pays)
                                                tp['TypeVoie'] = li[4]
                                                tp['IDLocalite'] = li[0][0]
                                                tp['IDVoie'] = str(li[5])
                                                tp['Instance'] = Instance
                                                if ana[1][1]['rnvp_Adr3'] != '':
                                                    tp['Complement'] = NormaliseTaille(ana[1][1]['rnvp_Adr3'].upper(), int(Taille)).strip()
                                                else:
                                                    tp['Complement'] = ''
                                                tp['ListeComplements'] = ''
                                                _numv = RechNumVoie([['',
                                                  '',
                                                  '',
                                                  MefNumero(li[3], Pays),
                                                  '',
                                                  str(li[5])]])
                                                fl_numero = True
                                                if _numv[0][6] <= 1:
                                                    if li[3] == '':
                                                        tp['NbNumero'] = '0'
                                                    else:
                                                        tp['NbNumero'] = '1'
                                                    tp['ListeNumero'] = MefNumero(li[3], Pays)
                                                else:
                                                    tp['NbNumero'] = str(_numv[0][6])
                                                    tp['ListeNumero'] = _numv[0][7]
                                                    fl_numero = False
                                                fl_complem = True
                                                if li[3] != '' and tp['NbNumero'] == '1':
                                                    res1 = RechComplement(str(li[5]), li[3])
                                                    for x in res1:
                                                        if len(x) > int(Taille):
                                                            x = NormaliseTaille(x, int(Taille))
                                                        if ana[1][1]['rnvp_Adr3'].strip() == x.strip():
                                                            tp['Complement'] = x
                                                            tp['ListeComplements'] = ''
                                                            break
                                                        if ana[1][1]['rnvp_Adr3'].strip().upper() != '' and verifcomplement(ana[1][1]['rnvp_Adr3'].strip().upper(), x.strip().upper()):
                                                            if not x in tp['Complement']:
                                                                tp['Complement'] = x
                                                            tp['ListeComplements'] = ''
                                                            break
                                                        if tp['ListeComplements'] != '':
                                                            tp['ListeComplements'] = tp['ListeComplements'] + ';' + x
                                                        else:
                                                            tp['ListeComplements'] = x

                                                    if modeBatch == 'O':
                                                        rs = CompareComplement(tp['Complement'], res1)
                                                        tp['DQECodeComplem'] = str(rs[0])
                                                        if rs[2] != '':
                                                            if ana[1][1]['rnvp_Adr2'] != '':
                                                                ana[1][1]['rnvp_Adr2'] += ' ' + rs[2]
                                                            else:
                                                                ana[1][1]['rnvp_Adr2'] = rs[2]
                                                tp['ligne1'] = ana[1][1]['rnvp_Adr1']
                                                tp['ligne2'] = ana[1][1]['rnvp_Adr2']
                                                tp['ligne3'] = tp['Complement']
                                                tp['ligne5'] = NormaliseTaille(ana[1][1]['rnvp_Adr5'], int(Taille))
                                                tp['LieuDit'] = tp['ligne5']
                                                if tp['Localite'].find('(LD.') > 0:
                                                    LieuDitPresent = True
                                                    np1 = tp['Localite'].split('(')
                                                    tp['LieuDit'] = np1[1][4:-1]
                                                    if len(np1) > 2:
                                                        tp['Localite'] = (np1[0][:] + ' (' + np1[2]).strip()
                                                    else:
                                                        tp['Localite'] = np1[0][:].strip()
                                                if tp['LieuDit'] != '':
                                                    if not AjusteCPVille(tp['LieuDit']) in AjusteCPVille(tp['ligne5'].upper()):
                                                        tp['ligne5'] = (tp['ligne5'] + ' ' + tp['LieuDit']).strip()
                                                tp['ligne6'] = (tp['CodePostal'] + ' ' + tp['Localite']).strip()
                                                if tp['LieuDit'] == '' and (tp['Complement'] != '' or tp['ligne2'] != '') and tp['IDLocalite'] in mapville6:
                                                    for _l in mapville6[tp['IDLocalite']]:
                                                        if tp['Complement'] != '':
                                                            if tp['Complement'] == _l:
                                                                tp['LieuDit'] = _l
                                                                tp['ligne5'] = _l
                                                                tp['Complement'] = ''
                                                                tp['ligne3'] = ''
                                                                break
                                                        if tp['ligne2'] != '':
                                                            if tp['ligne2'] == _l:
                                                                tp['LieuDit'] = _l
                                                                tp['ligne5'] = _l
                                                                tp['ligne2'] = ''
                                                                tp['Ligne2'] = ''
                                                                break

                                                if fl_complem and fl_numero:
                                                    tp['DQECodeErreur'] = '0'
                                                    tp['DQELibErreur'] = 'Adresse trouvee'
                                                elif not fl_numero:
                                                    tp['DQECodeErreur'] = '4'
                                                    tp['DQELibErreur'] = 'Numero non trouve'
                                                else:
                                                    tp['DQECodeErreur'] = '0'
                                                    tp['DQELibErreur'] = 'Complement a completer'
                                                tp['Numero'], tp['CompNum'], tp['NumSeul'] = formatagenumero(li[3])
                                                if _PosAdrNumero != 'L':
                                                    tp['Adresse'] = ' '.join((tp['TypeVoie'] + ' ' + tp['Voie'] + ' ' + li[3]).split())
                                                else:
                                                    tp['Adresse'] = ' '.join((tp['Numero'] + ' ' + tp['TypeVoie'] + ' ' + tp['Voie']).split())
                                                tp['ligne4'] = NormaliseTaille((tp['Numero'] + ' ' + li[4]).strip() + ' ' + li[2].strip(), int(Taille))
                                                tp['Ligne2'] = ana[1][1]['rnvp_Adr2']
                                                tp['DQECompte'] = ''
                                                tp['Cedex'] = ''
                                                tp['DQEPourcentErreur'] = ''
                                                if _validate:
                                                    tp['DQECodeDetail'], tp['DQELibErreur'], tp['DQECodeErreur'] = VerifCedexVille(tp['CodePostal'], tp['Localite'])
                                                    if tp['IDLocalite'] != '':
                                                        if tp['IDVoie'] != '':
                                                            if tp['NbNumero'] != '' and int(tp['NbNumero']) <= 1:
                                                                tp['DQECodeErreur'] = '0'
                                                                tp['DQELibErreur'] = 'OK'
                                                                tp['DQECodeDetail'] = '10'
                                                elif tp['IDLocalite'] != '':
                                                    if tp['IDVoie'] != '':
                                                        if tp['NbNumero'] != '' and int(tp['NbNumero']) > 1:
                                                            tp['DQECodeErreur'] = '4'
                                                            tp['DQELibErreur'] = 'KO numero inexistant dans la voie'
                                                            if tp['Numero'] == '':
                                                                tp['DQECodeDetail'] = '24'
                                                            else:
                                                                tp['DQECodeDetail'] = '23'
                                                        else:
                                                            tp['DQECodeErreur'] = '0'
                                                            tp['DQELibErreur'] = 'OK'
                                                            tp['DQECodeDetail'] = '10'
                                                    else:
                                                        tp['DQECodeErreur'] = '3'
                                                        tp['DQELibErreur'] = 'KO verification manuelle'
                                                        tp['DQECodeDetail'] = '50'
                                                        tp['DQEPourcentErreur'] = '60'
                                                else:
                                                    tp['DQECodeErreur'] = '1'
                                                    tp['DQECodeDetail'] = '80'
                                                    tp['DQELibErreur'] = 'KO Aucune correspondance'
                                                retour[str(tpnb)] = tp
                                                if tpnb == 20:
                                                    break

                                    else:
                                        va = RechNumVoie(r1)
                            except Exception as e:
                                va = []
                                tp = {}
                                tp['ligne1'] = ligne1
                                tp['ligne2'] = ligne2
                                tp['ligne3'] = NormaliseTaille(ligne3, int(Taille))
                                tp['ligne4'] = NormaliseTaille(ligne4, int(Taille))
                                tp['ligne5'] = NormaliseTaille(ligne5, int(Taille))
                                tp['ligne6'] = (cp + ' ' + ville).strip()
                                tp['Voie'] = NormaliseTaille(ligne4, int(Taille))
                                tp['TypeVoie'] = ''
                                tp['Numero'] = ''
                                tp['CodePostal'] = cp
                                tp['IDLocalite'] = ''
                                tp['Localite'] = ville
                                tp['Cedex'] = '0'
                                if 'CEDEX' in tp['Localite']:
                                    tp['Cedex'] = '1'
                                tp['IDVoie'] = '0'
                                tp['LieuDit'] = NormaliseTaille(ligne5, int(Taille))
                                tp['Adresse'] = NormaliseTaille(ligne4, int(Taille))
                                tp['Complement'] = NormaliseTaille(ligne3, int(Taille))
                                tp['ListeComplements'] = ''
                                tp['Instance'] = Instance
                                tp['Province'] = ''
                                tp['NbNumero'] = ''
                                tp['ListeNumero'] = ''
                                tp['Pays'] = Pays
                                tp['DQECodeErreur'] = '1'
                                tp['DQELibErreur'] = 'Analyse non effectu\xe9e'
                                tp['Numero'], tp['CompNum'], tp['NumSeul'] = formatagenumero(tp['Numero'])
                                if _PosAdrNumero != 'L':
                                    tp['Adresse'] = ' '.join((tp['TypeVoie'] + ' ' + tp['Voie'] + ' ' + tp['Numero']).split())
                                else:
                                    tp['Adresse'] = ' '.join((tp['Numero'] + ' ' + tp['TypeVoie'] + ' ' + tp['Voie']).split())
                                tp['Ligne2'] = tp['ligne2']
                                tp['DQECompte'] = ''
                                tp['Cedex'] = ''
                                tp['DQEPourcentErreur'] = ''
                                if tp['IDLocalite'] != '':
                                    if tp['IDVoie'] != '':
                                        if tp['NbNumero'] != '' and int(tp['NbNumero']) > 1:
                                            tp['DQECodeErreur'] = '4'
                                            tp['DQELibErreur'] = 'KO numero inexistant dans la voie'
                                            tp['DQECodeDetail'] = '23'
                                        else:
                                            tp['DQECodeErreur'] = '0'
                                            tp['DQELibErreur'] = 'OK'
                                            tp['DQECodeDetail'] = '10'
                                    else:
                                        tp['DQECodeErreur'] = '3'
                                        tp['DQELibErreur'] = 'KO verification manuelle'
                                        tp['DQECodeDetail'] = '50'
                                        tp['DQEPourcentErreur'] = '60'
                                else:
                                    tp['DQECodeErreur'] = '1'
                                    tp['DQECodeDetail'] = '80'
                                    tp['DQELibErreur'] = 'KO Aucune correspondance'

                except:
                    va = []

                tpnb = 0
                for li in va:
                    if li != None and li != [] and type(li[0]) is list:
                        tpnb += 1
                        if va[0][0][0] != '' and va[0][0][1] == '' and va[0][1] == ['', '', '']:
                            r = cp_234U[va[0][0][0]]
                            va[0][0][1] = r[0]
                            va[0][1] = [decode(r[1]), r[2], r[3]]
                        ld_affecte = False
                        if li[5] == 0:
                            tp = {}
                            tp['Pays'] = Pays
                            tp['CodePostal'] = ana['rnvp_Cp']
                            tp['Localite'] = ana['rnvp_Ville']
                            tp['IDLocalite'] = ''
                            r_cp = []
                            if tp['CodePostal'] in cp_234:
                                cps = cp_234[tp['CodePostal']]
                                valeur_cdx = ''
                                for i in cps:
                                    vi = decode(i[0])
                                    if distanceVille(vi, tp['Localite'])[0] >= 0.9:
                                        if ana['rnvp_Cedex'] == '':
                                            r_cp.append(i)
                                            break
                                        elif r_cp == []:
                                            r_cp.append(i)
                                            if not ' ' in ana['rnvp_Cedex'].strip():
                                                break
                                            else:
                                                valeur_cdx = ana['rnvp_Cedex'].strip().split()[-1]
                                                if vi.split()[-1] == valeur_cdx:
                                                    break
                                        else:
                                            _v = vi.split('CEDEX')[1]
                                            if _v != '' and valeur_cdx == _v.split()[0]:
                                                r_cp.insert(0, i)
                                                break

                            if r_cp != []:
                                vi = decode(r_cp[0][0])
                                tp['IDLocalite'] = r_cp[0][1]
                                if '(LD.' in vi:
                                    ld = vi[vi.index('(LD.') + 5:-1].strip()
                                    vi = vi[0:vi.index('(LD.')].strip()
                                    if 'NOTHINGTODO' in li[2]:
                                        if not ld in li[2]:
                                            ld = ''
                                    if ld:
                                        if not ld in ana['rnvp_Adr5']:
                                            ana['rnvp_Adr5'] = (ana['rnvp_Adr5'] + ' ' + ld).strip()
                                        if ld in ana['rnvp_Adr2']:
                                            ana['rnvp_Adr2'] = ' '.join(ana['rnvp_Adr2'].replace(ld, '').split())
                                        elif ld in ana['rnvp_Adr3']:
                                            ana['rnvp_Adr3'] = ' '.join(ana['rnvp_Adr3'].replace(ld, '').split())
                                tp['Localite'] = vi.strip()
                            tp['Cedex'] = '0'
                            if 'CEDEX' in tp['Localite']:
                                tp['Cedex'] = '1'
                            tp['Province'] = ''
                            tp['Voie'] = ana['rnvp_Adresse']
                            tp['IDVoie'] = ''
                            tp['LieuDit'] = ana['rnvp_Adr5']
                            tp['Instance'] = Instance
                            tp['Complement'] = ana['rnvp_Adr3']
                            tp['Ligne2'] = ana['rnvp_Adr2']
                            _rm1 = restructure.formatage(ana['rnvp_Adresse'])
                            _rm2 = restructure.decoupageNV(_rm1)
                            tp['Numero'] = _rm2['num']
                            tp['TypeVoie'] = _rm2['typevoie']
                        else:
                            tp = {}
                            tp['Pays'] = Pays
                            tp['CodePostal'] = li[0][1]
                            if '(LD.' in li[1][0]:
                                _po0 = li[1][0].index('(LD.')
                                _vi0 = li[1][0][0:_po0 - 1]
                                _ld0 = li[1][0][_po0:]
                                if len(_vi0) > int(Taille):
                                    li[1][0] = NormaliseTaille(_vi0, int(Taille))
                                    li[1][0] += ' ' + _ld0
                            elif len(li[1][0]) > int(Taille):
                                li[1][0] = NormaliseTaille(li[1][0], int(Taille))
                            tp['Localite'] = li[1][0]
                            tp['Cedex'] = '0'
                            if 'CEDEX' in tp['Localite']:
                                tp['Cedex'] = '1'
                            if Pays == 'FRA' and li[0][1] == '*' and len(li[1]) > 2 and li[1][2] != '*' and li[1][2] != '':
                                tp['CodePostal'] = li[1][2]
                            tp['Province'] = li[1][1]
                            adr = ((li[3] + ' ' + li[4]).strip() + ' ' + li[2]).strip()
                            if len(adr) > TailleMax:
                                n1 = NormaliseTaille(adr, TailleMax).split()
                                if li[3] != '':
                                    n1 = n1[len(li[3].split()):]
                                if li[4] != '':
                                    li[4] = n1[0]
                                    n1.pop(0)
                                li[2] = ' '.join(n1)
                            if not restructure.IsVoie(li[4]):
                                if li[4] == '':
                                    _tv = li[2].split()
                                    if _tv != [] and restructure.IsVoie(_tv[0]):
                                        li[4] = _tv[0]
                                        li[2] = ' '.join(_tv[1:])
                                else:
                                    li[2] = (li[4] + ' ' + li[2]).strip()
                                    li[4] = ''
                            tp['Voie'] = li[2]
                            tp['Numero'] = ajoutespace(li[3])
                            tp['TypeVoie'] = li[4]
                            tp['IDLocalite'] = li[0][0]
                            tp['IDVoie'] = str(li[5])
                            if _flag_roudis:
                                tp['Roudis'] = recuproudis(tp['IDVoie'], li[3])
                            tp['IDHexaposte'] = ''
                            tp['IDCle'] = ''
                            tp['IDCleVoie'] = ''
                            try:
                                tp['LieuDit'] = ana['rnvp_Adr5']
                            except:
                                tp['LieuDit'] = ''

                            tp['Instance'] = Instance
                            if tp['Localite'].find('(LD.') > 0:
                                LieuDitPresent = True
                                np1 = tp['Localite'].split('(')
                                tp['LieuDit'] = np1[1][4:-1]
                                if len(np1) > 2:
                                    tp['Localite'] = np1[0][:] + ' (' + np1[2]
                                else:
                                    tp['Localite'] = np1[0][:].strip()
                                if (tp['TypeVoie'] == 'LIEU DIT' or tp['TypeVoie'] == 'LD') and tp['LieuDit'] == '':
                                    tp['LieuDit'] = tp['TypeVoie'] + ' ' + tp['Voie']
                            tp['ListeComplements'] = ''
                            if not 'Complement' in tp:
                                tp['Complement'] = ''
                            if li[6] != '':
                                if tp['Complement'] != '':
                                    tp['Complement'] = tp['Complement'] + ' ' + li[6]
                                else:
                                    tp['Complement'] = li[6]
                            elif type(ana) is dict:
                                if tp['LieuDit'] != '' and tp['LieuDit'] == ana['rnvp_Adr3'].strip():
                                    tp['Complement'] = ''
                                else:
                                    tp['Complement'] = ana['rnvp_Adr3'].strip()
                            elif tp['LieuDit'] != '' and tp['LieuDit'] == ana[1][1]['rnvp_Adr3'].strip():
                                tp['Complement'] = ''
                            else:
                                tp['Complement'] = ana[1][1]['rnvp_Adr3'].strip()
                            if not LieuDitPresent and tp['Complement'] == '':
                                tp['Complement'] = tp['LieuDit']
                                tp['LieuDit'] = ''
                            if not LieuDitPresent and tp['Complement'] == tp['LieuDit']:
                                tp['LieuDit'] = ''
                            if tp['LieuDit'] != '' or tp['Complement'] != '':
                                _ld1 = []
                                if mapville4.has_key(tp['CodePostal']):
                                    _ld1 = rechlieudit(tp['CodePostal'], tp['Localite'])
                                if _ld1 != []:
                                    res_ld = recuplieudit(tp['LieuDit'], tp['Complement'], _ld1)
                                    if res_ld != []:
                                        tp['LieuDit'] = res_ld[0]
                                        tp['Complement'] = res_ld[1]
                                        tp['IDLocalite'] = res_ld[3]
                                        tp['Localite'] = res_ld[2].strip()
                                        tp['Cedex'] = '0'
                                        if 'CEDEX' in tp['Localite']:
                                            tp['Cedex'] = '1'
                            _ve_1 = 7
                            _ve_2 = 8
                            if len(li) > 7:
                                if len(li) > 9:
                                    _ve_1 = 8
                                    _ve_2 = 9
                            if li[_ve_1] == 1:
                                vc = RechComplement(str(li[5]), str(li[_ve_2]))
                                tpc = 0
                                if vc != []:
                                    if tp['Complement'] == '':
                                        tpc = 0
                                        if vc != []:
                                            for x in vc:
                                                tpc += 1
                                                if len(x) > int(Taille):
                                                    x = NormaliseTaille(x, int(Taille))
                                                if tp['ListeComplements'] != '':
                                                    tp['ListeComplements'] = tp['ListeComplements'] + ';' + x
                                                else:
                                                    tp['ListeComplements'] = x
                                                if tpc == 20:
                                                    break

                                    else:
                                        for x in vc:
                                            tpc += 1
                                            if len(x) > int(Taille):
                                                x = NormaliseTaille(x, int(Taille))
                                            if type(ana) is dict and ana['rnvp_Adr3'].strip() == x.strip() or type(ana) is list and ana[1][1]['rnvp_Adr3'].strip() == x.strip():
                                                tp['Complement'] = x
                                                tp['ListeComplements'] = ''
                                                break
                                            if type(ana) is dict and verifcomplement(ana['rnvp_Adr3'].strip().upper(), x.strip().upper()) or type(ana) is list and verifcomplement(ana[1][1]['rnvp_Adr3'].strip().upper(), x.strip().upper()):
                                                if not x in tp['Complement']:
                                                    tp['Complement'] = x
                                                tp['ListeComplements'] = ''
                                                break
                                            if tp['ListeComplements'] != '':
                                                tp['ListeComplements'] = tp['ListeComplements'] + ';' + x
                                            else:
                                                tp['ListeComplements'] = x
                                            if tpc == 20:
                                                break

                            if len(li) > 7:
                                if len(li) > 9:
                                    tp['NbNumero'] = str(li[8])
                                    tp['ListeNumero'] = li[9]
                                else:
                                    tp['NbNumero'] = str(li[7])
                                    tp['ListeNumero'] = li[8]
                            else:
                                tp['NbNumero'] = ''
                                tp['ListeNumero'] = ''
                            tp['Numero'], tp['CompNum'], tp['NumSeul'] = formatagenumero(tp['Numero'])
                            if _PosAdrNumero != 'L':
                                tp['Adresse'] = ' '.join((tp['TypeVoie'] + ' ' + tp['Voie'] + ' ' + tp['Numero']).split())
                            else:
                                tp['Adresse'] = ' '.join((tp['Numero'] + ' ' + tp['TypeVoie'] + ' ' + tp['Voie']).split())
                            if type(ana) is dict:
                                tp['Ligne2'] = ana['rnvp_Adr2']
                            else:
                                tp['Ligne2'] = ana[1][1]['rnvp_Adr2']
                            if tp['Ligne2'] == '':
                                try:
                                    if ligne2 != '':
                                        tp['Ligne2'] = ligne2
                                except:
                                    pass

                        tp['DQECompte'] = ''
                        tp['Cedex'] = ''
                        tp['Numero'] = formatnumfra(tp['Numero'])
                        if tp['LieuDit'] == '' and (tp['Complement'] != '' or tp['Ligne2'] != '') and tp['IDLocalite'] in mapville6:
                            for _l in mapville6[tp['IDLocalite']]:
                                if tp['Complement'] != '':
                                    if tp['Complement'] == _l:
                                        tp['LieuDit'] = _l
                                        tp['Complement'] = ''
                                        break
                                if tp['Ligne2'] != '':
                                    if tp['Ligne2'] == _l:
                                        tp['LieuDit'] = _l
                                        tp['Ligne2'] = ''
                                        break

                        tp['DQEPourcentErreur'] = ''
                        if _validate:
                            tp['DQECodeDetail'], tp['DQELibErreur'], tp['DQECodeErreur'] = VerifCedexVille(tp['CodePostal'], tp['Localite'])
                            tp['Cedex'] = tp['Cedex'] + 'validate'
                            if tp['IDLocalite'] != '':
                                if tp['IDVoie'] != '':
                                    if tp['NbNumero'] != '' and int(tp['NbNumero']) <= 1:
                                        tp['DQECodeErreur'] = '0'
                                        tp['DQELibErreur'] = 'OK'
                                        tp['DQECodeDetail'] = '10'
                                        tp['Cedex'] = tp['Cedex'].replace('validate', '')
                        elif tp['IDLocalite'] != '':
                            if tp['IDVoie'] != '':
                                if tp['NbNumero'] != '' and int(tp['NbNumero']) > 1:
                                    tp['DQECodeErreur'] = '4'
                                    tp['DQELibErreur'] = 'KO numero inexistant dans la voie'
                                    tailleville = 2500
                                    if 'IDLocalite' in tp and tp['IDLocalite'] in mapville5:
                                        tailleville = mapville5[tp['IDLocalite']]
                                    if tp['Numero'] == '':
                                        if tailleville < 2500:
                                            tp['DQECodeDetail'] = '22'
                                        else:
                                            tp['DQECodeDetail'] = '24'
                                    elif tailleville < 2500:
                                        tp['DQECodeDetail'] = '21'
                                    else:
                                        tp['DQECodeDetail'] = '23'
                                else:
                                    tp['DQECodeErreur'] = '0'
                                    tp['DQELibErreur'] = 'OK'
                                    tp['DQECodeDetail'] = '10'
                            else:
                                tp['DQECodeErreur'] = '3'
                                tp['DQELibErreur'] = 'KO verification manuelle'
                                if tp['Voie'] == '':
                                    tp['DQECodeDetail'] = '61'
                                else:
                                    tp['DQECodeDetail'] = '50'
                                tp['DQEPourcentErreur'] = '60'
                        else:
                            tp['DQECodeErreur'] = '1'
                            if tp['Voie'] == '':
                                tp['DQECodeDetail'] = '80'
                            else:
                                tp['DQECodeDetail'] = '70'
                            tp['DQELibErreur'] = 'KO Aucune correspondance'
                        tp['Numero'], tp['CompNum'], tp['NumSeul'] = formatagenumero(tp['Numero'])
                        if Pays == 'FRA':
                            try:
                                tp['IDHexaposte'] = adresse[tp['IDVoie']][2]
                            except:
                                tp['IDHexaposte'] = ''

                            try:
                                if tp['NbNumero'] == '' or int(tp['NbNumero']) <= 1:
                                    if tp['NumSeul'] != '':
                                        tp['IDCle'] = _mapnumvoiecle[tp['IDVoie'] + '_' + tp['NumSeul'] + tp['CompNum']]
                                        tp['IDCleVoie'] = _mapnumvoiecle[tp['IDVoie'] + '_']
                                    else:
                                        tp['IDCle'] = _mapnumvoiecle[tp['IDVoie'] + '_' + tp['Numero']]
                                        tp['IDCleVoie'] = _mapnumvoiecle[tp['IDVoie'] + '_']
                            except:
                                tp['NbNumero'] = ''
                                if not 'NumSeul' in tp:
                                    tp['NumSeul'] = ''
                                if not 'IDVoie' in tp:
                                    tp['IDVoie'] = ''
                                if tp['IDVoie'] != '':
                                    tp['IDCleVoie'] = _mapnumvoiecle[tp['IDVoie'] + '_']
                                    if 'Numero' in tp and tp['Numero'] != '':
                                        try:
                                            tp['IDCle'] = _mapnumvoiecle[tp['IDVoie'] + '_' + tp['Numero']]
                                        except:
                                            tp['IDCle'] = ''

                                    else:
                                        tp['IDCle'] = ''
                                else:
                                    tp['IDCleVoie'] = ''
                                    tp['IDCle'] = ''

                            if _flag_roudis:
                                for _r in ['Roudis', 'ListeNumero']:
                                    if not _r in tp:
                                        tp[_r] = ''

                        else:
                            for _r in ['DQECompte',
                             'IDHexaposte',
                             'CompNum',
                             'NumSeul',
                             'Ligne2',
                             'DQEPourcentErreur']:
                                if not _r in tp:
                                    tp[_r] = ''

                        retour[str(tpnb)] = tp
                        if tpnb == 20:
                            break

                if va == [] and _validate and retour == {}:
                    tp = razAdresse(ana)
                    retour['1'] = tp
            else:
                tp = {}
                for _r in ['DQECompte',
                 'IDHexaposte',
                 'CompNum',
                 'NumSeul',
                 'Ligne2',
                 'DQEPourcentErreur',
                 'Voie',
                 'TypeVoie',
                 'Numero',
                 'CodePostal',
                 'IDLocalite',
                 'Localite',
                 'LieuDit',
                 'Adresse',
                 'Complement',
                 'ListeComplements',
                 'Province',
                 'NbNumero',
                 'ListeNumero']:
                    tp[_r] = ''

                tp['Pays'] = Pays
                tp['Instance'] = Instance
                if 'XY_' in Licence:
                    tp['Longitude'] = ''
                    tp['Latitude'] = ''
                if _flag_roudis:
                    tp['Roudis'] = ''
                tp['Cedex'] = '0'
                tp['IDVoie'] = '0'
                if ExisteCompteInter(Licence, Pays):
                    if _flag_melissa:
                        try:
                            vok = True
                            lic_melissa = _dicomelissa[Licence]['id']
                        except:
                            lic_melissa = ''
                            vok = False

                        if lic_melissa == '':
                            vok = False
                        if vok:
                            if len(Pays) == 3:
                                pays_iso2 = _dicopaysiso[Pays]
                            else:
                                pays_iso2 = Pays
                            mess = ''
                            tb = Adresse.split('|')
                            if len(tb) == 1:
                                tp['DQECodeErreur'] = '1'
                                tp['DQELibErreur'] = 'KO Voie non reconnue'
                                tp['DQECodeDetail'] = '80'
                                retour['1'] = tp
                                vok = False
                            else:
                                vadresse1 = ''
                                vadresse2 = ''
                                vadresse3 = ''
                                vadresse1 = tb[0].strip()
                                vadresse2 = tb[1].strip()
                                vadresse3 = tb[2].strip()
                                vcp = tb[3]
                                vville = tb[4]
                                tp['CodePostal'] = vcp
                                tp['Localite'] = vville
                                tp['Cedex'] = '0'
                                if 'CEDEX' in tp['Localite']:
                                    tp['Cedex'] = '1'
                                tp['LieuDit'] = netAdresse(vadresse3)
                                tp['Adresse'] = netAdresse(vadresse2)
                                tp['Complement'] = netAdresse(vadresse1)
                                urlServer = ''
                                try:
                                    if vadresse1 == '':
                                        if vadresse2 == '':
                                            _f = {'id': lic_melissa,
                                             'a1': '',
                                             'a2': '',
                                             'a3': '',
                                             'admarea': vadresse3,
                                             'postal': vcp,
                                             'loc': vville,
                                             'ctry': pays_iso2,
                                             'recordopt': 10,
                                             'format': 'json',
                                             'opt': 'OUTPUTSCRIPT:NOCHANGE'}
                                        else:
                                            _f = {'id': lic_melissa,
                                             'a1': vadresse2,
                                             'admarea': vadresse3,
                                             'a3': '',
                                             'a2': '',
                                             'postal': vcp,
                                             'loc': vville,
                                             'ctry': pays_iso2,
                                             'recordopt': 10,
                                             'format': 'json',
                                             'opt': 'OUTPUTSCRIPT:NOCHANGE'}
                                    else:
                                        _f = {'id': lic_melissa,
                                         'a1': vadresse2,
                                         'a2': vadresse1,
                                         'admarea': vadresse3,
                                         'postal': vcp,
                                         'loc': vville,
                                         'ctry': pays_iso2,
                                         'recordopt': 10,
                                         'format': 'json',
                                         'opt': 'OUTPUTSCRIPT:NOCHANGE'}
                                    urlServer = 'http://address.melissadata.net/v3/WEB/GlobalAddress/doGlobalAddress?' + urllib.urlencode(_f)
                                except Exception as ex:
                                    print str(ex)
                                    urlServer = ''

                                if urlServer != '':
                                    vok = True
                                    _dm = ''
                                    try:
                                        if vadresse1 + vadresse2 + vadresse3 + vcp + vville != '':
                                            _dm = decoupage_international(vadresse1, vadresse2, vadresse3, vcp, vville)
                                            if ForceInternational == 'N' and _map_inter.has_key(Licence + '_' + _dm):
                                                retour2 = str(MiseEnFormeMelissa(Licence + '_' + _dm, vadresse1, vadresse2, vadresse3, vcp, vville))
                                                if retour2 == '':
                                                    try:
                                                        _opu = urllib2.urlopen(urlServer)
                                                        retour2 = _opu.read()
                                                    except:
                                                        vok = False

                                                    try:
                                                        _opu.close()
                                                    except:
                                                        pass

                                            else:
                                                try:
                                                    _opu = urllib2.urlopen(urlServer)
                                                    retour2 = _opu.read()
                                                except:
                                                    vok = False

                                                try:
                                                    _opu.close()
                                                except:
                                                    pass

                                        else:
                                            vok = False
                                    except:
                                        vok = False

                                    dico = {}
                                    if vok:
                                        try:
                                            retour2 = retour2.replace('null', '""')
                                            dico = UserDict.UserDict(eval(retour2))
                                        except:
                                            vok = False

                                    if vok:
                                        if int(dico['TotalRecords']) == 1:
                                            listecode = dico['Records'][0]['Results'].split(',')
                                            tp = {}
                                            _ct = controlecode(listecode)
                                            if _ct[0] or _ct[4] in ['21',
                                             '22',
                                             '23',
                                             '24']:
                                                tp['DQECodeErreur'] = '0'
                                                tp['DQELibErreur'] = 'OK'
                                                tp['DQECodeDetail'] = '10'
                                            else:
                                                tp['DQECodeErreur'] = '1'
                                                tp['DQELibErreur'] = 'KO ' + _ct[3]
                                                tp['DQECodeDetail'] = _ct[4]
                                            if 'XY_' in Licence:
                                                if 'Latitude' in dico['Records'][0]:
                                                    tp['Latitude'] = dico['Records'][0]['Latitude']
                                                    tp['Longitude'] = dico['Records'][0]['Longitude']
                                            vcp = str(dico['Records'][0]['PostalCode'])
                                            vville = capital(netAdresse(dico['Records'][0]['Locality'], 2))
                                            vprovince = str(dico['Records'][0]['AdministrativeArea'])
                                            if vadresse1 == '':
                                                vaddr1 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine1']), str(dico['Records'][0]['PostalCode'])), 2))
                                                vaddr2 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine2']), str(dico['Records'][0]['PostalCode'])), 2))
                                                vaddr3 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine3']), str(dico['Records'][0]['PostalCode'])), 2))
                                            else:
                                                vaddr2 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine1']), str(dico['Records'][0]['PostalCode'])), 2))
                                                vaddr1 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine2']), str(dico['Records'][0]['PostalCode'])), 2))
                                                vaddr3 = capital(netAdresse(addr_line(str(dico['Records'][0]['AddressLine3']), str(dico['Records'][0]['PostalCode'])), 2))
                                            vbox = dico['Records'][0]['PostBox']
                                            vnum = dico['Records'][0]['PremisesNumber']
                                            vpays = dico['Records'][0]['CountryISO3166_1_Alpha3']
                                            vvoie = (dico['Records'][0]['ThoroughfarePreDirection'] + ' ' + capital(netAdresse(dico['Records'][0]['ThoroughfareName'], 2))).strip()
                                            vtypevoie = capital(netAdresse(dico['Records'][0]['ThoroughfareLeadingType'], 2))
                                            if type(vvoie) is unicode:
                                                if type(vnum) is str:
                                                    try:
                                                        vnum = vnum.decode('utf-8')
                                                    except:
                                                        try:
                                                            vnum = vnum.decode('iso-8859-1')
                                                        except:
                                                            pass

                                                if type(vtypevoie) is str:
                                                    try:
                                                        vtypevoie = vtypevoie.decode('utf-8')
                                                    except:
                                                        try:
                                                            vtypevoie = vtypevoie.decode('iso-8859-1')
                                                        except:
                                                            pass

                                                if type(vpays) is str:
                                                    try:
                                                        vpays = vpays.decode('utf-8')
                                                    except:
                                                        try:
                                                            vpays = vpays.decode('iso-8859-1')
                                                        except:
                                                            pass

                                            if vtypevoie == '':
                                                vtypevoie = capital(netAdresse(dico['Records'][0]['ThoroughfareTrailingType'], 2))
                                            if vtypevoie != '':
                                                if vaddr2 != '':
                                                    if vtypevoie in [vaddr2]:
                                                        vmemtp = vaddr1
                                                        vaddr1 = vaddr2
                                                        vaddr2 = vmemtp
                                                    elif vaddr3 != '':
                                                        if vtypevoie in [vaddr3]:
                                                            vmemtp = vaddr1
                                                            vaddr1 = vaddr3
                                                            vaddr3 = vaddr2
                                                            vaddr2 = vmemtp
                                            if not restructure.IsVoie(vtypevoie):
                                                vvoie = (vtypevoie + ' ' + vvoie).strip()
                                                vtypevoie = ''
                                            tp['Voie'] = vvoie
                                            tp['TypeVoie'] = vtypevoie
                                            tp['Numero'] = ajoutespace(vnum)
                                            tp['CodePostal'] = vcp
                                            tp['IDLocalite'] = vcp
                                            tp['Localite'] = vville
                                            tp['Cedex'] = '0'
                                            if 'CEDEX' in tp['Localite']:
                                                tp['Cedex'] = '1'
                                            tp['IDVoie'] = '0'
                                            tp['LieuDit'] = vbox
                                            if vaddr3 != '':
                                                tp['Adresse'] = vaddr1
                                                tp['Complement'] = vaddr2 + ' ' + vaddr3
                                            elif vaddr2 != '':
                                                tp['Adresse'] = vaddr1
                                                if not ((vnum + ' ' + vtypevoie + ' ' + vvoie).strip().upper() == vaddr2.upper() or (vnum + ' ' + vvoie + ' ' + vtypevoie).strip().upper() == vaddr2.upper()):
                                                    tp['Complement'] = vaddr2
                                                else:
                                                    tp['Complement'] = ''
                                            else:
                                                tp['Adresse'] = vaddr1
                                                tp['Complement'] = ''
                                            tp['Instance'] = Instance
                                            tp['NbNumero'] = '1'
                                            tp['ListeNumero'] = vnum
                                            tp['Pays'] = vpays
                                            tp['Province'] = vprovince
                                            retour['1'] = tp
                                        else:
                                            tp['DQECodeErreur'] = '1'
                                            tp['DQELibErreur'] = 'KO Voie non reconnue'
                                            tp['DQECodeDetail'] = '80'
                                            retour['1'] = tp
                                    else:
                                        tp['DQECodeErreur'] = '1'
                                        tp['DQELibErreur'] = 'Aucune reponse serveur'
                                        tp['DQECodeDetail'] = '99'
                                        retour['1'] = tp
                                else:
                                    tp['DQECodeErreur'] = '1'
                                    tp['DQELibErreur'] = 'Aucune reponse serveur'
                                    tp['DQECodeDetail'] = '99'
                                    retour['1'] = tp
                        else:
                            tp['DQECodeErreur'] = '1'
                            tp['DQELibErreur'] = 'Pays non pris en charge'
                            tp['DQECodeDetail'] = '90'
                            retour['1'] = tp
                    else:
                        tp['DQECodeErreur'] = '1'
                        tp['DQELibErreur'] = 'Pays non pris en charge'
                        tp['DQECodeDetail'] = '90'
                        retour['1'] = tp
                else:
                    tp['DQECodeErreur'] = '1'
                    tp['DQELibErreur'] = 'Licence non pris en charge'
                    tp['DQECodeDetail'] = '99'
                    retour['1'] = tp
                if _flag_log:
                    log('%s|%s|%s|fin|RNVP' % (datetime.datetime.now(), _port_num, _compteur))
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
        except:
            pass

        if _ipelfy != '' and mem_retour != [] and Proposition.upper() in ['O',
         'OUI',
         'Y',
         'YES']:
            if not flag_merge:
                retour1 = {}
                retour1['1'] = mem_retour[0]
            else:
                cpt = 2
                retour1 = {}
                retour1['1'] = mem_retour[0]
                for i in range(1, len(retour) + 1):
                    if not retour[str(i)]['DQECodeDetail'] in ['30',
                     '31',
                     '40',
                     '41',
                     '50',
                     '60',
                     '61',
                     '70',
                     '80']:
                        retour1[str(cpt)] = retour[str(i)]
                        if retour1[str(cpt)]['Complement'] == '':
                            retour1[str(cpt)]['Complement'] = mem_retour[0]['Complement']
                    cpt += 1

            retour = retour1
        if Pays == 'FRA' and Descrimination:
            if len(retour) == 1 and ('validate' in retour['1']['Cedex'] or ' CEDEX ' in retour['1']['Localite'] + ' '):
                retour['1']['Cedex'] = retour['1']['Cedex'].replace('validate', '')
            elif len(retour) > 1 and (type(ana) is list and ana[1][1]['rnvp_Cedex'] != '' or not type(ana) is list and ana['rnvp_Cedex'] != ''):
                retour = {'1': razAdresse(ana)}
                retour['1']['Cedex'] = retour['1']['Cedex'].replace('validate', '')
            elif len(retour) >= 1:
                _vi = ''
                _cp = ''
                _nv = ''
                _ld = ''
                _adr3 = ''
                if type(ana) is dict:
                    _vi = ana['rnvp_Ville']
                    _cp = ana['rnvp_Cp']
                    if _cp == '00000':
                        ana['rnvp_Cp'] = ''
                        _cp = ''
                    _nv = ana['rnvp_Adresse']
                    _ld = ana['rnvp_Adr5']
                    _adr3 = ana['rnvp_Adr3']
                elif type(ana) is list:
                    _vi = ana[1][1]['rnvp_Ville']
                    _cp = ana[1][1]['rnvp_Cp']
                    if _cp == '00000':
                        ana[1][1]['rnvp_Cp'] = ''
                        _cp = ''
                    _nv = ana[1][1]['rnvp_Adresse']
                    _ld = ana[1][1]['rnvp_Adr5']
                    _adr3 = ana[1][1]['rnvp_Adr3']
                fl_err = 0
                if _vi != '':
                    retour2 = {}
                    retour3 = {}
                    retour33 = {}
                    retour34 = {}
                    retour4 = {}
                    retour5 = {}
                    retour6 = []
                    mem = 0
                    cpt_resu = []
                    _d_adresse = len(_nv)
                    if _d_adresse == 0:
                        _d_adresse = 1
                    retourld = []
                    for _ret in retour:
                        _cp0 = _cp
                        if _cp0 == '' or _cp0 == '00000':
                            _cp0 = retour[_ret]['CodePostal']
                        if retour[_ret]['IDVoie'] != '':
                            if TraiteFilter('0', retour[_ret]['IDVoie']):
                                if retour[_ret]['LieuDit'] != '':
                                    _dt = max(distanceVille(retour[_ret]['Localite'], _vi), distanceVille(retour[_ret]['LieuDit'], _vi))
                                    retourld.append(retour[_ret])
                                else:
                                    _dt = distanceVille(retour[_ret]['Localite'], _vi)
                                _d_reponse = len(retour[_ret]['Adresse'])
                                if _dt[0] >= 0.85 and _dt[0] >= mem:
                                    if _cp0 == '' or _cp0 == '00000' or _cp0[0:2] == retour[_ret]['CodePostal'][0:2] or _dt[0] == 1.0:
                                        if not retour[_ret]['IDVoie'] in cpt_resu:
                                            cpt_resu.append(retour[_ret]['IDVoie'])
                                            retour2 = {'1': retour[_ret]}
                                            if retour[_ret]['Adresse'] == _nv:
                                                retour3 = {'1': retour[_ret]}
                                                if _ld != '' and retour[_ret]['LieuDit'] != '':
                                                    if _ld == retour[_ret]['LieuDit'] or _ld in retour[_ret]['LieuDit'] or retour[_ret]['LieuDit'] in _ld:
                                                        retour33 = {'1': retour[_ret]}
                                                elif _ld == '' and retour[_ret]['LieuDit'] != '':
                                                    if retour[_ret]['Complement'] == '' and _adr3 != '' and retour[_ret]['LieuDit'].replace('SAINT ', 'ST ').replace('SAINTE ', 'STE ') in _adr3.replace('SAINT ', 'ST ').replace('SAINTE ', 'STE '):
                                                        retour34 = {'1': retour[_ret]}
                                                    elif retour[_ret]['Complement'] != '':
                                                        if retour[_ret]['LieuDit'].replace('SAINT ', 'ST ').replace('SAINTE ', 'STE ') in retour[_ret]['Complement'].replace('SAINT ', 'ST ').replace('SAINTE ', 'STE '):
                                                            retour[_ret]['LieuDit'] = retour[_ret]['LieuDit'].replace('SAINT ', 'ST ').replace('SAINTE ', 'STE ')
                                                            retour[_ret]['Complement'] = retour[_ret]['Complement'].replace('SAINT ', 'ST ').replace('SAINTE ', 'STE ')
                                                            l0 = len(retour[_ret]['LieuDit'])
                                                            if retour[_ret]['LieuDit'] == retour[_ret]['Complement'][0:l0]:
                                                                retour[_ret]['Complement'] = retour[_ret]['Complement'][l0:].strip()
                                                                if 'ligne3' in retour[_ret]:
                                                                    retour[_ret]['ligne3'] = retour[_ret]['Complement']
                                                                retour33 = {'1': retour[_ret]}
                                                            elif retour[_ret]['LieuDit'] == retour[_ret]['Complement'][-l0:]:
                                                                retour[_ret]['Complement'] = retour[_ret]['Complement'][0:len(retour[_ret]['Complement']) - l0].strip()
                                                                if 'ligne3' in retour[_ret]:
                                                                    retour[_ret]['ligne3'] = retour[_ret]['Complement']
                                                                retour33 = {'1': retour[_ret]}
                                            elif retour5 == {}:
                                                _d_min = min(_d_adresse, _d_reponse)
                                                if retour[_ret]['Adresse'][0:_d_min] == _nv[0:_d_min]:
                                                    if retour5 == {}:
                                                        retour5 = {'1': retour[_ret]}
                                                    else:
                                                        retour5 = {'2': retour[_ret]}
                                                else:
                                                    dt = 1 - distance(_nv, retour[_ret]['Adresse']) * 1.0 / min(_d_adresse, _d_reponse)
                                                    if dt >= 0.8:
                                                        if retour6 == []:
                                                            retour6 = [[dt, nbmots(retour[_ret]['Adresse'], _nv), {'1': retour[_ret]}]]
                                                        else:
                                                            retour6.append([dt, nbmots(retour[_ret]['Adresse'], _nv), {'1': retour[_ret]}])
                                            else:
                                                dt = 1 - distance(_nv, retour[_ret]['Adresse']) * 1.0 / min(_d_adresse, _d_reponse)
                                                if dt >= 0.8:
                                                    if retour6 == []:
                                                        retour6 = [[dt, nbmots(retour[_ret]['Adresse'], _nv), {'1': retour[_ret]}]]
                                                    else:
                                                        retour6.append([dt, nbmots(retour[_ret]['Adresse'], _nv), {'1': retour[_ret]}])
                                            mem = _dt[0]
                                elif _dt[1] == 100:
                                    if _cp0 == '' or _cp0 == '00000' or _cp0[0:2] == retour[_ret]['CodePostal'][0:2]:
                                        retour4[str(len(retour4) + 1)] = retour[_ret]

                    if retour34 != {}:
                        retour33 = retour34
                    if retour33 == {} and retour3 == {} and retour2 == {} and retour4 == {} and retourld != []:
                        mem = 0
                        cpt_resu = []
                        _d_adresse = len(_nv)
                        fl_err = 0
                        for _retour in retourld:
                            _cp0 = _cp
                            if _cp0 == '' or _cp0 == '00000':
                                _cp0 = _retour['CodePostal']
                            if _retour['CodePostal'] != '' and _retour['CodePostal'] in cp_234:
                                _vcps = cp_234[_retour['CodePostal']]
                                _dt = [0, 0]
                                for _vcp in _vcps:
                                    if _vcp[1] == _retour['IDLocalite']:
                                        ville_cp = decode(_vcp[0])
                                        if '(LD.' in ville_cp:
                                            _dt1 = distanceVille(ville_cp, _vi)
                                            if _dt1[0] > _dt[0]:
                                                _dt = _dt1[:]

                                if _dt[0] >= 0.85 and _dt[0] >= mem:
                                    _d_reponse = len(_retour['Adresse'])
                                    if _cp0 == '' or _cp0 == '00000' or _cp0[0:2] == _retour['CodePostal'][0:2]:
                                        if not _retour['IDVoie'] in cpt_resu:
                                            cpt_resu.append(_retour['IDVoie'])
                                            retour2 = {'1': _retour}
                                            if _retour['Adresse'] == _nv:
                                                retour3 = {'1': _retour}
                                                if _ld != '' and _retour['LieuDit'] != '':
                                                    if _ld == _retour['LieuDit'] or _ld in _retour['LieuDit'] or _retour['LieuDit'] in _ld:
                                                        retour33 = {'1': _retour}
                                            elif retour5 == {}:
                                                _d_min = min(_d_adresse, _d_reponse)
                                                if _retour['Adresse'][0:_d_min] == _nv[0:_d_min]:
                                                    if retour5 == {}:
                                                        retour5 = {'1': _retour}
                                                    else:
                                                        retour5 = {'2': _retour}
                                                else:
                                                    dt = 1 - distance(_nv, _retour['Adresse']) * 1.0 / min(_d_adresse, _d_reponse)
                                                    if dt >= 0.8:
                                                        if retour6 == []:
                                                            retour6 = [[dt, nbmots(_retour['Adresse'], _nv), {'1': _retour}]]
                                                        else:
                                                            retour6.append([dt, nbmots(_retour['Adresse'], _nv), {'1': _retour}])
                                            else:
                                                dt = 1 - distance(_nv, _retour['Adresse']) * 1.0 / min(_d_adresse, _d_reponse)
                                                if dt >= 0.8:
                                                    if retour6 == []:
                                                        retour6 = [[dt, nbmots(_retour['Adresse'], _nv), {'1': _retour}]]
                                                    else:
                                                        retour6.append([dt, nbmots(_retour['Adresse'], _nv), {'1': _retour}])
                                            mem = _dt[0]
                                elif _dt[1] == 100:
                                    if _cp0 == '' or _cp0 == '00000' or _cp0[0:2] == _retour['CodePostal'][0:2]:
                                        retour4[len(retour4) + 1] = _retour

                    if retour33 != {}:
                        retour = retour33
                    elif retour3 != {}:
                        retour = retour3
                    elif retour2 != {}:
                        if len(cpt_resu) > 1 and Proposition.upper() == 'N':
                            if retour5 != {} and len(retour5) == 1:
                                retour = retour5
                            elif retour6 != []:
                                if len(retour6) == 1:
                                    retour = retour6[0][2]
                                else:
                                    retour6.sort()
                                    retour6.reverse()
                                    if retour6[0][0] == 1.0:
                                        if retour6[0][1] == len(_nv.split()) and retour6[1][1] != len(_nv.split()):
                                            retour = retour6[0][2]
                                        else:
                                            fl_err = 2
                                    else:
                                        fl_err = 2
                            else:
                                fl_err = 2
                        else:
                            retour = retour2
                    elif len(retour4) == 1:
                        retour = retour4
                    else:
                        fl_err = 1
                elif Proposition.upper() == 'N' and len(retour) > 1:
                    fl_err = 2
                if fl_err > 0:
                    if fl_err == 1 and len(retour) == 1 and retour['1']['LieuDit'] != '' and retour['1']['Ligne2'] + retour['1']['Complement'] + retour['1']['Voie'] == '':
                        pass
                    else:
                        retour = {'1': {}}
                        taille = 3000
                        _insee = ''
                        rechv = []
                        _af_cp = ''
                        if type(ana) is list:
                            vld = ana[1][1]['rnvp_Adr5']
                        else:
                            vld = ana['rnvp_Adr5']
                        vvi = _vi
                        if len(_cp) >= 2:
                            _af_cp = _cp
                            if cpdefaut != '':
                                rechv = recherche_villeparnom(_vi, cpdefaut)
                                if len(rechv) == 0:
                                    rechv = recherche_villeparnom(_vi, _cp)
                                else:
                                    _af_cp = cpdefaut
                            else:
                                rechv = recherche_villeparnom(_vi, _cp, exact=True)
                            if len(rechv) == 0:
                                rechv = recherche_villeparnom(_vi, _cp[0:2], exact=True)
                            if len(rechv) > 0:
                                _insee = rechv[0][1]
                                _af_cp = rechv[0][2]
                                if _insee in mapville5:
                                    taille = mapville5[_insee]
                            elif _cp in cp_234:
                                cps = cp_234[_cp]
                                for i in cps:
                                    vi = decode(i[0])
                                    if distanceVille(vi, _vi)[0] >= 0.9:
                                        rechv.append([vi,
                                         i[1],
                                         _cp,
                                         i[2],
                                         ''])
                                        _insee = i[1]
                                        break

                            if rechv != [] and _vi != '':
                                if len(rechv) == 1:
                                    vi = rechv[0][0]
                                    if distanceVille(vi, _vi)[0] >= 0.9:
                                        if '(LD.' in vi:
                                            if vld == '':
                                                vld = vi[vi.index('(LD.') + 5:-1].strip()
                                            else:
                                                _vld = vi[vi.index('(LD.') + 5:-1].strip()
                                                if vld != _vld:
                                                    vld += ' ' + _vld
                                            vvi = vi[0:vi.index('(LD.')].strip()
                                        else:
                                            vvi = vi.strip()
                                        _af_cp = rechv[0][2]
                                else:
                                    _pr = []
                                    _af_cp = ''
                                    for i in rechv:
                                        vi = i[0]
                                        if distanceVille(vi, _vi)[0] >= 0.9:
                                            if '(LD.' in vi:
                                                _pr.append(i)
                                                if vld == '':
                                                    vld = vi[vi.index('(LD.') + 5:-1].strip()
                                                else:
                                                    _vld = vi[vi.index('(LD.') + 5:-1].strip()
                                                    if vld != _vld:
                                                        vld += ' ' + _vld
                                                vvi = vi[0:vi.index('(LD.')].strip()
                                                _af_cp = rechv[0][2]
                                            else:
                                                vvi = vi.strip()
                                                _af_cp = rechv[0][2]
                                                _pr = []
                                                break

                                    if len(_pr) > 1:
                                        vld = ''
                        if Adresse != '':
                            tb = Adresse.split('|')
                            if len(tb) == 7:
                                tb.pop(0)
                            while len(tb) < 6:
                                tb.insert(0, '')

                            tb[3] = vld
                            tb[2] = ana['rnvp_Adresse']
                            tb[1] = ana['rnvp_Adr3']
                            tb[0] = ana['rnvp_Adr2']
                            if len(rechv) >= 1:
                                tb[5] = vvi
                                tb[4] = _af_cp
                            else:
                                tb[5] = convertUTFISO.convertUTF8(tb[5], 'O', 'O')
                                tb[4] = _af_cp
                        else:
                            tb = []
                            tb.append(ligne2)
                            tb.append(ligne3)
                            tb.append(ligne4)
                            tb.append(ligne5)
                            tb.append(cp)
                            if len(rechv) >= 1:
                                if vld == '':
                                    tb.append(vvi)
                                else:
                                    tb.append(vvi + ' (LD. ' + vld + ')')
                                tb[4] = rechv[0][2]
                            else:
                                tb.append(convertUTFISO.convertUTF8(ville, 'O', 'O'))
                                tb[4] = _af_cp
                        if taille <= 2500:
                            if ''.join(tb[0:4]).strip() == '':
                                retour['1']['DQECodeDetail'] = '41'
                            else:
                                _r = '30'
                                if tb[2] == '':
                                    _r = '41'
                                if fl_err == 2:
                                    retour['1']['DQECodeDetail'] = _r + 'M'
                                else:
                                    retour['1']['DQECodeDetail'] = _r
                            retour['1']['DQELibErreur'] = 'KO'
                        else:
                            if ''.join(tb[0:4]).strip() == '':
                                retour['1']['DQECodeDetail'] = '61'
                            else:
                                _r = '50'
                                if tb[2] == '':
                                    _r = '61'
                                if fl_err == 2:
                                    retour['1']['DQECodeDetail'] = _r + 'M'
                                else:
                                    retour['1']['DQECodeDetail'] = _r
                            retour['1']['DQELibErreur'] = 'KO'
                        if Adresse != '':
                            retour['1']['Adresse'] = tb[2].strip()
                        else:
                            retour['1']['Adresse'] = ligne4.strip()
                            retour['1']['ligne1'] = ligne1
                            retour['1']['ligne2'] = ligne2
                            retour['1']['ligne3'] = ligne3
                            retour['1']['ligne4'] = ligne4
                            retour['1']['ligne5'] = ligne5
                            if ' (LD.' in tb[5]:
                                vld = tb[5][tb[5].index('(LD.') + 5:-1].strip()
                                vvi = tb[5][0:tb[5].index('(LD.')].strip()
                                retour['1']['ligne5'] = (ligne5 + ' ' + vld).strip()
                                retour['1']['ligne6'] = (tb[4] + '      ')[0:5] + ' ' + vvi
                                tb[5] = vvi
                                if tb[3] == '':
                                    tb[3] = vld
                            else:
                                retour['1']['ligne6'] = (tb[4] + '      ')[0:5] + ' ' + tb[5]
                            retour['1']['DQECodeComplem'] = ''
                        retour['1']['IDCle'] = ''
                        retour['1']['IDCleVoie'] = ''
                        retour['1']['IDHexaposte'] = _insee
                        retour['1']['Cedex'] = ''
                        retour['1']['CodePostal'] = tb[4]
                        retour['1']['CompNum'] = ''
                        retour['1']['Complement'] = tb[1]
                        retour['1']['DQECodeErreur'] = '1'
                        retour['1']['DQECompte'] = ''
                        retour['1']['DQEPourcentErreur'] = ''
                        retour['1']['IDLocalite'] = _insee
                        retour['1']['IDVoie'] = ''
                        retour['1']['Instance'] = ''
                        retour['1']['LieuDit'] = tb[3]
                        retour['1']['Ligne2'] = tb[0]
                        retour['1']['ListeNumero'] = ''
                        retour['1']['Localite'] = tb[5]
                        retour['1']['NbNumero'] = ''
                        retour['1']['NumSeul'] = ''
                        retour['1']['Numero'] = ''
                        retour['1']['Pays'] = 'FRA'
                        retour['1']['Province'] = '*'
                        retour['1']['TypeVoie'] = ''
                        retour['1']['Voie'] = ''
                        if _flag_roudis:
                            retour['1']['Roudis'] = ''
        if Pays == 'FRA' and (_flag_irisilot or _flag_mapgeocodage) or Pays != 'FRA' and _flag_mapgeocodage:
            if 'list' in str(type(retour)):
                for i in range(0, len(retour)):
                    if retour[i].has_key('IDVoie'):
                        if _flag_mapgeocodage:
                            f = retour[i]['IDVoie']
                            n = retour[i]['Numero']
                            if f != '':
                                xy = RechercheGeoLoc(f, n)
                                retour[i]['Latitude'] = str(xy[0])
                                retour[i]['Longitude'] = str(xy[1])
                                retour[i]['Geolocalisation_Error_Code'] = GeoLocEDF(xy[2])
                                retour[i]['TempTR'] = xy[3]
                            else:
                                retour[i]['Latitude'] = ''
                                retour[i]['Longitude'] = ''
                                retour[i]['Geolocalisation_Error_Code'] = '92'
                        if _flag_irisilot:
                            f = retour[i]['IDVoie']
                            if f != '-1':
                                f = '00000000'[0:8 - len(f)] + f
                            n = retour[i]['Numero']
                            if not 'iris' in retour[i] or retour[i]['iris'] == '':
                                if f != '' and 'Latitude' in retour[i] and retour[i]['Latitude'] != '0.0' and retour[i]['Latitude'] != '':
                                    retour[i]['ilot'] = ''
                                    if 'IDLocalite' in retour[i] and retour[i]['IDLocalite'] != '':
                                        retour[i]['iris'] = rechercheIRIS(retour[i]['Longitude'], retour[i]['Latitude'], insee=retour[i]['IDLocalite'])[1]
                                    else:
                                        retour[i]['iris'] = rechercheIRIS(retour[i]['Longitude'], retour[i]['Latitude'])[1]
                                    retour[i]['Status_IrisIlot'] = 'INSEE'
                                    if 'Geolocalisation_Error_Code' in retour[i]:
                                        if not retour[i]['Geolocalisation_Error_Code'] in ['00', '01', '02']:
                                            retour[i]['ilot'] = ''
                                            if retour[i]['Geolocalisation_Error_Code'] == '03':
                                                r = rechercheIRIS(retour[i]['Longitude'], retour[i]['Latitude'])[1]
                                                if r == '0000':
                                                    retour[i]['iris'] = r
                                                    retour[i]['Status_IrisIlot'] = 'INSEE'
                                                else:
                                                    retour[i]['iris'] = ''
                                                    retour[i]['Status_IrisIlot'] = 'NO'
                                            else:
                                                retour[i]['iris'] = ''
                                                retour[i]['Status_IrisIlot'] = 'NO'
                                else:
                                    retour[i]['ilot'] = ''
                                    retour[i]['iris'] = ''
                                    retour[i]['Status_IrisIlot'] = 'NO'
                    elif not 'iris' in retour[i]:
                        retour[i]['ilot'] = ''
                        retour[i]['iris'] = ''
                        retour[i]['Status_IrisIlot'] = 'NO'

            else:
                for i in retour.keys():
                    if retour[i].has_key('DQECodeDetail'):
                        if retour[i]['DQECodeDetail'] >= '71' and retour[i]['DQECodeDetail'] <= '79':
                            retour[i]['DQECodeDetail'] = '0'
                    if _flag_mapgeocodage and retour[i].has_key('IDVoie'):
                        f = retour[i]['IDVoie']
                        n = retour[i]['Numero']
                        if f != '':
                            xy = RechercheGeoLoc(f, n)
                            retour[i]['Latitude'] = str(xy[0])
                            retour[i]['Longitude'] = str(xy[1])
                            retour[i]['Geolocalisation_Error_Code'] = GeoLocEDF(xy[2])
                            retour[i]['TempTR'] = xy[3]
                        else:
                            retour[i]['Latitude'] = ''
                            retour[i]['Longitude'] = ''
                            retour[i]['Geolocalisation_Error_Code'] = '92'
                    if retour[i].has_key('IDVoie'):
                        if _flag_irisilot:
                            f = retour[i]['IDVoie']
                            if f != '-1':
                                f = '00000000'[0:8 - len(f)] + f
                            n = retour[i]['Numero']
                            if not 'iris' in retour[i] or retour[i]['iris'] == '':
                                if 'Latitude' in retour[i] and retour[i]['Latitude'] != '0.0' and retour[i]['Latitude'] != '':
                                    retour[i]['ilot'] = ''
                                    if 'IDLocalite' in retour[i] and retour[i]['IDLocalite'] != '':
                                        retour[i]['iris'] = rechercheIRIS(retour[i]['Longitude'], retour[i]['Latitude'], insee=retour[i]['IDLocalite'])[1]
                                    else:
                                        retour[i]['iris'] = rechercheIRIS(retour[i]['Longitude'], retour[i]['Latitude'])[1]
                                    retour[i]['Status_IrisIlot'] = 'INSEE'
                                    if 'Geolocalisation_Error_Code' in retour[i]:
                                        retour[i]['ilot'] = ''
                                        if not retour[i]['Geolocalisation_Error_Code'] in ['00', '01', '02']:
                                            if retour[i]['Geolocalisation_Error_Code'] == '03':
                                                r = rechercheIRIS(retour[i]['Longitude'], retour[i]['Latitude'])[1]
                                                if r == '0000':
                                                    retour[i]['iris'] = r
                                                    retour[i]['Status_IrisIlot'] = 'INSEE'
                                                else:
                                                    retour[i]['iris'] = ''
                                                    retour[i]['Status_IrisIlot'] = 'NO'
                                            else:
                                                retour[i]['iris'] = ''
                                                retour[i]['Status_IrisIlot'] = 'NO'
                                else:
                                    retour[i]['ilot'] = ''
                                    retour[i]['iris'] = ''
                                    retour[i]['Status_IrisIlot'] = 'NO'

        for ret in retour:
            tp = retour[ret]
            num_dep, lib_dep, lib_region, lib_pref, centre_lat, centre_lon = ['',
             '',
             '',
             '',
             '',
             '']
            _IDCle, _IDCleVoie = ['', '']
            if restructure.specific != None:
                if 'ligne3' in tp and tp['ligne3'] != '':
                    tp['ligne3'] = restructure.specific.mappingL3(tp['ligne3'])
                    if len(tp['ligne3']) > Taille:
                        tp['ligne3'] = NormaliseTaille(tp['ligne3'], Taille)
                if 'Complement' in tp and tp['Complement'] != '':
                    tp['Complement'] = restructure.specific.mappingL3(tp['Complement'])
                    if len(tp['Complement']) > Taille:
                        tp['Complement'] = NormaliseTaille(tp['Complement'], Taille)
            if tp['IDLocalite'] == '':
                if not 'Adresse' in tp:
                    tp['Adresse'] = ''
                if 'DQECodeDetail' in tp and tp['DQECodeDetail'] != '20':
                    if tp['Adresse'] != '':
                        tp['DQECodeDetail'] = '70'
                    else:
                        tp['DQECodeDetail'] = '80'
            if 'iris' in tp and tp['iris'] == '':
                if tp['IDLocalite'] != '':
                    if 'Geolocalisation_Error_Code' in tp:
                        if tp['Geolocalisation_Error_Code'] in ['00', '01', '02']:
                            tp['iris'] = '0000'
                    else:
                        tp['iris'] = '0000'
            if not 'IDCle' in tp and tp['IDVoie'] != '':
                try:
                    if tp['NbNumero'] == '' or int(tp['NbNumero']) <= 1:
                        if tp['NumSeul'] != '':
                            tp['IDCle'] = _mapnumvoiecle[tp['IDVoie'] + '_' + tp['NumSeul'] + tp['CompNum']]
                        else:
                            tp['IDCle'] = _mapnumvoiecle[tp['IDVoie'] + '_' + tp['Numero']]
                    else:
                        tp['IDCle'] = ''
                except:
                    tp['IDCle'] = ''

                if tp['IDCle'] != '':
                    try:
                        tp['IDCleVoie'] = _mapnumvoiecle[tp['IDVoie'] + '_']
                    except:
                        tp['IDCleVoie'] = ''

                    if tp['IDCleVoie'] == tp['IDCle']:
                        tp['IDCle'] = ''
                elif tp['IDVoie'] != '':
                    try:
                        tp['IDCleVoie'] = _mapnumvoiecle[tp['IDVoie'] + '_']
                    except:
                        tp['IDCleVoie'] = ''

                else:
                    tp['IDCleVoie'] = ''
            elif not 'IDCle' in tp or tp['IDCle'] == '':
                tp['IDCle'] = ''
                try:
                    tp['IDCleVoie'] = _mapnumvoiecle[tp['IDVoie'] + '_']
                except:
                    tp['IDCleVoie'] = ''

            elif tp['IDCleVoie'] == tp['IDCle']:
                tp['IDCle'] = ''
            if tp['TypeVoie'] == 'LIEU':
                if tp['Voie'] != '' and tp['Voie'][0:4] == 'DIT ':
                    tp['TypeVoie'] == 'LIEU DIT'
                    tp['Voie'] = tp['Voie'][4:].strip()
            if not 'Adresse' in tp:
                tp['Adresse'] = ''
            if tp['Voie'] == '' and tp['Adresse'] != '':
                tp['Voie'] = tp['Adresse']
            if tp.has_key('TempTR'):
                _convert = tp['TempTR']
                tp.pop('TempTR')
            else:
                _convert = ''
            if tp['IDVoie'] != '' and tp['IDVoie'].isdigit() and int(tp['IDVoie'] > 0):
                tp['IDVoie'] = normaliseIDVoie(tp['IDVoie'])
            if ' CEDEX ' in ' ' + tp['Localite'] + ' ':
                tp['Cedex'] = '1'
            else:
                tp['Cedex'] = '0'
            if tp.has_key('IDLocalite') and tp['IDLocalite'] != '' and tp.has_key('Longitude') and tp['Longitude'] != '':
                _lon = float(tp['Longitude'])
                _lat = float(tp['Latitude'])
                if not _flag_geoconvert:
                    _lon_lam93, _lat_lam93 = WGSLam93(_lat, _lon)
                    _lon_lam2, _lat_lam2 = [0.0, 0.0]
                else:
                    tp['GPS'] = '%010.6f%010.6f' % (float(_lon), float(_lat))
                    if _convert == '':
                        tp['L93'] = ''
                        tp['L02'] = ''
                    else:
                        try:
                            r = _mapgeoconvert[_convert]
                            _lon_lam93, _lat_lam93 = r[0]
                            _lon_lam2, _lat_lam2 = r[1]
                            tp['L93'] = '%015.7f%015.7f' % (float(_lon_lam93), float(_lat_lam93))
                            tp['L02'] = '%015.7f%015.7f' % (float(_lon_lam2), float(_lat_lam2))
                        except:
                            tp['L93'] = ''
                            tp['L02'] = ''

                v0 = search_carreaux(latitude=str(_lat), longitude=str(_lon))
                if v0['Result'] == 'OK':
                    tp['ICP'] = v0['Carreaux']['idInspire']
                    tp['ICE'] = v0['Carreaux']['id']
                    tp['ICR'] = v0['Carreaux']['idk']
                else:
                    tp['ICP'] = ''
                    tp['ICE'] = ''
                    tp['ICR'] = ''
            else:
                tp['ICP'] = ''
                tp['ICE'] = ''
                tp['ICR'] = ''
                if _flag_geoloczipcode and tp.has_key('IDLocalite') and tp['IDLocalite'] != '' and tp.has_key('IDVoie') and tp['IDVoie'] == '' and geoloczipcode.has_key(tp['IDLocalite']):
                    xx = geoloczipcode[tp['IDLocalite']]
                    tp['Latitude'] = xx[0]
                    tp['Longitude'] = xx[1]
                    tp['GPS'] = '%010.6f%010.6f' % (float(xx[1]), float(xx[0]))
                    tp['L93'] = '%015.7f%015.7f' % (float(xx[13]), float(xx[14]))
                    tp['L02'] = '%015.7f%015.7f' % (float(xx[15]), float(xx[16]))
                    tp['Geolocalisation_Error_Code'] = '03'
                    r = rechercheIRIS(tp['Longitude'], tp['Latitude'])[1]
                    if r == '0000':
                        tp['iris'] = r
                        tp['Status_IrisIlot'] = 'INSEE'
                    else:
                        tp['iris'] = ''
                        tp['Status_IrisIlot'] = 'NO'
            if ana != {}:
                if type(ana) is list:
                    if ana[1][1]['rnvp_Cp'] != '' and ana[1][1]['rnvp_Cp'] != '00000' and ana[1][1]['rnvp_Cp'] != '99999' and tp['DQECodeDetail'] in ['10',
                     '21',
                     '22',
                     '23',
                     '24',
                     '30',
                     '40',
                     '41',
                     '50',
                     '61']:
                        if ana[1][1]['rnvp_Cp'][0:2] != tp['CodePostal'][0:2] and ana[1][1]['rnvp_Cp'][1] + ana[1][1]['rnvp_Cp'][0] != tp['CodePostal'][0:2]:
                            tp['DQECodeErreur'] = '9'
                elif ana['rnvp_Cp'] != '' and ana['rnvp_Cp'] != '00000' and ana['rnvp_Cp'] != '99999' and tp['DQECodeDetail'] in ['10',
                 '21',
                 '22',
                 '23',
                 '24',
                 '30',
                 '40',
                 '41',
                 '50',
                 '61']:
                    if ana['rnvp_Cp'][0:2] != tp['CodePostal'][0:2] and ana['rnvp_Cp'][1] + ana['rnvp_Cp'][0] != tp['CodePostal'][0:2]:
                        if len(ana['rnvp_Cp']) == 4:
                            if '0' + ana['rnvp_Cp'][0] != tp['CodePostal'][0:2]:
                                tp['DQECodeErreur'] = '9'
                        else:
                            tp['DQECodeErreur'] = '9'
            if tp['LieuDit'] != '' and (' BP ' in ' ' + tp['LieuDit'] or ' BOITE POSTALE ' in ' ' + tp['LieuDit']):
                if tp['DQECodeDetail'] in ['21',
                 '22',
                 '23',
                 '24',
                 '30',
                 '40',
                 '41',
                 '50',
                 '61']:
                    tp['DQECodeDetail'] = '20'
                    tp['DQECodeErreur'] = '0'
                    tp['DQELibErreur'] = 'OK'
            if tp['IDVoie'] != '' and tp['IDVoie'].isdigit() and int(tp['IDVoie'] > 0):
                tp['IDVoie'] = normaliseIDVoie(tp['IDVoie'])
            for verif in ['ListeComplements',
             'L02',
             'L93',
             'GPS']:
                if not verif in tp:
                    tp[verif] = ''

            retour[ret] = tp

        return retour

    @jsonp
    def index(self, Pays, Adresse = '', Instance = '', ligne1 = '', ligne2 = '', ligne3 = '', ligne4 = '', ligne5 = '', ligne6 = '', cp = '', ville = '', Licence = '', Taille = 38, Mini = 0, Cedex = '', IP_Trace = '', Proposition = 'N', ForceInternational = 'N', tr_cpteffectif = 'O', modeBatch = 'N', Descrimination = True):

        def Etranger(_ligne1, _ligne2, _ligne3, _ligne4, _ligne5, _cp, _ville, pays_retours, fl_complet = False):
            resu = {'1': {'Adresse': _ligne4,
                   'CodePostal': _cp,
                   'Pays': pays_retours,
                   'Ligne2': _ligne2,
                   'Localite': _ville,
                   'Complement': _ligne3,
                   'Voie': _ligne4,
                   'Province': '*',
                   'NbNumero': '',
                   'Status_IrisIlot': '',
                   'Latitude': '',
                   'DQECompte': '',
                   'Instance': '',
                   'ICE': '',
                   'Roudis': '',
                   'Cedex': '',
                   'Numero': '',
                   'ListeNumero': '',
                   'IDHexaposte': '',
                   'IDCleVoie': '',
                   'IDCle': '',
                   'Geolocalisation_Error_Code': '92',
                   'Nbnumero': '',
                   'LieuDit': _ligne5,
                   'L02': '',
                   'Longitude': '',
                   'TypeVoie': '',
                   'ilot': '',
                   'ICR': '',
                   'ICP': '',
                   'GPS': '',
                   'CompNum': '',
                   'iris': '',
                   'IDLocalite': '',
                   'DQECodeDetail': '90',
                   'DQELibErreur': 'KO',
                   'DQECodeErreur': '1',
                   'IDVoie': '',
                   'NumSeul': '',
                   'L93': '',
                   'DQEPourcentErreur': ''}}
            if fl_complet:
                resu['1']['DQECodeComplem'] = ''
                resu['1']['ligne1'] = _ligne1
                resu['1']['ligne2'] = _ligne2
                resu['1']['ligne3'] = _ligne3
                resu['1']['ligne4'] = _ligne4
                resu['1']['ligne5'] = _ligne5
                resu['1']['ligne6'] = _cp + ' ' + _ville
            return resu

        def isFrance(cp, ville):
            new_cp = ''
            if cp != '':
                ll = len(cp)
                if cp.isdigit():
                    if ll == 4 and ville == '':
                        if '0' + cp not in cp_234:
                            if cp + '_' in _cpvilleInter:
                                p = _cpvilleInter[cp + '_']
                                if len(p) == 1:
                                    return [False, p[0], '']
                                else:
                                    return [False, '***', '']
                        elif cp + '_' in _cpvilleInter:
                            p = _cpvilleInter[cp + '_']
                            if len(p) == 1:
                                return [False, p[0], '']
                            else:
                                return [False, '***', '']
                        else:
                            return [True, 'FRA', '']
                    if ville != '':
                        ville0 = convertUTFISO.convertUTF8(ville, 'O', 'O')
                        cp1 = cp
                        if ll == 4:
                            if '0' + cp not in cp_234:
                                if ville0 == '' or ville0 not in _cpvilleInter:
                                    return [False, '***', '']
                                else:
                                    return [False, _cpvilleInter[ville0], '']
                            else:
                                if recherche_villeparnom(ville0, '0' + cp1) != []:
                                    return [True, 'FRA', '']
                                if ville0 not in _cpvilleInter:
                                    return [False, '***', '']
                                return [False, _cpvilleInter[ville0], '']
                            cp1 = '0' + cp1
                        if not (cp == '00000' or cp == '99999'):
                            resu = recherche_villeparnom(ville0, cp1[0:_lenDepartement])
                        else:
                            resu = recherche_villeparnomexact(ville0)
                        if resu == []:
                            if cp == '00000' or cp == '99999':
                                vi = recherche_villeparnomexact(ville)
                                if vi == []:
                                    if ville0 in _cpvilleInter:
                                        return [False, _cpvilleInter[ville0], '']
                                return [vi != [], '', '']
                            if cp + '_' + ville0 in _cpvilleInter:
                                return [False, _cpvilleInter[cp + '_' + ville0], '']
                            if (ll == 5 or ll == 4) and ville0 in _cpvilleInter:
                                return [False, _cpvilleInter[ville0], '']
                            if len(cp) != 5:
                                vi = recherche_villeparnomexact(ville)
                                if vi == []:
                                    if ville0 in _cpvilleInter:
                                        return [False, _cpvilleInter[ville0], '']
                                if vi != [] and len(cp) == 4:
                                    for i in vi:
                                        if '0' + cp == i[2]:
                                            new_cp = i[2]
                                            break

                                    return [True, 'FRA', new_cp]
                                return [vi != [], '', '']
                    return [True, 'FRA', new_cp]
                else:
                    return [False, '', '']
            elif ville != '':
                ville0 = convertUTFISO.convertUTF8(ville, 'O', 'O')
                vi = recherche_villeparnomexact(ville0)
                if vi == []:
                    if ville0 in _cpvilleInter:
                        return [False, _cpvilleInter[ville0], '']
                    else:
                        return [True, 'FRA', '']
                else:
                    return [True, 'FRA', '']
            else:
                return [True, '', '']

        def DecoupageAnalyse(liste):
            if len(liste) < 3:
                return [[' '.join(liste), '']]
            pos = 0
            premier = True
            while pos < len(liste):
                suite = True
                if liste[pos].isalpha() and premier:
                    premier = False
                    if liste[pos] in _voie_transfo:
                        liste[pos] = '_' + liste[pos] + '_'
                        suite = False
                if suite:
                    if pos <= 2 and liste[pos].upper() in ('DU', 'DE', 'LE', 'LA', 'LES', 'UN', 'UNE', 'DES', 'L', 'D', 'AU', 'AUX'):
                        if pos - 1 >= 0:
                            liste[pos] = '_' + liste[pos]
                        if pos + 1 < len(liste):
                            liste[pos] = liste[pos] + '_'
                    elif liste[pos].upper() in ('SAINT', 'SAINTE', 'STE', 'ST'):
                        liste[pos] = liste[pos] + '_'
                pos += 1

            ch = ' '.join(liste).replace('_ _', '_').replace(' _', '_').replace('_ ', '_').split()
            if '_' in ch[0]:
                pos = 0
            else:
                pos = 1
            resu = []
            for i in range(pos, len(ch)):
                adr = ' '.join(ch[0:pos + 1]).replace('_', ' ')
                l3 = ' '.join(ch[pos + 1:]).replace('_', ' ')
                if l3 != '':
                    resu.append([adr, l3])
                pos += 1

            return resu

        while True:
            if Pays == _pays:
                mem_cp = ''
                if '|' in Adresse or Adresse != '':
                    AdresseMem = ''
                    tb = Adresse.split('|')
                    for i in range(0, len(tb)):
                        tb[i] = tb[i].strip()

                    if len(tb) == 4:
                        tb.insert(0, '')
                    elif len(tb) == 6:
                        tb.insert(0, '')
                    elif len(tb) > 7 or len(tb) < 5:
                        r1 = []
                        for i in tb:
                            if i != '':
                                r1.append(i)

                        ad = ' '.join(r1)
                        ana = AnalyseRN(ad)
                        tb = [ana['rnvp_Adr1'],
                         ana['rnvp_Adr2'],
                         ana['rnvp_Adr3'],
                         ana['rnvp_Adresse'],
                         ana['rnvp_Adr5'],
                         ana['rnvp_Cp'],
                         ana['rnvp_Ville']]
                    Adresse = '|'.join(tb)
                    if len(tb) == 7:
                        _icp = 5
                        _iville = 6
                        _iadr = 3
                    else:
                        _icp = 3
                        _iville = 4
                        _iadr = 1
                    if tb[_icp] != '' and tb[_iville] != '' and ' ' + tb[_icp] + ' ' in ' ' + tb[_iville] + ' ':
                        tb[_iville] = (' ' + tb[_iville] + ' ').replace(' ' + tb[_icp] + ' ', '').strip()
                        AdresseMem = Adresse[:]
                        Adresse = '|'.join(tb)
                    if tb[_iadr] == '' and (tb[_iadr - 1] + tb[_iadr + 1] != '' or tb[_icp] == '' and tb[_iville] != ''):
                        tbs = '|||||||'[0:6 - Adresse.count('|')] + Adresse
                        res = restructure.analyse('', '0;1;2;3;4;5;6', '', '0', '|', tbs, DescriptionEntree='L1;L2;L3;voie;BP;CP;VILLE', FileError=_fwrite_error)
                        if len(tb) == 7:
                            tb[0] = res[1][1]['rnvp_Adr1']
                            tb[1] = res[1][1]['rnvp_Adr2']
                            tb[2] = res[1][1]['rnvp_Adr3']
                            tb[3] = res[1][1]['rnvp_Adresse']
                            tb[4] = res[1][1]['rnvp_Adr5']
                            tb[5] = res[1][1]['rnvp_Cp']
                            tb[6] = (res[1][1]['rnvp_Ville'] + ' ' + res[1][1]['rnvp_Cedex']).strip()
                        else:
                            tb[0] = res[1][1]['rnvp_Adr3']
                            tb[1] = res[1][1]['rnvp_Adresse']
                            tb[2] = res[1][1]['rnvp_Adr5']
                            tb[3] = res[1][1]['rnvp_Cp']
                            tb[4] = (res[1][1]['rnvp_Ville'] + ' ' + res[1][1]['rnvp_Cedex']).strip()
                        AdresseMem = Adresse[:]
                        Adresse = '|'.join(tb)
                    if tb[_iville] != '':
                        lv = tb[_iville].upper().split()
                        if len(lv) > 1 and (lv[-1] == 'C' or lv[-1] == 'CE' or lv[-1] == 'CED' or lv[-1] == 'CEDE' or lv[-1] == 'CDX'):
                            lv[-1] = 'CEDEX'
                            tb[_iville] = ' '.join(lv)
                        lville = lv[0]
                    else:
                        lville = ''
                    if Pays == 'FRA' and tb[_icp] != '' and tb[_icp][0:2] in ('75', '69', '13') and lville in ('PARIS', 'LYON', 'MARSEILLE') and ' CEDEX ' not in tb[_iville] + ' ' and ' CDX ' not in tb[_iville] + ' ' and ' CEDE ' not in tb[_iville] + ' ':
                        mem_cp = tb[_icp].strip()
                        fl_ville = False
                        if convertUTFISO.convertUTF8(''.join(tb[0:_icp]), 'O', 'O').strip() != '':
                            if lville == 'PARIS':
                                tb[_icp] = '75000'
                                fl_ville = True
                            elif lville == 'LYON':
                                tb[_icp] = '69000'
                                fl_ville = True
                            elif lville == 'MARSEILLE':
                                tb[_icp] = '13000'
                                fl_ville = True
                        if fl_ville:
                            if tb[_iville].strip() != '':
                                tb_av = tb[_iville].strip().split()
                                v_av1 = tb_av[0]
                                fl_cdx = False
                                fl_pr = True
                                for i in tb_av[1:]:
                                    if i in ('CEDEX', 'CDX'):
                                        fl_cdx = True
                                    if fl_cdx:
                                        v_av1 += ' ' + i
                                    else:
                                        if fl_pr and i != '' and i[0].isdigit():
                                            fl_pr = False
                                        if fl_pr:
                                            v_av1 += ' ' + i

                                tb[_iville] = v_av1
                        retour = self.Traite_rnvp(Pays, '|'.join(tb), Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, cp, '', Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination, cpdefaut=mem_cp)
                    elif Pays == _pays:
                        _isF = isFrance(tb[_icp], tb[_iville])
                        if _isF[0]:
                            if _isF[2] != '':
                                cp = _isF[2]
                                tb[_icp] = cp
                                mem_cp = cp
                            elif len(tb[_icp]) == 4:
                                tb[_icp] = '0' + tb[_icp]
                            elif len(tb[_icp]) == 2:
                                tb[_icp] = tb[_icp] + '000'
                            retour = self.Traite_rnvp(Pays, '|'.join(tb), Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, cp, ville, Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination)
                        elif _icp == 5:
                            retour = Etranger(tb[0], tb[1], tb[2], tb[3], tb[4], tb[5], tb[6], _isF[1])
                        else:
                            retour = Etranger('', '', tb[0], tb[1], tb[2], tb[3], tb[4], _isF[1])
                    elif _icp == 5:
                        retour = Etranger(tb[0], tb[1], tb[2], tb[3], tb[4], tb[5], tb[6], Pays)
                    else:
                        retour = Etranger('', '', tb[0], tb[1], tb[2], tb[3], tb[4], Pays)
                else:
                    mem_cp = cp
                    if ville != '':
                        lv = ville.upper().split()
                        cp = cp.strip()
                        if len(lv) > 1 and (lv[-1] == 'C' or lv[-1] == 'CE' or lv[-1] == 'CED' or lv[-1] == 'CEDE' or lv[-1] == 'CDX'):
                            lv[-1] = 'CEDEX'
                            ville = ' '.join(lv)
                        lville = lv[0]
                    else:
                        lville = ''
                    if cp != '' and _pays == 'FRA' and cp != '' and cp[0:2] in ('75', '69', '13') and lville in ('PARIS', 'LYON', 'MARSEILLE') and ' CEDEX ' not in ville + ' ' and ' CDX ' not in ville + ' ' and ' CEDE ' not in ville + ' ':
                        mem_cp = cp[:].strip()
                        fl_ville = False
                        if convertUTFISO.convertUTF8(ligne1 + ligne2 + ligne3 + ligne4 + ligne5, 'O', 'O').strip() != '':
                            if lville == 'PARIS':
                                cp = '75000'
                                fl_ville = True
                            elif lville == 'LYON':
                                cp = '69000'
                                fl_ville = True
                            elif lville == 'MARSEILLE':
                                cp = '13000'
                                fl_ville = True
                        if fl_ville:
                            if ville.strip() != '':
                                tb_av = ville.strip().split()
                                v_av1 = tb_av[0]
                                fl_cdx = False
                                fl_pr = True
                                for i in tb_av[1:]:
                                    if i in ('CEDEX', 'CDX'):
                                        fl_cdx = True
                                    if fl_cdx:
                                        v_av1 += ' ' + i
                                    else:
                                        if fl_pr and i != '' and i[0].isdigit():
                                            fl_pr = False
                                        if fl_pr:
                                            v_av1 += ' ' + i

                                ville = v_av1
                        retour = self.Traite_rnvp(Pays, Adresse, Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, cp, ville, Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination, cpdefaut=mem_cp)
                    elif Pays == 'FRA':
                        _isF = isFrance(cp, ville)
                        if _isF[0]:
                            if _isF[2] != '':
                                cp = _isF[2]
                                mem_cp = cp
                            elif len(cp) == 4:
                                cp = '0' + cp
                            elif len(cp) == 2:
                                cp = cp + '000'
                            retour = self.Traite_rnvp(Pays, Adresse, Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, cp, ville, Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination)
                        else:
                            retour = Etranger(ligne1, ligne2, ligne3, ligne4, ligne5, cp, ville, _isF[1], True)
                    else:
                        retour = Etranger(ligne1, ligne2, ligne3, ligne4, ligne5, cp, ville, Pays, True)
            else:
                if '|' in Adresse or Adresse != '':
                    AdresseMem = ''
                    mem_cp = ''
                    tb = Adresse.split('|')
                    for i in range(0, len(tb)):
                        tb[i] = tb[i].strip()

                    if len(tb) == 4:
                        tb.insert(0, '')
                    elif len(tb) == 6:
                        tb.insert(0, '')
                    elif len(tb) > 7 or len(tb) < 5:
                        r1 = []
                        for i in tb:
                            if i != '':
                                r1.append(i)

                        ad = ' '.join(r1)
                        ana = AnalyseRN(ad)
                        tb = [ana['rnvp_Adr1'],
                         ana['rnvp_Adr2'],
                         ana['rnvp_Adr3'],
                         ana['rnvp_Adresse'],
                         ana['rnvp_Adr5'],
                         ana['rnvp_Cp'],
                         ana['rnvp_Ville']]
                    Adresse = '|'.join(tb)
                    if len(tb) == 7:
                        _icp = 5
                        _iville = 6
                        _iadr = 3
                    else:
                        _icp = 3
                        _iville = 4
                        _iadr = 1
                retour = self.Traite_rnvp(Pays, Adresse, Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, cp, ville, Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination)
                if retour != {} and '1' in retour and retour['1']['DQECodeDetail'] == '80':
                    if '|' in Adresse:
                        retour['1']['Adresse'] = tb[-4]
                        retour['1']['Complement'] = tb[-5]
                        retour['1']['Localite'] = tb[-1].strip()
                        retour['1']['LieuDit'] = tb[-3]
                        retour['1']['CodePostal'] = tb[-2]
                    else:
                        retour['1']['Adresse'] = ligne4
                        retour['1']['Complement'] = ligne3
                        retour['1']['LieuDit'] = ligne5
                        retour['1']['ligne4'] = ligne4
                        retour['1']['ligne3'] = ligne3
                        retour['1']['ligne5'] = ligne5
                        retour['1']['ligne2'] = ligne2
                        retour['1']['ligne1'] = ligne1
                        retour['1']['Localite'] = cp.strip()
                        retour['1']['CodePostal'] = ville
            mem0 = retour
            if _pays == Pays and Descrimination:
                fl_faire_la_ville = True
                if '1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and retour['1']['DQECodeDetail'] in ('80', '70', '30', '50', '50M'):
                    _cp = ''
                    _ville = ''
                    if '|' in Adresse:
                        if mem_cp != '':
                            tb[_icp] = mem_cp
                        tb = Adresse.split('|')
                        if len(tb) > 2:
                            _cp = tb[-2]
                            _ville = tb[-1]
                    else:
                        if mem_cp != '':
                            _cp = mem_cp
                        else:
                            _cp = cp
                        _ville = ville
                    if _cp != '' and _ville != '':
                        villes = recherche_cp(_cp, flag_cedexa=False)
                        if villes == []:
                            villes = recherche_villeparnomexact(_ville)
                        fl_identif_ville = False
                        for iville in villes:
                            if distanceVille(iville[0], _ville)[0] >= 0.9:
                                fl_identif_ville = True
                                break

                        if not fl_identif_ville:
                            fl_faire_la_ville = False
                            if '|' in Adresse:
                                tb[-1] = ''
                                Adr = '|'.join(tb)
                                retour = self.Traite_rnvp(Pays, Adr, Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, cp, '', Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination)
                                if '1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and retour['1']['DQECodeDetail'] in ('80', '70', '30', '50', '50M'):
                                    retour = mem0
                            else:
                                retour = self.Traite_rnvp(Pays, Adresse, Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, _cp, '', Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination)
                                if '1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and retour['1']['DQECodeDetail'][0:2] in ('80', '70', '30', '50', '50M'):
                                    retour = mem0
                if '1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and retour['1']['DQECodeDetail'] in ('80', '70', '30', '50', '50M'):
                    if '|' in Adresse:
                        tb = Adresse.split('|')
                        if len(tb) >= 7:
                            adr0 = convertUTFISO.convertUTF8(tb[3], 'O', 'O').split()
                        else:
                            adr0 = convertUTFISO.convertUTF8(tb[1], 'O', 'O').split()
                        mem = []
                        for adr_tmp, l3_tmp in DecoupageAnalyse(adr0):
                            ntb = tb[:]
                            if len(ntb) >= 7:
                                ntb[3] = adr_tmp
                                ntb[2] = (ntb[2] + ' ' + l3_tmp).strip()
                            else:
                                ntb[1] = adr_tmp
                                ntb[0] = (ntb[0] + ' ' + l3_tmp).strip()
                            retour = self.Traite_rnvp(Pays, '|'.join(ntb), Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, cp, '', Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination)
                            if not ('1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and retour['1']['DQECodeDetail'][0:2] in ('80', '70', '30', '50', '50M')):
                                if mem != [] and mem != {}:
                                    if mem['1']['DQECodeDetail'][0:2] == '10' and retour['1']['DQECodeDetail'][0:2] != '10':
                                        retour = mem
                                        break
                                mem = retour
                            elif mem != [] and mem != {}:
                                retour = mem
                                break

                        if fl_faire_la_ville and '1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and (retour['1']['DQECodeDetail'][0:2] in ('80', '70', '30', '50', '50M') or retour['1']['DQECodeErreur'] in ('9',)):
                            if tb[-1] != '':
                                tb[-1] = ''
                                Adr = '|'.join(tb)
                                retour = self.Traite_rnvp(Pays, Adr, Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, cp, '', Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination)
                                if '1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and retour['1']['DQECodeDetail'] in ('80', '70', '30', '50', '50M'):
                                    retour = mem0
                                elif '1' in retour.keys() and tb[-4] != '' and not ComparaisonTypeAdresse(retour['1']['Adresse'], tb[-4].upper()):
                                    retour = mem0
                    else:
                        adr4 = convertUTFISO.convertUTF8(ligne4, 'O', 'O').split()
                        mem = []
                        for adr_tmp, l3tmp in DecoupageAnalyse(adr4):
                            retour = self.Traite_rnvp(Pays, Adresse, Instance, ligne1, ligne2, l3tmp, adr_tmp, ligne5, ligne6, cp, ville, Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination)
                            if not ('1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and retour['1']['DQECodeDetail'][0:2] in ('80', '70', '30', '50', '50M')):
                                if mem != [] and mem != {}:
                                    if mem['1']['DQECodeDetail'][0:2] == '10' and retour['1']['DQECodeDetail'][0:2] != '10':
                                        retour = mem
                                        break
                                if retour != {}:
                                    mem = retour
                            elif mem != []:
                                retour = mem
                                break

                        if fl_faire_la_ville and '1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and retour['1']['DQECodeDetail'][0:2] in ('80', '70', '30', '50', '50M'):
                            if ville != '' and ligne2 + ligne3 + ligne4 != '':
                                retour = self.Traite_rnvp(Pays, Adresse, Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, mem_cp, '', Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination)
                                if '1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and retour['1']['DQECodeDetail'][0:2] in ('80', '70', '30', '50', '50M'):
                                    retour = mem0
                                elif '1' in retour.keys() and ligne4 != '' and not ComparaisonTypeAdresse(retour['1']['Adresse'], ligne4.upper()):
                                    retour = mem0
                    break
                else:
                    break
            else:
                break

        if '1' in retour.keys() and 'DQECodeErreur' in retour['1'].keys() and retour['1']['DQECodeErreur'] in ('9',):
            if '|' in Adresse:
                retour = self.Traite_rnvp(Pays, '|||' + tb[-2] + '|' + tb[-1], Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, cp, '', Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination)
                retour['1']['Adresse'] = convertUTFISO.convertUTF8(tb[-4], 'O', 'O')
                retour['1']['Complement'] = convertUTFISO.convertUTF8(tb[-5], 'O', 'O')
                retour['1']['LieuDit'] = convertUTFISO.convertUTF8(tb[-3], 'O', 'O')
            else:
                retour = self.Traite_rnvp(Pays, Adresse, Instance, '', '', '', '', '', '', cp, ville, Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination)
                retour['1']['Adresse'] = convertUTFISO.convertUTF8(ligne4, 'O', 'O')
                retour['1']['Complement'] = convertUTFISO.convertUTF8(ligne3, 'O', 'O')
                retour['1']['LieuDit'] = convertUTFISO.convertUTF8(ligne5, 'O', 'O')
                retour['1']['ligne4'] = convertUTFISO.convertUTF8(ligne4, 'O', 'O')
                retour['1']['ligne3'] = convertUTFISO.convertUTF8(ligne3, 'O', 'O')
                retour['1']['ligne5'] = convertUTFISO.convertUTF8(ligne5, 'O', 'O')
                retour['1']['ligne2'] = convertUTFISO.convertUTF8(ligne2, 'O', 'O')
                retour['1']['ligne1'] = convertUTFISO.convertUTF8(ligne1, 'O', 'O')
            if retour['1']['DQECodeDetail'] not in ('70', '80'):
                if retour['1']['Localite'] != '' and retour['1']['CodePostal'] != '' and recherche_villeparnom(retour['1']['Localite'], retour['1']['CodePostal']) != []:
                    if retour['1']['Adresse'] == '':
                        retour['1']['DQECodeDetail'] = '61'
                    else:
                        retour['1']['DQECodeDetail'] = '50'
                elif retour['1']['Adresse'] == '':
                    retour['1']['DQECodeDetail'] = '80'
                else:
                    retour['1']['DQECodeDetail'] = '70'
            retour['1']['DQELibErreur'] = 'KO Aucune correspondance'
            retour['1']['DQECodeErreur'] = '1'
        if '1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and retour['1']['DQECodeDetail'] in ('30M', '50M', '41M', '61M'):
            retour['1']['DQECodeDetail'] = retour['1']['DQECodeDetail'][0:2]
        elif retour == {}:
            if '|' in Adresse or Adresse != '':
                Adresse1 = '|||' + tb[_icp] + '|' + tb[_iville]
                retour = self.Traite_rnvp(Pays, Adresse1, Instance, ligne1, ligne2, ligne3, ligne4, ligne5, ligne6, cp, ville, Licence, Taille, Mini, Cedex, IP_Trace, Proposition, ForceInternational, tr_cpteffectif, modeBatch, Descrimination, cpdefaut='')
                if retour != {} and '1' in retour.keys():
                    retour['1']['Voie'] = ' '.join(tb[0:-2]).strip()
                    retour['1']['Adresse'] = ' '.join(tb[0:-2]).strip()
                    if '1' in retour.keys() and 'DQECodeDetail' in retour['1'].keys() and retour['1']['DQECodeDetail'] in ('30M', '50M', '41M', '61M'):
                        retour['1']['DQECodeDetail'] = retour['1']['DQECodeDetail'][0:2]
                else:
                    if mem_cp != '' and tb[_icp] != mem_cp:
                        tb[_icp] = mem_cp
                    retour = {'1': {'ICE': '',
                           'DQECompte': '',
                           'Instance': '',
                           'Status_IrisIlot': '',
                           'Latitude': '',
                           'Province': '',
                           'ListeComplements': '',
                           'Complement': '',
                           'Roudis': '',
                           'Cedex': '',
                           'Numero': '',
                           'ListeNumero': '',
                           'IDHexaposte': '',
                           'IDCleVoie': '',
                           'IDCle': '',
                           'Geolocalisation_Error_Code': '',
                           'LieuDit': '',
                           'L02': '',
                           'Longitude': '',
                           'TypeVoie': '',
                           'ilot': '',
                           'ICR': '',
                           'ICP': '',
                           'GPS': '',
                           'CompNum': '',
                           'iris': '',
                           'IDLocalite': '',
                           'DQECodeErreur': '1',
                           'L93': '',
                           'Pays': 'FRA',
                           'IDVoie': '',
                           'NbNumero': '',
                           'NumSeul': '',
                           'Ligne2': '',
                           'DQEPourcentErreur': '',
                           'DQECodeComplem': '',
                           'Adresse': ' '.join(tb[0:-2]).strip(),
                           'CodePostal': tb[_icp],
                           'Localite': tb[_iville],
                           'Voie': ' '.join(tb[0:-2]).strip(),
                           'DQECodeDetail': '80',
                           'DQELibErreur': 'KO'}}
            elif (ligne1 + ligne2 + ligne3 + ligne4 + ligne5 + cp + ville).strip() != '':
                retour = {'1': {'ICE': '',
                       'DQECompte': '',
                       'Instance': '',
                       'Status_IrisIlot': '',
                       'Latitude': '',
                       'Province': '',
                       'ListeComplements': '',
                       'Complement': '',
                       'Roudis': '',
                       'Cedex': '',
                       'Numero': '',
                       'ListeNumero': '',
                       'IDHexaposte': '',
                       'IDCleVoie': '',
                       'IDCle': '',
                       'Geolocalisation_Error_Code': '',
                       'LieuDit': '',
                       'L02': '',
                       'Longitude': '',
                       'TypeVoie': '',
                       'ilot': '',
                       'ICR': '',
                       'ICP': '',
                       'GPS': '',
                       'CompNum': '',
                       'iris': '',
                       'IDLocalite': '',
                       'DQECodeErreur': '1',
                       'L93': '',
                       'Pays': 'FRA',
                       'IDVoie': '',
                       'NbNumero': '',
                       'NumSeul': '',
                       'DQEPourcentErreur': '',
                       'DQECodeComplem': '',
                       'ligne1': ligne1,
                       'ligne2': ligne2,
                       'ligne3': ligne3,
                       'ligne4': ligne4,
                       'ligne5': ligne5,
                       'ligne6': cp + ' ' + ville,
                       'Adresse': ligne4.strip(),
                       'Ligne2': ligne2.strip(),
                       'CodePostal': cp,
                       'Localite': ville,
                       'Voie': ligne4.strip(),
                       'DQECodeDetail': '80',
                       'DQELibErreur': 'KO'}}
            else:
                retour = {'1': {'ICE': '',
                       'DQECompte': '',
                       'Instance': '',
                       'Status_IrisIlot': '',
                       'Latitude': '',
                       'Province': '',
                       'ListeComplements': '',
                       'Complement': '',
                       'Roudis': '',
                       'Cedex': '',
                       'Numero': '',
                       'ListeNumero': '',
                       'IDHexaposte': '',
                       'IDCleVoie': '',
                       'IDCle': '',
                       'Geolocalisation_Error_Code': '',
                       'LieuDit': '',
                       'L02': '',
                       'Longitude': '',
                       'TypeVoie': '',
                       'ilot': '',
                       'ICR': '',
                       'ICP': '',
                       'GPS': '',
                       'CompNum': '',
                       'iris': '',
                       'IDLocalite': '',
                       'DQECodeErreur': '1',
                       'L93': '',
                       'Pays': 'FRA',
                       'IDVoie': '',
                       'NbNumero': '',
                       'NumSeul': '',
                       'DQEPourcentErreur': '',
                       'DQECodeComplem': '',
                       'ligne1': ligne1,
                       'ligne2': ligne2,
                       'ligne3': ligne3,
                       'ligne4': ligne4,
                       'ligne5': ligne5,
                       'ligne6': str(cp + ' ' + ville),
                       'Adresse': ligne4.strip(),
                       'Ligne2': ligne2.strip(),
                       'CodePostal': cp,
                       'Localite': ville,
                       'Voie': ligne4.strip(),
                       'DQECodeDetail': '80',
                       'DQELibErreur': 'KO'}}
        if retour != {} and '1' in retour and 'DQECodeDetail' in retour['1'] and retour['1']['DQECodeDetail'] not in ('10', '20', '90', '70', '80') and 'Cedex' in retour['1'] and retour['1']['Cedex'] == '1':
            retour['1']['DQECodeDetail'], retour['1']['DQELibErreur'], retour['1']['DQECodeErreur'] = VerifCedexVille(retour['1']['CodePostal'], retour['1']['Localite'])
        return simplejson.dumps(retour)

    index.exposed = True


class BlackListe(object):

    @jsonp
    def index(self, Liste, Licence = '', IP_Trace = ''):
        retour = {}
        if ServerDQEMail is not None:
            ServerDQEMail.AddBlkServerDomain(Liste, Licence)
        tp = {}
        tp['resultat'] = 'OK'
        retour['1'] = tp
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


class SuggestMail(object):

    @jsonp
    def index(self, Nom, Prenom, Email, Licence, Instance = 0, Pays = 'FRA', IP_Trace = ''):
        global _compteur
        retour = {}
        retour['Instance'] = str(Instance)
        retour['syntaxe'] = 'ok'
        retour['suggest'] = []
        _compteur += 1
        if _flag_log:
            log('%s|%s|%s|debut|SuggestMail' % (datetime.datetime.now(), _port_num, _compteur))
        if ExisteCompte(Licence, '', ''):
            if _flag_log:
                log('%s|%s|%s|debut|SuggestMail 2' % (datetime.datetime.now(), _port_num, _compteur))
            try:
                if ServerDQEMail is not None:
                    retour = ServerDQEMail.MailSuggest(Nom, Prenom, Email, Licence, Instance=0, Pays='FRA')
                else:
                    retour = {}
                    retour['Instance'] = str(Instance)
                    retour['syntaxe'] = 'ko'
                    retour['suggest'] = []
            except:
                retour = {}
                retour['Instance'] = str(Instance)
                retour['syntaxe'] = 'ko'
                retour['suggest'] = []

        if _flag_log:
            log('%s|%s|%s|fin|SuggestMail' % (datetime.datetime.now(), _port_num, _compteur))
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


class RecupMail(object):

    @jsonp
    def index(self, Email, Licence):
        global _compteur
        global _flag_dbmail
        retour = {}
        _compteur += 1
        if _flag_log:
            log('%s|%s|%s|debut|MAIL' % (datetime.datetime.now(), _port_num, _compteur))
        if ExisteCompte(Licence, '', ''):
            if Email != '':
                if _new_compteur:
                    try:
                        comptage_activite(Licence, '', 'MAIL', IP_Trace, Email)
                    except:
                        pass

                if _flag_log:
                    log('%s|%s|%s|verifemailjson|MAIL' % (datetime.datetime.now(), _port_num, _compteur))
                tp = {}
                if ServerDQEMail is not None:
                    tp['IdError'] = ServerDQEMail.verifemailjson(Email, Licence, _flag_dbmail)
                else:
                    tp['IdError'] = 1
                tp['eMail'] = Email
                tp['IdDistance'] = 0
                tb = Email.split('@')
                tp['Domain'] = ''
                tp['FirstArg'] = ''
                tp['LastArg'] = ''
                if tb != [] and len(tb) > 1:
                    tp['Domain'] = ' '.join(tb[1:])
                    if tb[0].find('.') >= 0:
                        tb = tb[0].split('.')[:]
                    elif tb[0].find('-') >= 0:
                        tb = tb[0].split('-')[:]
                    elif tb[0].find('_') >= 0:
                        tb = tb[0].split('_')[:]
                    else:
                        tb[1] = ''
                    if len(tb) >= 1:
                        tp['FirstArg'] = tb[0]
                    if len(tb) >= 2:
                        tp['LastArg'] = ' '.join(tb[1:])
                retour['1'] = tp
        if _flag_log:
            log('%s|%s|%s|fin|MAIL' % (datetime.datetime.now(), _port_num, _compteur))
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


class RecupMailNet(object):

    @jsonp
    def index(self, Email, Licence, IP_Trace = ''):
        global _compteur
        global _ipmail
        retour = {}
        _compteur += 1
        if _flag_log:
            log('%s|%s|%s|debut|MAILNET' % (datetime.datetime.now(), _port_num, _compteur))
        if ExisteCompte(Licence, '', ''):
            tp = {}
            if Email != '':
                if _new_compteur:
                    try:
                        comptage_activite(Licence, '', 'MAIL', IP_Trace, Email)
                    except:
                        pass

                if _flag_log:
                    log('%s|%s|%s|envoie verifemailjsonnet|MAILNET email=%s flagmail=%s  ipmail=%s ' % (datetime.datetime.now(),
                     _port_num,
                     _compteur,
                     Email,
                     _flag_dbmail,
                     _ipmail))
                if ServerDQEMail is not None:
                    resultat_test = ServerDQEMail.verifemailjsonnet(Email, Licence, _flag_dbmail, '')
                    tp['IdError'] = '%02d' % resultat_test[0]
                    tp['Redressement'] = resultat_test[1]
                    tp['eMail'] = resultat_test[2]
                    tp['eMailOrigine'] = Email
                    tb = resultat_test[2].split('@')
                retour['1'] = tp
            else:
                tp['IdError'] = '04'
                tp['Redressement'] = 0
                tp['eMail'] = ''
                tp['eMailOrigine'] = ''
                retour['1'] = tp
        if _flag_log:
            log('%s|%s|%s|fin|MAILNET' % (datetime.datetime.now(), _port_num, _compteur))
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


class RecupMailNom(object):

    @jsonp
    def index(self, Email, Licence, IP_Trace = ''):
        global _compteur
        retour = {}
        _compteur += 1
        if _flag_log:
            log('%s|%s|%s|debut|MAILNOM %s' % (datetime.datetime.now(),
             _port_num,
             _compteur,
             Email))
        if ExisteCompte(Licence, '', ''):
            if Email != '':
                tp = {}
                if ServerDQEMail is not None:
                    resultat_test = ServerDQEMail.verifemailjsonnom(Email, Licence, _flag_dbmail, _ipmail)
                    tp['IdError'] = resultat_test[0]
                    tp['Redressement'] = resultat_test[1]
                    tp['eMail'] = resultat_test[2]
                    tp['eMailOrigine'] = Email
                    tp['IdDistance'] = 0
                    tb = resultat_test[2].split('@')
                    tp['Domain'] = ''
                    tp['FirstArg'] = ''
                    tp['LastArg'] = ''
                    if tb != [] and len(tb) > 1:
                        tp['Domain'] = ' '.join(tb[1:])
                        if tb[0].find('.') >= 0:
                            tb = tb[0].split('.')[:]
                        elif tb[0].find('-') >= 0:
                            tb = tb[0].split('-')[:]
                        elif tb[0].find('_') >= 0:
                            tb = tb[0].split('_')[:]
                        else:
                            tb[1] = ''
                        if len(tb) >= 1:
                            tp['FirstArg'] = tb[0]
                        if len(tb) >= 2:
                            tp['LastArg'] = ' '.join(tb[1:])
                retour['1'] = tp
        if _flag_log:
            log('%s|%s|%s|fin|MAILNOM' % (datetime.datetime.now(), _port_num, _compteur))
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


class VerifTel(object):

    @jsonp
    def index(self, Tel, Licence, Pays = 'FRA', Format = 0, IP_Trace = '', Status = 'N'):
        global _compteur
        retour = {}
        _compteur += 1
        if _flag_log:
            log('%s|%s|%s|debut|TELEPHONE' % (datetime.datetime.now(), _port_num, _compteur))
        if ExisteCompte(Licence, '', ''):
            avecbitplan = True
            lic_biteplant = ''
            lic_infobip = ''
            flag_nb = False
            lq = 'TEL'
            if avecbitplan:
                if _flag_optel:
                    try:
                        lic_infobip = _dicoinfobip[Licence]['id']
                        lq = 'TELMOB'
                        try:
                            lic_biteplant = _dicobiteplant[Licence]['id']
                        except:
                            lic_biteplant = ''

                    except:
                        try:
                            lic_biteplant = _dicobiteplant[Licence]['id']
                            lq = 'TELPLUS'
                        except:
                            lic_biteplant = ''

                if Licence + '(' + Pays + ')' in _dicobiteplant:
                    lic_infobip = ''
                    lic_biteplant = _dicobiteplant[Licence + '(' + Pays + ')']['id']
                if Licence + '(-' + Pays + ')' in _dicobiteplant:
                    lic_biteplant = ''
                if Licence + '(-' + Pays + ')' in _dicoinfobip:
                    lic_infobip = ''
            if _new_compteur:
                try:
                    if Pays == 'FRA' and inlicence2(Licence, '6DFRA'):
                        comptage_activite(Licence, Pays, 'TEL', IP_Trace, Tel)
                    else:
                        comptage_activite(Licence, Pays, lq, IP_Trace, Tel)
                except:
                    pass

            pays_iso2 = _dicopaysiso[Pays]
            if ServerDQETel is not None:
                if lic_infobip != '':
                    if Status in 'OoYy':
                        retour = ServerDQETel.VerifTelMain(Tel, Licence, Pays, Format, avecbitplan, _flag_optel, lic_infobip, pays_iso2, 'OKAPI', inlicence2(Licence, '6DFRA'))
                    else:
                        retour = ServerDQETel.VerifTelMain(Tel, Licence, Pays, Format, avecbitplan, _flag_optel, lic_infobip, pays_iso2, 'INFOBIP', inlicence2(Licence, '6DFRA'))
                    try:
                        if retour['1']['IdError'] == 99 or retour['1']['Type'] == 'FIXE':
                            if lic_biteplant != '':
                                retour = ServerDQETel.VerifTelMain(Tel, Licence, Pays, Format, avecbitplan, _flag_optel, lic_biteplant, pays_iso2, '', inlicence2(Licence, '6DFRA'))
                                if retour['1']['IdError'] == 99:
                                    retour['1']['IdError'] = 0
                                if _new_compteur:
                                    try:
                                        comptage_activite(Licence, Pays, 'TELPLUS', IP_Trace, Tel)
                                    except:
                                        pass

                    except:
                        pass

                else:
                    retour = ServerDQETel.VerifTelMain(Tel, Licence, Pays, Format, avecbitplan, _flag_optel, lic_biteplant, pays_iso2, '', inlicence2(Licence, '6DFRA'))
        if _flag_log:
            log('%s|%s|%s|fin|TELEPHONE' % (datetime.datetime.now(), _port_num, _compteur))
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


def transUrl(val):
    return val.replace(' ', '+')


def majbaseld(fichier, sortie):
    if os.path.isfile(fichier):
        ff = open(fichier)
        ff.readline()
        ld_off = {}
        liste_ld = []
        cpt = 0
        insee_actuel = ''
        localite = ''
        nb = 0
        for line in ff:
            line0 = line.strip()
            nb += 1
            if nb % 1000 == 0:
                print nb
            if line0 != '':
                insee = line0[7:12]
                if insee_actuel == '':
                    insee_actuel = insee
                if insee_actuel != insee:
                    if cpt == 0 and liste_ld != []:
                        ld_off[insee_actuel] = liste_ld
                    cpt = 0
                    localite = ''
                    liste_ld = []
                    insee_actuel = insee
                if line0[0] == 'L':
                    st = line0[72:110].strip()
                    if st != '':
                        liste_ld.append(st)
                    else:
                        localite = line0[1:6]
                elif line0[0] == 'V':
                    if line0[1:6] != localite:
                        cpt += 1

        ff.close()
        if os.path.isfile(sortie):
            os.remove(sortie)
        ff = shelve.open(sortie, 'c')
        for k in ld_off:
            ff[k] = ld_off[k]

        ff.close()


class BatchRnvp(object):

    @jsonp
    def index(self, Pays, Adresse, Instance, Licence = '', Taille = 38, Mini = 0, Cedex = '', IP_Trace = '', Proposition = False):
        retour = {}
        Taille = int(Taille)
        if _new_compteur:
            try:
                comptage_activite(Licence, Pays, 'RNVPBATCH', IP_Trace, Adresse)
            except:
                pass

        if _ipelfy != '':
            vurl = _ipelfy + '/RNVP/?Pays=' + Pays + '&Adresse=' + transUrl(Adresse) + '&Instance=' + Instance + '&Licence=' + Licence + '&Taille=' + str(Taille) + '&Mini=' + str(Mini) + '&Cedex=' + Cedex
            try:
                _opu = urllib2.urlopen(vurl)
                retour = _opu.read()
            except:
                retour = ''

            try:
                _opu.close()
            except:
                pass

        return retour

    index.exposed = True


def init_bornes(fic_hexavia, fic_sh):
    ff = open(fic_hexavia)
    ff.readline()
    hexa = {}
    cpt = 0
    print 'Lecture bornes FRA', fic_hexavia
    for line in ff:
        line = line.strip()
        if line[0] == 'V':
            hexaposte = line[1:7].strip()
            cp = line[109:114]
            hexavia = str(int(line[12:20]))
            imp_mini = line[114:118]
            imp_maxi = line[120:124]
            pair_mini = line[126:130]
            pair_maxi = line[132:136]
            if imp_mini != '0000' or pair_mini != '0000':
                cpt += 1
                if hexavia not in hexa:
                    hexa[hexavia] = [[int(imp_mini),
                      int(imp_maxi),
                      int(pair_mini),
                      int(pair_maxi),
                      cp,
                      hexaposte]]
                else:
                    hexa[hexavia].append([int(imp_mini),
                     int(imp_maxi),
                     int(pair_mini),
                     int(pair_maxi),
                     cp,
                     hexaposte])

    ff.close()
    print 'Ecriture Bornes FRA mapadresse4a'
    sh = open(fic_sh, 'wb')
    pickle.dump(hexa, sh)
    sh.close()


def ExisteDeja(valeur):
    exec Compile().unxipfromfile('licence.mql', 'dql')
    Licence = TestDQELicence()
    Licence.client_ref = Licence.client_ref.replace(' ', '')
    return Licence.client_ref == valeur.replace(' ', '')


class RecupLicence(object):

    @jsonp
    def index(self, client_ref = '', code_match = ''):
        retour = {}
        tp = {}
        cont = True
        if client_ref != '':
            ls = sha.sha('a8978BZ!' + client_ref + '98@29bzh3').hexdigest().upper()
            if ls != code_match.upper():
                cont = False
                tp['Maj'] = 'ko'
                retour['1'] = tp
            else:
                cont = True
                tp['Maj'] = 'ok'
                retour['1'] = tp
                if not ExisteDeja(client_ref):
                    if makelicence2 == None:
                        tp['Maj'] = 'ko'
                        retour['1'] = tp
                    else:
                        makelicence2.miseajour(client_ref)
                        tp['Maj'] = 'ok'
                        retour['1'] = tp
                        cont = True
                        print '*** creation & mise a jour'
                else:
                    print '*** existe deja'
        if cont:
            try:
                VerifLicence()
                chargement_licence_melissa()
                chargement_licence_OP()
                if ServerDQEMail is not None:
                    ServerDQEMail.chargement_domaine()
                if ServerDQETel is not None:
                    ServerDQETel.chargement_basetel()
                tp['Maj'] = 'ok'
            except:
                tp['Maj'] = 'ko'

            retour['1'] = tp
        try:
            cherrypy.response.headers['Access-Control-Allow-Origin'] = '*'
            cherrypy.response.headers['Server'] = 'DQE Server'
            if _json_acao != '':
                cherrypy.response.headers['Content-Type'] = 'APPLICATION/JSON'
        except:
            pass

        return simplejson.dumps(retour)

    index.exposed = True


def handle_error():
    cherrypy.response.status = 204
    cherrypy.response.body = ['{}']


def distance_tri(mots1, mots2):
    if len(mots1) > len(mots2):
        mem = mots2[:]
        mots2 = mots1[:]
        mots1 = mem[:]
    p = 0
    mots1.reverse()
    mots2.reverse()
    debut = 0
    fl_t = False
    for i in range(0, len(mots1)):
        t1 = mots1[i]
        lt1 = len(t1)
        p1 = lt1
        if debut <= i:
            debut = i
        fl_t = False
        for j in range(debut, len(mots1)):
            t2 = mots2[j]
            lt2 = len(t2)
            if lt1 < lt2:
                if t1 == t2[0:lt1]:
                    p1 = 0
                    debut = j
                    fl_t = True
                    break
                else:
                    p1 = editdist.distance(t1, t2)
                    if p1 * 1.0 / lt1 >= 0.9:
                        p1 = p1 * 1.0 / lt1
                        debut = j
                        break
            elif t1 == t2[0:lt1]:
                p1 = 0
                debut = j
                break
            else:
                p1 = editdist.distance(t1, t2)
                if p1 * 1.0 / lt2 >= 0.9:
                    p1 = p1 * 1.0 / lt2
                    debut = j
                    break

        p += p1

    return p1


class RacineServeur(object):
    _cp_config = {'request.error_response': handle_error}
    echo = TestConnect()
    CP = RecupCp()
    CPFRA = RecupOldFRA()
    ADR = RecupAdr()
    NUM = RecupNum()
    COMPL = RecupCompl()
    SINGLE = RecupLibre()
    SINGLEV2 = RecupLibreV2()
    NormaliseADR = NormalisationTaille()
    LATLG = RecupGeo()
    VERIF = VerifInter()
    MAILSUGGEST = SuggestMail()
    MAIL = RecupMail()
    MAILNET = RecupMailNet()
    MAILNOM = RecupMailNom()
    TEL = VerifTel()
    RNVP2 = VerifRnvp('RNVP2')
    BLACK = BlackListe()
    RNVP = VerifRnvp('RNVP')
    CPINTER = RecupCpInter()
    ADRINTER = RecupAdrInter()
    SINGLEINTER = RecupLibreInter()
    MAJLICENCE = RecupLicence()


def distanceIP(lat1, lon1, lat2, lon2):
    return math.acos(math.sin(math.radians(lat1)) * math.sin(math.radians(lat2)) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.cos(math.radians(lon1 - lon2))) * 6371


def RecupAdrLatLon(Adresse, Lat, Lon, DistAdr = 0.01, NBMax = 30, Pays = 'FRA'):
    la1 = '%2.2f' % float(Lat)
    lo1 = '%2.2f' % float(Lon)
    p1 = Lat.index('.')
    p2 = Lon.index('.')
    la2 = (Lat + '00')[0:p1 + 3]
    lo2 = (Lon + '00')[0:p2 + 3]
    coord = []
    if geoaddress.has_key(la1 + '_' + lo1):
        coord = geoaddress[la1 + '_' + lo1]
    if geoaddress.has_key(la2 + '_' + lo2):
        if coord == []:
            coord = geoaddress[la2 + '_' + lo2]
        else:
            r1 = geoaddress[la2 + '_' + lo2]
            for i in r1:
                if i not in coord:
                    coord.append(i)

    res1 = []
    res2 = []
    res3 = []
    tab_idlocalite = []
    for i in coord:
        if i[1] not in tab_idlocalite:
            tab_idlocalite.append(i[1])
        if Adresse == '' and _mapgeocodage.has_key(i[0]):
            re = _mapgeocodage[i[0]]
            fl = False
            for j in re:
                if fl:
                    a = distanceIP(float(Lat), float(Lon), float(j[0]), float(j[1]))
                    if a < DistAdr:
                        if [a, num] + i not in res3:
                            res3.append([a, num] + i)
                    elif a < DistAdr * 5:
                        if [a, num] + i not in res2:
                            res2.append([a, num] + i)
                        elif a < DistAdr * 10:
                            if [a, num] + i not in res3:
                                res3.append([a, num] + i)
                else:
                    num = j[:]
                fl = not fl

    if Adresse == '':
        if res3 != []:
            resu = res3
        elif res2 != []:
            resu = res2
        elif res1 != []:
            resu = res1
        else:
            resu = []
        resu.sort()
        retour = {}
        cpt = 1
        mem_idlocalite = ''
        mem_idvoie = ''
        re1 = [['',
          '',
          '',
          '']]
        re2 = ''
        for i in resu:
            num = i[1]
            idvoie = i[2]
            idlocalite = i[3]
            if mem_idlocalite != idlocalite:
                re1 = recherche_IDcp(idlocalite)
                mem_idlocalite = idlocalite
            if mem_idvoie != idvoie:
                try:
                    re2 = decode(adresse[str(int(idvoie))][0])
                except:
                    try:
                        re2 = decode(adresse[idvoie][0])
                    except:
                        re2 = ''

                mem_idvoie = idvoie
            re = {}
            re['CodePostal'] = re1[0][2]
            re['IDLocalite'] = idlocalite
            try:
                re['IDVoie'] = str(int(idvoie))
                re['CodeVoie'] = str(int(idvoie))
            except:
                re['IDVoie'] = idvoie
                re['CodeVoie'] = idvoie

            re['Instance'] = ''
            re['ListeNumero'] = ''
            re['Localite'] = re1[0][0].strip()
            re['Cedex'] = '0'
            if 'CEDEX' in re['Localite']:
                re['Cedex'] = '1'
            re['NbNumero'] = '1'
            re['Num'] = num
            re['Numero'] = num
            re['Pays'] = Pays
            re['Saisie'] = ''
            re['Voie'] = re2
            retour[str(cpt)] = re
            cpt += 1
            if cpt > NBMax:
                break

        return simplejson.dumps(retour)
    elif tab_idlocalite != []:
        return '-'.join(tab_idlocalite)
    else:
        return ''


def complete23(_tb, _av):
    addresu = []
    if len(_tb) >= 2:
        if len(_tb) > 3:
            r = [2, 3]
        else:
            r = [2]
        for i in r:
            for j in range(0, len(_tb)):
                if j + i <= len(_tb):
                    resu1 = _tb[j:j + i]
                    resu = ''
                    for k in resu1:
                        if k[0] not in 'AEUOIY':
                            resu += k[0]
                        else:
                            resu = ''
                            break

                    if resu != '':
                        if resu not in addresu:
                            addresu.append(resu)
                else:
                    break

    return addresu


_flag_cp234 = True
if _flag_init:
    if _pays in ['FRA', 'FR1']:
        print '  ** Initialisation traitement des bases **'
        initialise_vg(_pathinitial + 'International/' + _rep_pays + '/tables')
        initialise_structure(_pathinitial + 'International/' + _rep_pays + '/RN')
        mapville = {}
        mapville2 = {}
        mapville3 = {}
        mapcp = {}
        cpld_234 = {}
        if _flag_cp234:
            cp_234 = {}
        else:
            if os.path.isfile('International/' + _rep_pays + '/cp_test.dqe'):
                os.remove('International/' + _rep_pays + '/cp_test.dqe')
            cp_234 = shelve.open('International/' + _rep_pays + '/cp_test.dqe', 'c', protocol=2)
        print '--> Ouverture des bases'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_IDnum.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/cp_IDnum.dqe')
        mapcp = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_IDnum.dqe', 'c', protocol=_protocol)
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapville.dqe')
        cp_234_count = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_count.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/cp_count.dqe')
        cp_234_count = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_count.dqe', 'c', protocol=_protocol)
        cpld_234 = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cpld_234.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/cpld_234.dqe')
        cpld_234 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cpld_234.dqe', 'c', protocol=_protocol)
        cp_234U = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_234U.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/cp_234U.dqe')
        cp_234U = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_234U.dqe', 'c', protocol=_protocol)
        mapville = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapville.dqe')
        mapville = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapville.dqe', 'c', protocol=_protocol)
        mapville2 = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville2.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapville2.dqe')
        mapville2 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapville2.dqe', 'c', protocol=_protocol)
        mapville3 = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville3.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapville3.dqe')
        mapville3 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapville3.dqe', 'c', protocol=_protocol)
        print '--> Phase (1)'

        def MajVille(mindex, mcp, mcommune, mprovince, mtabcom, lieudit = ''):
            if ' CEDEX ' in mcommune:
                if not mapcp.has_key(mindex + '_' + mcommune):
                    mapcp[mindex + '_' + mcommune] = [mcp]
            ldcommune = mcommune + ' (LD. ' + lieudit + ')'
            if lieudit == '':
                for imt in mtabcom:
                    if imt == 'CEDEX':
                        break
                    elif len(imt) > 2:
                        try:
                            _simt = QSoundex.getKey(PhonexCdrVilleListe(imt))[0]
                            simt = str(_simt)
                        except:
                            simt = _simt.encode('utf-8')

                        if mapville2.has_key(simt):
                            if encode(mcommune) not in mapville2[simt]:
                                mapville2[simt] = mapville2[simt] + [encode(mcommune)]
                        else:
                            mapville2[simt] = [encode(mcommune)]

            else:
                for imt in mtabcom:
                    if imt == 'CEDEX':
                        break
                    elif len(imt) > 2:
                        try:
                            _simt = QSoundex.getKey(PhonexCdrVilleListe(imt))[0]
                            simt = str(_simt)
                        except:
                            simt = _simt.encode('utf-8')

                        if mapville2.has_key(simt):
                            if encode(ldcommune) not in mapville2[simt]:
                                mapville2[simt] = mapville2[simt] + [encode(ldcommune)]
                        else:
                            mapville2[simt] = [encode(ldcommune)]

                for imt in lieudit.split():
                    if imt == 'CEDEX':
                        break
                    elif len(imt) > 2:
                        try:
                            _simt = QSoundex.getKey(PhonexCdrVilleListe(imt))[0]
                            simt = str(_simt)
                        except:
                            simt = _simt.encode('utf-8')

                        if mapville2.has_key(simt):
                            if encode(ldcommune) not in mapville2[simt]:
                                mapville2[simt] = mapville2[simt] + [encode(ldcommune)]
                        else:
                            mapville2[simt] = [encode(ldcommune)]

            mem_mcommune = mcommune
            if lieudit == '':
                if ' CEDEX ' in mcommune + ' ':
                    _commune1 = mcommune[0:(mcommune + ' ').find(' CEDEX ')]
                    resu_commune = Combine(_commune1.translate(_trans, '').upper().split(), False, True)
                else:
                    resu_commune = Combine(mcommune.translate(_trans, '').upper().split(), False, True)
                for i in resu_commune:
                    resu_1 = ''
                    for j in i:
                        if resu_1 == '':
                            resu_1 = j
                        else:
                            resu_1 = resu_1 + ' ' + j

                    if mapville.has_key(resu_1):
                        fl_trouve = False
                        for j in mapville[resu_1]:
                            if decode(j[0]) == mcommune and j[1] == mindex and j[2] == mcp:
                                fl_trouve = True
                                break

                        if not fl_trouve:
                            mapville[resu_1] = mapville[resu_1] + [[encode(mcommune),
                              mindex,
                              _cp,
                              _province]]
                    else:
                        mapville[resu_1] = [[encode(mcommune),
                          mindex,
                          _cp,
                          _province]]
                    moit = int(len(resu_1) * 0.4)
                    while resu_1[moit] == ' ':
                        moit += 1

                    _fl_moit = moit
                    if moit > 3:
                        moit = 3
                    for i1 in range(moit, len(resu_1)):
                        _fl_fait = False
                        if i1 < _fl_moit:
                            if mapville3.has_key(resu_1[0:i1]):
                                _fl_fait = len(mapville3[resu_1[0:i1]]) < 40
                            else:
                                _fl_fait = True
                        if i1 >= _fl_moit or _fl_fait:
                            if mapville3.has_key(resu_1[0:i1]):
                                fl_trouve = False
                                for j in mapville3[resu_1[0:i1]]:
                                    if decode(j[0]) == mcommune and j[1] == mindex:
                                        fl_trouve = True
                                        break

                                if not fl_trouve:
                                    mapville3[resu_1[0:i1]] = mapville3[resu_1[0:i1]] + [[encode(mcommune),
                                      mindex,
                                      _cp,
                                      _province]]
                            else:
                                mapville3[resu_1[0:i1]] = [[encode(mcommune),
                                  mindex,
                                  _cp,
                                  _province]]

            else:
                if ' CEDEX ' in mcommune + ' ':
                    _commune1 = mcommune[0:(mcommune + ' ').find(' CEDEX ')]
                    resu_commune = Combine(_commune1.translate(_trans, '').upper().split(), False, True)
                else:
                    resu_commune = Combine(mcommune.translate(_trans, '').upper().split(), False, True)
                for i in resu_commune:
                    resu_1 = ''
                    for j in i:
                        if resu_1 == '':
                            resu_1 = j
                        else:
                            resu_1 = resu_1 + ' ' + j

                    if mapville.has_key(resu_1):
                        fl_trouve = False
                        for j in mapville[resu_1]:
                            if decode(j[0]) == ldcommune and j[1] == mindex:
                                fl_trouve = True
                                break

                        if not fl_trouve:
                            mapville[resu_1] = mapville[resu_1] + [[encode(ldcommune),
                              mindex,
                              _cp,
                              _province]]
                    else:
                        mapville[resu_1] = [[encode(ldcommune),
                          mindex,
                          _cp,
                          _province]]
                    moit = int(len(resu_1) * 0.4)
                    while resu_1[moit] == ' ':
                        moit += 1

                    _fl_moit = moit
                    if moit > 3:
                        moit = 3
                    for i1 in range(moit, len(resu_1)):
                        _fl_fait = False
                        if i1 < _fl_moit:
                            if mapville3.has_key(resu_1[0:i1]):
                                _fl_fait = len(mapville3[resu_1[0:i1]]) < 40
                            else:
                                _fl_fait = True
                        if i1 >= _fl_moit or _fl_fait:
                            if mapville3.has_key(resu_1[0:i1]):
                                fl_trouve = False
                                for j in mapville3[resu_1[0:i1]]:
                                    if decode(j[0]) == ldcommune and j[1] == mindex:
                                        fl_trouve = True
                                        break

                                if not fl_trouve:
                                    mapville3[resu_1[0:i1]] = mapville3[resu_1[0:i1]] + [[encode(ldcommune),
                                      mindex,
                                      _cp,
                                      _province]]
                            else:
                                mapville3[resu_1[0:i1]] = [[encode(ldcommune),
                                  mindex,
                                  _cp,
                                  _province]]

                resu_commune2 = Combine(lieudit.translate(_trans, '').upper().split(), False, True)
                for i in resu_commune2:
                    resu_1 = ''
                    for j in i:
                        if resu_1 == '':
                            resu_1 = j
                        else:
                            resu_1 = resu_1 + ' ' + j

                    if mapville.has_key(resu_1):
                        fl_trouve = False
                        for j in mapville[resu_1]:
                            if decode(j[0]) == ldcommune and j[1] == mindex:
                                fl_trouve = True
                                break

                        if not fl_trouve:
                            mapville[resu_1] = mapville[resu_1] + [[encode(ldcommune),
                              mindex,
                              _cp,
                              _province]]
                    else:
                        mapville[resu_1] = [[encode(ldcommune),
                          mindex,
                          _cp,
                          _province]]
                    moit = int(len(resu_1) * 0.4)
                    while resu_1[moit] == ' ':
                        moit += 1

                    _fl_moit = moit
                    if moit > 3:
                        moit = 3
                    for i1 in range(moit, len(resu_1)):
                        _fl_fait = False
                        if i1 < _fl_moit:
                            if mapville3.has_key(resu_1[0:i1]):
                                _fl_fait = len(mapville3[resu_1[0:i1]]) < 40
                            else:
                                _fl_fait = True
                        if i1 >= _fl_moit or _fl_fait:
                            if mapville3.has_key(resu_1[0:i1]):
                                fl_trouve = False
                                for j in mapville3[resu_1[0:i1]]:
                                    if decode(j[0]) == ldcommune and j[1] == mindex:
                                        fl_trouve = True
                                        break

                                if not fl_trouve:
                                    mapville3[resu_1[0:i1]] = mapville3[resu_1[0:i1]] + [[encode(ldcommune),
                                      mindex,
                                      _cp,
                                      _province]]
                            else:
                                mapville3[resu_1[0:i1]] = [[encode(ldcommune),
                                  mindex,
                                  _cp,
                                  _province]]

            if lieudit == '':
                tbb = mcommune.split()
                if len(tbb) > 1:
                    resu_11 = ''.join(tbb)
                    moit = int(len(resu_11) * 0.4)
                    while resu_11[moit] == ' ':
                        moit += 1

                    _fl_moit = moit
                    if moit > 3:
                        moit = 3
                    for i1 in range(moit, len(resu_11)):
                        _fl_fait = False
                        if i1 < _fl_moit:
                            if mapville3.has_key(resu_11[0:i1]):
                                _fl_fait = len(mapville3[resu_11[0:i1]]) < 40
                            else:
                                _fl_fait = True
                        if i1 >= _fl_moit or _fl_fait:
                            if mapville3.has_key(resu_11[0:i1]):
                                fl_trouve = False
                                for j in mapville3[resu_11[0:i1]]:
                                    if j[1] == mindex:
                                        fl_trouve = True
                                        break

                                if not fl_trouve:
                                    mapville3[resu_11[0:i1]] = mapville3[resu_11[0:i1]] + [[encode(mcommune),
                                      mindex,
                                      _cp,
                                      _province]]
                            else:
                                mapville3[resu_11[0:i1]] = [[encode(mcommune),
                                  mindex,
                                  _cp,
                                  _province]]

                if len(resu_commune) == 1 and len(resu_commune[0]) == 1:
                    resu_1 = resu_commune[0][0]
                    if len(resu_1) > 2 and resu_1[-1] in 'AEIOU' and resu_1[-2] not in 'AEIOU':
                        resu_1 = resu_1[0:-1]
                        if mapville.has_key(resu_1):
                            fl_trouve = False
                            for j in mapville[resu_1]:
                                if j[1] == mindex:
                                    fl_trouve = True
                                    break

                            if not fl_trouve:
                                mapville[resu_1] = mapville[resu_1] + [[encode(mcommune),
                                  mindex,
                                  _cp,
                                  _province]]
                        else:
                            mapville[resu_1] = [[encode(mcommune),
                              mindex,
                              _cp,
                              _province]]
                if mcommune == mem_mcommune or not mtabcom[-1].isdigit():
                    Fait = True
                elif cp_234.has_key(_cp):
                    Fait = [encode(mcommune), mindex, _province] not in cp_234[_cp]
                else:
                    mem_mcommune = mcommune
                    Fait = True
                if Fait:
                    if cp_234.has_key(_cp):
                        if [encode(mem_mcommune), mindex, _province] not in cp_234[_cp]:
                            cp_234[_cp].append([encode(mem_mcommune), mindex, _province])
                    else:
                        cp_234[_cp] = [[encode(mem_mcommune), mindex, _province]]
                    cp_234U[mindex] = [_cp,
                     encode(mem_mcommune),
                     _province,
                     '',
                     '']
                    if cp_234.has_key(_cp[0:_lenDepartement]):
                        if cp_234[_cp[0:_lenDepartement]][-1][1] != mindex or [encode(mem_mcommune),
                         mindex,
                         _cp,
                         _province] not in cp_234[_cp[0:_lenDepartement]]:
                            cp_234[_cp[0:_lenDepartement]].append([encode(mem_mcommune),
                             mindex,
                             _cp,
                             _province])
                    else:
                        cp_234[_cp[0:_lenDepartement]] = [[encode(mem_mcommune),
                          mindex,
                          _cp,
                          _province]]
            else:
                tbb = mcommune.split()
                if len(tbb) > 1:
                    resu_11 = ''.join(tbb)
                    moit = int(len(resu_11) * 0.4)
                    while resu_11[moit] == ' ':
                        moit += 1

                    _fl_moit = moit
                    if moit > 3:
                        moit = 3
                    for i1 in range(moit, len(resu_11)):
                        _fl_fait = False
                        if i1 < _fl_moit:
                            if mapville3.has_key(resu_11[0:i1]):
                                _fl_fait = len(mapville3[resu_11[0:i1]]) < 40
                            else:
                                _fl_fait = True
                        if i1 >= _fl_moit or _fl_fait:
                            if mapville3.has_key(resu_11[0:i1]):
                                fl_trouve = False
                                for j in mapville3[resu_11[0:i1]]:
                                    if j[1] == mindex:
                                        fl_trouve = True
                                        break

                                if not fl_trouve:
                                    mapville3[resu_11[0:i1]] = mapville3[resu_11[0:i1]] + [[encode(ldcommune),
                                      mindex,
                                      _cp,
                                      _province]]
                            else:
                                mapville3[resu_11[0:i1]] = [[encode(ldcommune),
                                  mindex,
                                  _cp,
                                  _province]]

                if len(resu_commune) == 1 and len(resu_commune[0]) == 1:
                    resu_1 = resu_commune[0][0]
                    if len(resu_1) > 2 and resu_1[-1] in 'AEIOU' and resu_1[-2] not in 'AEIOU':
                        resu_1 = resu_1[0:-1]
                        if mapville.has_key(resu_1):
                            fl_trouve = False
                            for j in mapville[resu_1]:
                                if j[1] == mindex:
                                    fl_trouve = True
                                    break

                            if not fl_trouve:
                                mapville[resu_1] = mapville[resu_1] + [[encode(ldcommune),
                                  mindex,
                                  _cp,
                                  _province]]
                        else:
                            mapville[resu_1] = [[encode(ldcommune),
                              mindex,
                              _cp,
                              _province]]
                if mcommune == mem_mcommune or not mtabcom[-1].isdigit():
                    Fait = True
                elif cp_234.has_key(_cp):
                    Fait = [encode(ldcommune), mindex, _province] not in cp_234[_cp]
                else:
                    mem_mcommune = ldcommune
                    Fait = True
                if Fait:
                    if cp_234.has_key(_cp):
                        if [encode(ldcommune), mindex, _province] not in cp_234[_cp]:
                            cp_234[_cp].append([encode(ldcommune), mindex, _province])
                    else:
                        cp_234[_cp] = [[encode(ldcommune), mindex, _province]]
                    cp_234U[mindex] = [_cp,
                     encode(mcommune),
                     _province,
                     '',
                     '']
                    if cp_234.has_key(_cp[0:_lenDepartement]):
                        if cp_234[_cp[0:_lenDepartement]][-1][1] != mindex or [encode(ldcommune),
                         mindex,
                         _cp,
                         _province] not in cp_234[_cp[0:_lenDepartement]]:
                            cp_234[_cp[0:_lenDepartement]].append([encode(ldcommune),
                             mindex,
                             _cp,
                             _province])
                    else:
                        cp_234[_cp[0:_lenDepartement]] = [[encode(ldcommune),
                          mindex,
                          _cp,
                          _province]]
                tbb = lieudit.split()
                if len(tbb) > 1:
                    resu_11 = ''.join(tbb)
                    moit = int(len(resu_11) * 0.4)
                    while resu_11[moit] == ' ':
                        moit += 1

                    _fl_moit = moit
                    if moit > 3:
                        moit = 3
                    for i1 in range(moit, len(resu_11)):
                        _fl_fait = False
                        if i1 < _fl_moit:
                            if mapville3.has_key(resu_11[0:i1]):
                                _fl_fait = len(mapville3[resu_11[0:i1]]) < 40
                            else:
                                _fl_fait = True
                        if i1 >= _fl_moit or _fl_fait:
                            if mapville3.has_key(resu_11[0:i1]):
                                fl_trouve = False
                                for j in mapville3[resu_11[0:i1]]:
                                    if j[1] == mindex:
                                        fl_trouve = True
                                        break

                                if not fl_trouve:
                                    mapville3[resu_11[0:i1]] = mapville3[resu_11[0:i1]] + [[encode(ldcommune),
                                      mindex,
                                      _cp,
                                      _province]]
                            else:
                                mapville3[resu_11[0:i1]] = [[encode(ldcommune),
                                  mindex,
                                  _cp,
                                  _province]]

                if len(resu_commune2) == 1 and len(resu_commune2[0]) == 1:
                    resu_1 = resu_commune2[0][0]
                    if len(resu_1) > 2 and resu_1[-1] in 'AEIOU' and resu_1[-2] not in 'AEIOU':
                        resu_1 = resu_1[0:-1]
                        if mapville.has_key(resu_1):
                            fl_trouve = False
                            for j in mapville[resu_1]:
                                if j[1] == mindex:
                                    fl_trouve = True
                                    break

                            if not fl_trouve:
                                mapville[resu_1] = mapville[resu_1] + [[encode(ldcommune),
                                  mindex,
                                  _cp,
                                  _province]]
                        else:
                            mapville[resu_1] = [[encode(ldcommune),
                              mindex,
                              _cp,
                              _province]]
                if cp_234.has_key(_cp):
                    Fait = [encode(ldcommune), mindex, _province] not in cp_234[_cp]
                else:
                    mem_mcommune = ldcommune
                    Fait = True
                if Fait:
                    if cp_234.has_key(_cp):
                        if [encode(ldcommune), mindex, _province] not in cp_234[_cp]:
                            cp_234[_cp].append([encode(ldcommune), mindex, _province])
                    else:
                        cp_234[_cp] = [[encode(ldcommune), mindex, _province]]
                    if cp_234.has_key(_cp[0:_lenDepartement]):
                        if cp_234[_cp[0:_lenDepartement]][-1][1] != mindex:
                            if [encode(ldcommune),
                             mindex,
                             _cp,
                             _province] not in cp_234[_cp[0:_lenDepartement]]:
                                cp_234[_cp[0:_lenDepartement]].append([encode(ldcommune),
                                 mindex,
                                 _cp,
                                 _province])
                    else:
                        cp_234[_cp[0:_lenDepartement]] = [[encode(ldcommune),
                          mindex,
                          _cp,
                          _province]]
            return True


        genere_lieu_dit(_pathinitial + 'International/' + _rep_pays + '/' + _hexaposte, _pathinitial + 'International/' + _rep_pays + '/mapville4.dqe')
        popin = []
        mindex = ''
        _cpt = 1
        _cpta = 1
        _comptage = 1
        _mem_libcommune = ''
        for filtre in [1, 2]:
            ff = open(_pathinitial + 'International/' + _rep_pays + '/' + _hexaposte)
            _fl = False
            mindex = ''
            for line in ff:
                if _fl:
                    if filtre == 1 and (line[50] == 'M' or line[50] == 'C'):
                        __index0 = line[0:6].strip()
                        __cp = line[89:94]
                        __commune = line[94:126].strip()
                        __lieudit = line[51:89].strip()
                        if __index0 != '' and __lieudit == '':
                            if cpld_234.has_key(__index0 + '_'):
                                if not [__commune, __lieudit, __cp] in cpld_234[__index0 + '_']:
                                    cpld_234[__index0 + '_'] = cpld_234[__index0 + '_'] + [[__commune, __lieudit, __cp]]
                            else:
                                cpld_234[__index0 + '_'] = [[__commune, __lieudit, __cp]]
                    if filtre == 1 and line[50] == 'M' or filtre == 2 and line[50] != 'M':
                        _cpt += 1
                        if _cpta > 100:
                            print (' Villes=', 100 * _comptage, time.strftime('%H:%M:%S', time.localtime()))
                            _comptage = _comptage + 1
                            _cpta = 1
                        else:
                            _cpta = _cpta + 1
                        _index = line[6:11].strip()
                        _index0 = line[0:6].strip()
                        _distrib = line[50:51]
                        _cp = line[89:94]
                        _groupe = line[49:50]
                        _commune = line[94:126].strip()
                        _libcommune = _commune
                        _lieudit = line[51:89].strip()
                        if filtre == 1 and _lieudit != '' and _commune != _lieudit:
                            if cpld_234.has_key(_index + '_' + _cp):
                                cpld_234[_index + '_' + _cp] = cpld_234[_index + '_' + _cp] + [[_commune, _lieudit]]
                            else:
                                cpld_234[_index + '_' + _cp] = [[_commune, _lieudit]]
                            if _index0 != '':
                                if cpld_234.has_key(_index0):
                                    if not [_commune, _lieudit, _cp] in cpld_234[_index0]:
                                        cpld_234[_index0] = cpld_234[_index0] + [[_commune, _lieudit, _cp]]
                                else:
                                    cpld_234[_index0] = [[_commune, _lieudit, _cp]]
                        if _lieudit != '' and _libcommune == _lieudit and line[50] == 'M':
                            _lieudit = ''
                        _province = '*'
                        if _libcommune != '':
                            if line[50] == 'M':
                                _libcommune = _commune
                            elif _libcommune.split()[-1].isdigit():
                                _libcommune = ' '.join(_libcommune.split()[0:-1])
                        if _distrib != '' and _index != '':
                            if _libcommune + _lieudit != '':
                                if _mem_libcommune != _libcommune + _lieudit:
                                    mindex = _index
                                    mcp = _cp
                                    mcommune = _libcommune
                                    mprovince = _province
                                    mtabcom = _libcommune.split()
                                    if mcp[0:2] == mindex[0:2]:
                                        if _lieudit == '':
                                            MajVille(mindex, mcp, mcommune, mprovince, mtabcom)
                                        else:
                                            MajVille(mindex, mcp, mcommune, mprovince, mtabcom, _lieudit)
                                    _mem_libcommune = _libcommune + _lieudit
                            mindex = _index
                            mcp = _cp
                            mcommune = _commune
                            mprovince = _province
                            mtabcom = mcommune.split()
                            if _lieudit == '':
                                MajVille(mindex, mcp, mcommune, mprovince, mtabcom)
                        elif _distrib == 'C' or _distrib == 'R':
                            if True:
                                if cp_234.has_key(_cp):
                                    if not [encode(_commune), mindex, _province] in cp_234[_cp]:
                                        cp_234[_cp].append([encode(_commune), mindex, _province])
                                else:
                                    cp_234[_cp] = [[encode(_commune), mindex, _province]]
                                if _lieudit != '':
                                    if cp_234.has_key(_cp):
                                        if not [encode(_commune + ' (LD. ' + _lieudit + ')'), mindex, _province] in cp_234[_cp]:
                                            cp_234[_cp].append([encode(_commune + ' (LD. ' + _lieudit + ')'), mindex, _province])
                                    else:
                                        cp_234[_cp] = [[encode(_commune + ' (LD. ' + _lieudit + ')'), mindex, _province]]
                                    cp_234U[mindex] = [_cp,
                                     encode(_commune),
                                     _province,
                                     _lieudit,
                                     '']
                            else:
                                cp_234[_cp] = [['*T*', mcp]]
                        if _lieudit != '':
                            lieudit_NV(_commune, _lieudit, _cp, _index)
                    elif filtre == 1 and line[50] == 'C':
                        _index = line[6:11].strip()
                        _index0 = line[0:6].strip()
                        _cp = line[89:94]
                        _commune = line[94:126].strip()
                        _lieudit = line[51:89].strip()
                        if _lieudit != '' and _commune != _lieudit:
                            if cpld_234.has_key(_index + '_' + _cp):
                                cpld_234[_index + '_' + _cp] = cpld_234[_index + '_' + _cp] + [[_commune, _lieudit]]
                            else:
                                cpld_234[_index + '_' + _cp] = [[_commune, _lieudit]]
                            if _index0 != '':
                                if cpld_234.has_key(_index0):
                                    if not [_commune, _lieudit, _cp] in cpld_234[_index0]:
                                        cpld_234[_index0] = cpld_234[_index0] + [[_commune, _lieudit, _cp]]
                                else:
                                    cpld_234[_index0] = [[_commune, _lieudit, _cp]]
                else:
                    _fl = True

            ff.close()

    else:
        initialise_vg(_pathinitial + 'International/' + _rep_pays + '/tables')
        initialise_structure(_pathinitial + 'International/' + _rep_pays + '/RN')
        mapville = {}
        mapville2 = {}
        mapville3 = {}
        mapcp = {}
        cp_234 = {}
        if _pays in ['GBR', 'KOR', 'PRT'] or _flag_extend:
            if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_extend.dqe'):
                os.remove(_pathinitial + 'International/' + _rep_pays + '/cp_extend.dqe')
            cp_234 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_extend.dqe', 'c', protocol=_protocol)
        cp_234_count = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_count.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/cp_count.dqe')
        cp_234_count = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_count.dqe', 'c', protocol=_protocol)
        cp_234U = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_234U.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/cp_234U.dqe')
        cp_234U = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_234U.dqe', 'c', protocol=_protocol)
        cpld_234 = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cpld_234.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/cpld_234.dqe')
        cpld_234 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cpld_234.dqe', 'c', protocol=_protocol)
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapville.dqe')
        mapville = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapville.dqe', 'c', protocol=_protocol)
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville2.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapville2.dqe')
        mapville2 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapville2.dqe', 'c', protocol=_protocol)
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapville3.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapville3.dqe')
        mapville3 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapville3.dqe', 'c', protocol=_protocol)
        ff = open(_pathinitial + 'International/' + _rep_pays + '/' + _hexaposte)
        _fl = False
        popin = []
        mindex = ''
        _cpt = 1
        _cpta = 1
        _comptage = 1
        for line in ff:
            if _fl:
                _cpt += 1
                if _cpta > 10:
                    print (' Villes=', 10 * _comptage, time.strftime('%H:%M:%S', time.localtime()))
                    _comptage = _comptage + 1
                    _cpta = 1
                else:
                    _cpta = _cpta + 1
                if not _flag_upu:
                    _extension = ''
                    _index = line[0:5]
                    _distrib = line[5:6]
                    _cp = line[44:49]
                    _cp_c = _cp
                    _groupe = line[49:50]
                    _commune = line[50:87].strip()
                    _province = '*'
                    _souscommune = ''
                else:
                    line1 = line.split('\n')[0].split('\t')
                    _extension = ''
                    _index = line1[0]
                    _distrib = '*'
                    _cp = line1[2].replace('-', '').replace(' ', '').replace('/', '').replace('_', '')
                    _cp_c = _cp.replace('-', '').replace(' ', '').replace('/', '').replace('_', '')
                    _groupe = ''
                    if len(line1) > 5:
                        _commune = line1[5].strip()
                        if _commune == '':
                            _commune = line1[1]
                        _province = line1[3].strip()
                        _souscommune = line1[4].strip()
                    else:
                        _commune = line1[3].strip()
                        if _commune == '':
                            _commune = line1[1]
                        _souscommune = ''
                        _province = ''
                        if len(line1) > 4:
                            _souscommune = line1[1].strip()
                            _province = line1[4].strip()
                if _distrib == '*' or _distrib == ' ':
                    mindex = _index
                    mcp = _cp
                    mcommune = _commune
                    msouscommune = _souscommune
                    mprovince = _province
                    mtabcom = mcommune.split()
                    if len(mtabcom) > 1 and mtabcom[-1].isdigit():
                        _extension = ' ' + mtabcom[-1]
                        mtabcom.pop(-1)
                        mcommune = ' '.join(mtabcom)
                        _commune = mcommune
                    if _souscommune != '':
                        mtabsouscom = msouscommune.split()
                        if len(mtabsouscom) > 1 and mtabsouscom[-1].isdigit():
                            _extension2 = ' ' + mtabsouscom[-1]
                            mtabsouscom.pop(-1)
                            msouscommune = ' '.join(mtabsouscom)
                            _souscommune = msouscommune
                        for i in mtabsouscom:
                            if not i in mtabcom:
                                mtabcom.append(i)

                    if not _pays in ['GBR', 'KOR', 'JPN']:
                        if not '_' in mindex:
                            for imt in mtabcom:
                                if len(imt) > 2:
                                    try:
                                        _simt = QSoundex.getKey(PhonexCdrVilleListe(imt))[0]
                                        simt = str(_simt)
                                    except:
                                        try:
                                            simt = _simt.encode('utf-8')
                                        except:
                                            simt = _simt.encode('iso-8859-1')

                                    if mapville2.has_key(simt):
                                        if not encode(mcommune) in mapville2[simt]:
                                            mapville2[simt] = mapville2[simt] + [encode(mcommune)]
                                    else:
                                        mapville2[simt] = [encode(mcommune)]

                            try:
                                _tt = traduitMAJUTF8(_commune)
                                resu_commune = Combine(_tt.split(), False, True)
                            except Exception as e:
                                _tt = traduitMAJUTF8(_commune)
                                resu_commune = Combine(_tt.split(), False, True)

                            if _souscommune != '':
                                resu_souscommune = Combine(traduitMAJUTF8(_souscommune).split(), False, True)
                                for _sc in resu_souscommune:
                                    if not _sc in resu_commune:
                                        resu_commune.append(_sc)

                            for i in resu_commune:
                                resu_1 = ''
                                for j in i:
                                    if resu_1 == '':
                                        resu_1 = j
                                    else:
                                        resu_1 = resu_1 + ' ' + j

                                try:
                                    fl1 = mapville.has_key(resu_1)
                                    _resu_1 = resu_1
                                except:
                                    _resu_1 = resu_1.encode('utf-8')
                                    fl1 = mapville.has_key(_resu_1)

                                if fl1:
                                    fl_trouve = False
                                    for j in mapville[_resu_1]:
                                        if j[1] == mindex:
                                            fl_trouve = True
                                            break

                                    if not fl_trouve:
                                        if ';' in _cp:
                                            mp = mapville[_resu_1]
                                            for _i_cp in range(0, len(_lcp)):
                                                if _i_cp == 0:
                                                    mp.append([encode(mcommune),
                                                     mindex,
                                                     _lcp[_i_cp],
                                                     _province,
                                                     _souscommune,
                                                     _extension])
                                                else:
                                                    mp.append([encode(mcommune),
                                                     mindex + '$' + str(_i_cp),
                                                     _lcp[_i_cp],
                                                     _province,
                                                     _souscommune,
                                                     _extension])

                                            mapville[_resu_1] = mp
                                        else:
                                            mapville[_resu_1] = mapville[_resu_1] + [[encode(mcommune),
                                              mindex,
                                              _cp,
                                              _province,
                                              _souscommune,
                                              _extension]]
                                elif ';' in _cp:
                                    _lcp = _cp.split(';')
                                    mp = []
                                    for _i_cp in range(0, len(_lcp)):
                                        if _i_cp == 0:
                                            mp.append([encode(mcommune),
                                             mindex,
                                             _lcp[_i_cp],
                                             _province,
                                             _souscommune,
                                             _extension])
                                        else:
                                            mp.append([encode(mcommune),
                                             mindex + '$' + str(_i_cp),
                                             _lcp[_i_cp],
                                             _province,
                                             _souscommune,
                                             _extension])

                                    mapville[_resu_1] = mp
                                else:
                                    mapville[_resu_1] = [[encode(mcommune),
                                      mindex,
                                      _cp,
                                      _province,
                                      _souscommune,
                                      _extension]]
                                moit = int(len(_resu_1) * 0.4)
                                while moit < len(resu_1) and resu_1[moit] == ' ':
                                    moit += 1

                                for i1 in range(moit, len(_resu_1)):
                                    if mapville3.has_key(_resu_1[0:i1]):
                                        fl_trouve = False
                                        for j in mapville3[_resu_1[0:i1]]:
                                            if j[1] == mindex:
                                                fl_trouve = True
                                                break

                                        if not fl_trouve:
                                            if ';' in _cp:
                                                mp = mapville3[_resu_1[0:i1]]
                                                for _i_cp in range(0, len(_lcp)):
                                                    if _i_cp == 0:
                                                        mp.append([encode(mcommune),
                                                         mindex,
                                                         _lcp[_i_cp],
                                                         _province,
                                                         _souscommune,
                                                         _extension])
                                                    else:
                                                        mp.append([encode(mcommune),
                                                         mindex + '$' + str(_i_cp),
                                                         _lcp[_i_cp],
                                                         _province,
                                                         _souscommune,
                                                         _extension])

                                                mapville3[_resu_1[0:i1]] = mp
                                            else:
                                                mapville3[_resu_1[0:i1]] = mapville3[_resu_1[0:i1]] + [[encode(mcommune),
                                                  mindex,
                                                  _cp,
                                                  _province,
                                                  _souscommune,
                                                  _extension]]
                                    elif ';' in _cp:
                                        mp = []
                                        for _i_cp in range(0, len(_lcp)):
                                            if _i_cp == 0:
                                                mp.append([encode(mcommune),
                                                 mindex,
                                                 _lcp[_i_cp],
                                                 _province,
                                                 _souscommune,
                                                 _extension])
                                            else:
                                                mp.append([encode(mcommune),
                                                 mindex + '$' + str(_i_cp),
                                                 _lcp[_i_cp],
                                                 _province,
                                                 _souscommune,
                                                 _extension])

                                        mapville3[_resu_1[0:i1]] = mp
                                    else:
                                        mapville3[_resu_1[0:i1]] = [[encode(mcommune),
                                          mindex,
                                          _cp,
                                          _province,
                                          _souscommune,
                                          _extension]]

                            if len(resu_commune) == 1 and len(resu_commune[0]) == 1:
                                resu_1 = resu_commune[0][0]
                                if len(resu_1) > 2 and resu_1[-1] in 'AEIOU' and not resu_1[-2] in 'AEIOU':
                                    resu_1 = resu_1[0:-1]
                                    try:
                                        fl1 = mapville.has_key(resu_1)
                                        _resu_1 = resu_1
                                    except:
                                        _resu_1 = resu_1.encode('utf-8')
                                        fl1 = mapville.has_key(_resu_1)

                                    if fl1:
                                        fl_trouve = False
                                        for j in mapville[_resu_1]:
                                            if j[1] == mindex:
                                                fl_trouve = True
                                                break

                                        if not fl_trouve:
                                            if ';' in _cp:
                                                mp = mapville[_resu_1]
                                                for _i_cp in range(0, len(_lcp)):
                                                    if _i_cp == 0:
                                                        mp.append([encode(mcommune),
                                                         mindex,
                                                         _lcp[_i_cp],
                                                         _province,
                                                         _souscommune,
                                                         _extension])
                                                    else:
                                                        mp.append([encode(mcommune),
                                                         mindex + '$' + str(_i_cp),
                                                         _lcp[_i_cp],
                                                         _province,
                                                         _souscommune,
                                                         _extension])

                                                mapville[_resu_1] = mp
                                            else:
                                                mapville[_resu_1] = mapville[_resu_1] + [[encode(mcommune),
                                                  mindex,
                                                  _cp,
                                                  _province,
                                                  _souscommune,
                                                  _extension]]
                                    elif ';' in _cp:
                                        mp = []
                                        for _i_cp in range(0, len(_lcp)):
                                            if _i_cp == 0:
                                                mp.append([encode(mcommune),
                                                 mindex,
                                                 _lcp[_i_cp],
                                                 _province,
                                                 _souscommune,
                                                 _extension])
                                            else:
                                                mp.append([encode(mcommune),
                                                 mindex + '$' + str(_i_cp),
                                                 _lcp[_i_cp],
                                                 _province,
                                                 _souscommune,
                                                 _extension])

                                        mapville[_resu_1] = mp
                                    else:
                                        mapville[_resu_1] = [[encode(mcommune),
                                          mindex,
                                          _cp,
                                          _province,
                                          _souscommune,
                                          _extension]]
                    if not '_' in mindex:
                        if ';' in _cp_c:
                            _t_cp_c = _cp_c.split(';')
                            for _i_cp in range(0, len(_t_cp_c)):
                                if _t_cp_c[_i_cp] != '':
                                    if _i_cp == 0:
                                        _mindex = mindex
                                    else:
                                        _mindex = mindex + '$' + str(_i_cp)
                                    if _t_cp_c[_i_cp] in cp_234:
                                        if not [encode(mcommune),
                                         _mindex,
                                         _province,
                                         _souscommune,
                                         _extension] in cp_234[_t_cp_c[_i_cp]]:
                                            cp_234[_t_cp_c[_i_cp]] = cp_234[_t_cp_c[_i_cp]] + [[encode(mcommune),
                                              _mindex,
                                              _province,
                                              _souscommune,
                                              _extension]]
                                    else:
                                        cp_234[_t_cp_c[_i_cp]] = [[encode(mcommune),
                                          _mindex,
                                          _province,
                                          _souscommune,
                                          _extension]]
                                    cp_234U[_mindex] = [_t_cp_c[_i_cp],
                                     encode(mcommune),
                                     _province,
                                     _souscommune,
                                     _extension]

                        else:
                            if cp_234.has_key(_cp_c):
                                if not [encode(mcommune),
                                 mindex,
                                 _province,
                                 _souscommune,
                                 _extension] in cp_234[_cp_c]:
                                    cp_234[_cp_c] = cp_234[_cp_c] + [[encode(mcommune),
                                      mindex,
                                      _province,
                                      _souscommune,
                                      _extension]]
                            else:
                                cp_234[_cp_c] = [[encode(mcommune),
                                  mindex,
                                  _province,
                                  _souscommune,
                                  _extension]]
                            cp_234U[mindex] = [_cp_c,
                             encode(mcommune),
                             _province,
                             _souscommune,
                             _extension]
                    if not _pays in ['GBR', 'ARE', 'SAU']:
                        if not '_' in mindex:
                            if ';' in _cp_c:
                                _t_cp_c = _cp_c.split(';')
                                for _i_cp in range(0, len(_t_cp_c)):
                                    if _t_cp_c[_i_cp] != '':
                                        if _i_cp == 0:
                                            _mindex = mindex
                                        else:
                                            _mindex = mindex + '$' + str(_i_cp)
                                        if _t_cp_c[_i_cp][0:_lenDepartement] in cp_234:
                                            if cp_234[_t_cp_c[_i_cp][0:_lenDepartement]][-1][1] != _mindex:
                                                if not [encode(mcommune),
                                                 _mindex,
                                                 _t_cp_c[_i_cp],
                                                 _province,
                                                 _souscommune,
                                                 _extension] in cp_234[_t_cp_c[_i_cp][0:_lenDepartement]]:
                                                    cp_234[_t_cp_c[_i_cp][0:_lenDepartement]] = cp_234[_t_cp_c[_i_cp][0:_lenDepartement]] + [[encode(mcommune),
                                                      _mindex,
                                                      _t_cp_c[_i_cp],
                                                      _province,
                                                      _souscommune,
                                                      _extension]]
                                        else:
                                            cp_234[_t_cp_c[_i_cp][0:_lenDepartement]] = [[encode(mcommune),
                                              _mindex,
                                              _t_cp_c[_i_cp],
                                              _province,
                                              _souscommune,
                                              _extension]]

                            elif cp_234.has_key(_cp_c[0:_lenDepartement]):
                                if cp_234[_cp_c[0:_lenDepartement]][-1][1] != mindex:
                                    if not [encode(mcommune),
                                     mindex,
                                     _cp,
                                     _province,
                                     _souscommune,
                                     _extension] in cp_234[_cp_c[0:_lenDepartement]]:
                                        cp_234[_cp_c[0:_lenDepartement]] = cp_234[_cp_c[0:_lenDepartement]] + [[encode(mcommune),
                                          mindex,
                                          _cp_c,
                                          _province,
                                          _souscommune,
                                          _extension]]
                            else:
                                cp_234[_cp_c[0:_lenDepartement]] = [[encode(mcommune),
                                  mindex,
                                  _cp_c,
                                  _province,
                                  _souscommune,
                                  _extension]]
                elif _distrib == 'C' or _distrib == 'X':
                    if _distrib == 'C':
                        if not '_' in mindex:
                            if cp_234.has_key(_cp_c):
                                if not [encode(_commune),
                                 mindex,
                                 _province,
                                 _souscommune] in cp_234[_cp_c]:
                                    cp_234[_cp_c] = cp_234[_cp_c] + [[encode(_commune),
                                      mindex,
                                      _province,
                                      _souscommune,
                                      _extension]]
                            else:
                                cp_234[_cp_c] = [[encode(_commune),
                                  mindex,
                                  _province,
                                  _souscommune,
                                  _extension]]
                        cp_234U[mindex] = [_cp_c,
                         encode(_commune),
                         _province,
                         _souscommune,
                         _extension]
                    elif not '_' in mindex:
                        cp_234[_cp_c] = [['*T*', mcp]]
            else:
                _fl = True

        ff.close()
    if False:
        print 'ici 1'
        if not _pays in ['GBR', 'KOR', 'PRT']:
            f = open(_pathinitial + 'International/' + _rep_pays + '/cp_234.dqe', 'wb')
            pickle.dump(cp_234, f)
            f.close()
        else:
            cp_234.close()
        mapville.close()
        mapville2.close()
        mapville3.close()
        cpld_234.close()
        subprocess.Popen('taskkill /F /T /PID %i' % os.getpid(), shell=True)
    if True:
        print '** Etapes 2: Adresses **'
        comptefichier = 1
        comptemaxlignes = 1
        paramfic = 300000
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse1_1.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse1_1.dqe')
        sh_mapadresse = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse1_1.dqe', 'c', protocol=_protocol)
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse2_1.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse2_1.dqe')
        adresse = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse2_1.dqe', 'c', protocol=_protocol)
        _mapnouveaunom = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse4.dqe'):
            _mapnouveaunom = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse4.dqe')
        else:
            _mapnouveaunom = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse4.dqe', 'c', protocol=_protocol)
        _mapbornes = {}
        mapcherchetypevoie = {}
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3d.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse3d.dqe')
            mapcherchetypevoie = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3d.dqe')
        else:
            mapcherchetypevoie = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3d.dqe', 'c', protocol=_protocol)
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3e.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse3e.dqe')
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3e2.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse3e2.dqe')
        _cnv = open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3e2.dqe', 'wb')
        _cnvOld = open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3e.dqe', 'wb')
        cp_234_ladr = {}
        if _cns == 0:
            if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/cp_ladr.dqe'):
                os.remove(_pathinitial + 'International/' + _rep_pays + '/cp_ladr.dqe')
            cp_234_ladr = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_ladr.dqe', 'c')
        changenomvoie = {}
        changenomvoieOld = {}
        ff = open(_pathinitial + 'International/' + _rep_pays + '/' + _hexavia)
        i = 0
        iadresse = 0
        _nbfichier = 0
        _comptage = 1
        _cpt = 1
        _mem = '*'
        _mem1 = '*'
        _fl = False
        _memindex = 0
        _memcherche = '*'
        tablocalecherchecp = {}
        _tbindex = {}
        _tbmemindex = '*'
        w_fichier = {}
        while True:
            line = ff.readline()
            if len(line) == 0:
                break
            if _fl and (line[0:1] == 'V' or line[0:1] == 'W'):
                comptemaxlignes += 1
                if _cpt > 1000:
                    print ('fichier=',
                     _nbfichier,
                     ' comptage=',
                     1000 * _comptage,
                     time.strftime('%H:%M:%S', time.localtime()))
                    _comptage = _comptage + 1
                    _cpt = 1
                else:
                    _cpt = _cpt + 1
                _index0 = ''
                if not _flag_upu:
                    if line[0] == 'L':
                        _index0 = line[1:7].strip()
                        _tbmemindex = _index
                        _tbindex = {}
                        w_fichier = {}
                    elif line[0] == 'V':
                        _index = line[7:12]
                        _index0 = line[1:7].strip()
                        _tbindex[line[12:20]] = [line[1:7], line[109:114]]
                    elif line[0] == 'W':
                        _index = line[7:12]
                        _nom = line[60:92].strip()
                        _w = 'W' + str(int(line[20:28]))
                        if _w in changenomvoie:
                            if not str(int(line[12:20])) in changenomvoie[_w]:
                                changenomvoie[_w].append(str(int(line[12:20])))
                        else:
                            changenomvoie[_w] = [str(int(line[12:20]))]
                        if not _w in changenomvoieOld:
                            changenomvoieOld[_w] = str(int(line[12:20]))
                        if line[12:20] in _tbindex:
                            _index0 = _tbindex[line[12:20]][0].strip()
                else:
                    _upd_line = line.split('\n')[0].split('\t')
                    _index = _upd_line[1]
                if _index != _memindex:
                    if _memindex != 0:
                        for mi in mapadresse.keys():
                            try:
                                sh_mapadresse[str(mi)] = mapadresse[str(mi)]
                            except Exception as e:
                                pass

                        mapadresse = {}
                    _memindex = _index
                    if comptemaxlignes > paramfic:
                        comptemaxlignes = 1
                        sh_mapadresse.close()
                        adresse.close()
                        comptefichier += 1
                        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse1_' + str(comptefichier) + '.dqe'):
                            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse1_' + str(comptefichier) + '.dqe')
                        sh_mapadresse = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse1_' + str(comptefichier) + '.dqe', 'c', protocol=_protocol)
                        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse2_' + str(comptefichier) + '.dqe'):
                            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse2_' + str(comptefichier) + '.dqe')
                        adresse = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse2_' + str(comptefichier) + '.dqe', 'c', protocol=_protocol)
                tb = []
                l_voie = ''
                l_adresse = ''
                l_cp = ''
                l_motdirecteur = ''
                l_ville = ''
                l_motdirecteur_1 = ''
                l_entreprise = ''
                _index0 = ''
                _indexINSEE = ''
                if not _flag_upu:
                    _index0 = line[1:7].strip()
                    line1 = line[60:92].strip()
                    l_cp = line[109:114]
                    if line[0] == 'V':
                        iadresse = str(int(line[12:20]))
                    elif line[0] == 'W':
                        iadresse = 'W' + str(int(line[20:28]))
                        l_cp = _tbindex[line[12:20]][1]
                    l_cp_c = l_cp
                    l_motdirecteur = line[40:60].strip()
                    tb = line1.split()
                    if len(tb) > 2:
                        l_motdirecteur_1 = tb[-2]
                    if _voie_transfo.has_key(tb[0]):
                        l_voie = _voie_transfo[tb[0]]
                        _b = len(l_voie.split())
                        l_adresse = ' '.join(tb[_b:])
                    else:
                        l_adresse = line1.strip()
                else:
                    l_adresse = _upd_line[3].strip().upper().replace("'", ' ')
                    mem_adresse = _upd_line[3]
                    if len(_upd_line) >= 7:
                        _index0 = _upd_line[6].strip()
                    if l_adresse != '' and ''.join(l_adresse.split(',')).strip() != '':
                        if _pays in ['GBR', 'USA']:
                            try:
                                l_motdirecteur = l_adresse.split(',')[-1].split()[-1]
                            except:
                                l_motdirecteur = ''

                        elif ',' in l_adresse:
                            if _pays in ['DEU', 'AUT']:
                                l_motdirecteur = l_adresse.split(',')[0].split()[0]
                            else:
                                l_motdirecteur = l_adresse.split(',')[0].split()[-1]
                            l1 = l_adresse.split(',')
                            for il1 in range(0, len(l1)):
                                l1[il1] = l1[il1].strip()

                            if len(l1) == 2:
                                l_adresse = l1[1] + ' ' + l1[0]
                            elif len(l1) > 2:
                                l1.reverse()
                                l_adresse = ' '.join(l1)
                        elif _pays in ['KOR',
                         'JPN',
                         'TAI',
                         'CHN']:
                            l_a = l_adresse.split()
                            if l_a[0] >= '0' and l_a[0][0] <= '9':
                                if len(l_a) > 1:
                                    l_motdirecteur = l_a[1]
                                else:
                                    l_motdirecteur = l_a[0]
                            else:
                                l_motdirecteur = l_a[0]
                        elif _pays in ['DEU', 'AUT']:
                            v = l_adresse.upper().replace('.', ' ').replace('-', ' ').replace('_', ' ').strip()
                            v1 = v.split()
                            if len(v1) > 1:
                                if v1[-1] in _suppdernier:
                                    l_motdirecteur = v1[-2]
                                else:
                                    l_motdirecteur = v1[-1]
                            else:
                                l_motdirecteur = v1[-1]
                        else:
                            l_motdirecteur = l_adresse.replace('-', ' ').replace('_', ' ').split()[-1]
                    else:
                        l_motdirecteur = ''
                    iadresse = str(_upd_line[2])
                    l_voie = _upd_line[4]
                    l_cp = _upd_line[5].replace('-', '').replace(' ', '').replace('/', '').replace('_', '')
                    l_cp_c = l_cp
                    l_ville = _upd_line[1]
                    if l_voie == '' and l_adresse != '':
                        l1 = l_adresse.split()
                        if _voie_decoupe.has_key(l1[0].upper()):
                            l_voie = l1[0]
                            l_adresse = ' '.join(l1[1:])
                            if l_adresse == '':
                                l_adresse = l_voie
                                l_voie = ''
                if _pays != 'FRA':
                    if len(l_motdirecteur.upper()) > 2:
                        _lmd = convertUTFISO.convertUTF8(l_motdirecteur.upper())
                        cleadresse = '_' + _index + '_' + QSoundex.getKey(_lmd)[0]
                        if mapadresse.has_key(cleadresse):
                            try:
                                vii = mapadresse[cleadresse].index([iadresse, _index])
                            except:
                                mapadresse[cleadresse][0] = mapadresse[cleadresse][0] + 1
                                mapadresse[cleadresse].insert(1, [iadresse, _index])

                        else:
                            mapadresse[cleadresse] = [1, [iadresse, _index]]
                    if l_adresse != '':
                        try:
                            _lmd = convertUTFISO.convertUTF8(l_adresse.upper())
                            l_adr_ns = convertUTFISO.supprimerSeparateur(_lmd)
                            cleadresse = '_' + _index + '_' + l_adr_ns[0:2] + '_' + l_adr_ns[-2:]
                            if mapadresse.has_key(cleadresse):
                                try:
                                    vii = mapadresse[cleadresse].index([iadresse, _index])
                                except:
                                    mapadresse[cleadresse][0] = mapadresse[cleadresse][0] + 1
                                    mapadresse[cleadresse].insert(1, [iadresse, _index])

                            else:
                                mapadresse[cleadresse] = [1, [iadresse, _index]]
                        except:
                            pass

                if l_adresse != '' and ''.join(l_adresse.split(',')).strip() != '':
                    l_adresse_mem = l_adresse[:]
                    l_adresse = MajChiffres(l_adresse)
                    finadrs = Combine(l_adresse.upper().split(), _flag_no_rnvp_init)
                    finadrs_md = Combine(l_motdirecteur.upper().split(), _flag_no_rnvp_init)
                    for finadr in finadrs_md:
                        cleadresse = _index + '_'
                        for motfin in finadr:
                            cleadresse = cleadresse + motfin

                        if mapadresse.has_key(cleadresse):
                            try:
                                vii = mapadresse[cleadresse].index(iadresse)
                            except:
                                mapadresse[cleadresse][0] = mapadresse[cleadresse][0] + 1
                                mapadresse[cleadresse].insert(1, iadresse)

                        else:
                            mapadresse[cleadresse] = [1, iadresse]

                    for finadr in finadrs:
                        if finadr != ['']:
                            cleadresse = _index + '_' + ''.join(finadr)
                            if mapadresse.has_key(cleadresse):
                                _u1 = mapadresse[cleadresse][0]
                                if _cns != 0 and _u1 >= _cns:
                                    if _u1 == _cns:
                                        mapadresse[cleadresse] = [_cns + 1]
                                    else:
                                        mapadresse[cleadresse][0] = mapadresse[cleadresse][0] + 1
                                else:
                                    try:
                                        vii = mapadresse[cleadresse].index(iadresse)
                                    except:
                                        mapadresse[cleadresse][0] = mapadresse[cleadresse][0] + 1
                                        mapadresse[cleadresse].append(iadresse)

                            else:
                                mapadresse[cleadresse] = [1, iadresse]

                    l_adresse = l_adresse_mem[:]
                    _a = ''
                    _a = convertUTFISO.convertUTF8(l_motdirecteur).upper()
                    try:
                        _a = convertUTFISO.convertUTF8(l_motdirecteur).encode('iso-8859-1').upper()
                        l_motdirecteur_nv = _a.translate(maps_voyelles, '').replace(' ', '')
                    except:
                        _a = convertUTFISO.convertUTF8(l_motdirecteur).upper()
                        try:
                            l_motdirecteur_nv = _a.translate(maps_voyelles).replace(' ', '')
                        except:
                            l_motdirecteur_nv = _a.replace(' ', '')

                    if len(l_motdirecteur_nv) >= 2:
                        finadrs = Combine(l_motdirecteur_nv.split(), _flag_no_rnvp_init)
                        finadrs_md = Combine(l_motdirecteur_nv.split(), _flag_no_rnvp_init)
                        for finadr in finadrs_md:
                            cleadresse = _index + '_'
                            for motfin in finadr:
                                cleadresse = cleadresse + motfin

                            if mapadresse.has_key(cleadresse):
                                try:
                                    vii = mapadresse[cleadresse].index(iadresse)
                                except:
                                    mapadresse[cleadresse][0] = mapadresse[cleadresse][0] + 1
                                    mapadresse[cleadresse].insert(1, iadresse)

                            else:
                                mapadresse[cleadresse] = [1, iadresse]

                    if l_motdirecteur_1 != '' and l_motdirecteur_1 in _articles_debutmot:
                        l_adresse = MajChiffres(l_adresse)
                        finadrs = Combine(l_adresse.replace(' ', '').upper().split(), _flag_no_rnvp_init)
                        finadrs_md = Combine((l_motdirecteur_1 + l_motdirecteur).upper().split(), _flag_no_rnvp_init)
                        for finadr in finadrs_md:
                            cleadresse = _index + '_'
                            for motfin in finadr:
                                cleadresse = cleadresse + motfin

                            if mapadresse.has_key(cleadresse):
                                try:
                                    vii = mapadresse[cleadresse].index(iadresse)
                                except:
                                    mapadresse[cleadresse][0] = mapadresse[cleadresse][0] + 1
                                    mapadresse[cleadresse].insert(1, iadresse)

                            else:
                                mapadresse[cleadresse] = [1, iadresse]

                        for finadr in finadrs:
                            cleadresse = _index + '_'
                            for motfin in finadr:
                                cleadresse = cleadresse + motfin

                            if mapadresse.has_key(cleadresse):
                                if _cns != 0 and mapadresse[cleadresse][0] >= _cns:
                                    if mapadresse[cleadresse][0] == _cns:
                                        mapadresse[cleadresse] = [_cns + 1]
                                    else:
                                        mapadresse[cleadresse][0] = mapadresse[cleadresse][0] + 1
                                else:
                                    try:
                                        vii = mapadresse[cleadresse].index(iadresse)
                                    except:
                                        mapadresse[cleadresse][0] = mapadresse[cleadresse][0] + 1
                                        mapadresse[cleadresse].append(iadresse)

                            else:
                                mapadresse[cleadresse] = [1, iadresse]

                        l_adresse = l_adresse_mem[:]
                    if _memcherche != _index:
                        if _memcherche != '*':
                            for i_mc_1 in tablocalecherchecp.keys():
                                if len(tablocalecherchecp[i_mc_1]) <= 25:
                                    mapcherchetypevoie[i_mc_1] = tablocalecherchecp[i_mc_1]

                            tablocalecherchecp = {}
                        _memcherche = _index
                    try:
                        _mc_1 = line1.split()
                        _mc_1.pop(-1)
                        _mc_1 = ' '.join(_mc_1)
                    except:
                        _mc_1 = ''

                    if _mc_1 != '':
                        for i_mc_1 in range(2, len(_mc_1) + 1):
                            _mc_2 = _index + '_' + _mc_1[0:i_mc_1]
                            if tablocalecherchecp.has_key(_mc_2):
                                tablocalecherchecp[_mc_2].append(iadresse)
                            else:
                                tablocalecherchecp[_mc_2] = [iadresse]

                if l_voie != '':
                    l_voie = l_voie + ' '
                if _pays in ['GBR', 'USA']:
                    if not _flag_upu:
                        ll = l_adresse.split(',')
                    else:
                        ll = mem_adresse.split(',')
                    ll[-1] = (ll[-1] + ' ' + l_voie).strip()
                    mm = encode(','.join(ll))
                elif not _flag_upu:
                    mm = encode(l_voie + l_adresse)
                else:
                    mm = encode(mem_adresse)
                if not adresse.has_key(str(iadresse)):
                    adresse[str(iadresse)] = [mm, l_cp, _index0]
                elif _mapnouveaunom.has_key(str(iadresse)):
                    flag_ajnn = True
                    for inn in _mapnouveaunom[str(iadresse)]:
                        if inn == mm:
                            flag_ajnn = False
                            break

                    if flag_ajnn:
                        _mapnouveaunom[str(iadresse)] = [mm] + _mapnouveaunom[str(iadresse)][:]
                else:
                    _mapnouveaunom[str(iadresse)] = [mm]
                if _cns == 0:
                    if _index in cp_234_ladr:
                        if len(cp_234_ladr[_index]) < 100:
                            if not iadresse in cp_234_ladr[_index]:
                                cp_234_ladr[_index] = cp_234_ladr[_index] + [iadresse]
                    else:
                        cp_234_ladr[_index] = [iadresse]
                if not cp_234_count.has_key(l_cp_c):
                    cp_234_count[l_cp_c] = [[iadresse, l_ville]]
                elif cp_234_count[l_cp_c][0] != '*':
                    if len(cp_234_count[l_cp_c]) == _lenCompteur:
                        cp_234_count[l_cp_c] = ['*']
                    elif '_' in iadresse:
                        _v1 = iadresse[0:iadresse.index('_')]
                        _tr = False
                        _j = 0
                        for _i in cp_234_count[l_cp_c]:
                            if not '_' in _i[1]:
                                if _i[0] == _v1:
                                    _tr = True
                                    cp_234_count[l_cp_c] = cp_234_count[l_cp_c][0:_j + 1] + [[iadresse, l_ville]] + cp_234_count[l_cp_c][_j + 1:]
                                    break
                            _j += 1

                        if not _tr:
                            cp_234_count[l_cp_c] = cp_234_count[l_cp_c] + [[iadresse, l_ville]]
                    else:
                        cp_234_count[l_cp_c] = cp_234_count[l_cp_c] + [[iadresse, l_ville]]
                if _index != '':
                    if not cp_234_count.has_key('i' + _index):
                        cp_234_count['i' + _index] = [[iadresse, l_ville]]
                    elif cp_234_count['i' + _index][0] != '*':
                        if len(cp_234_count['i' + _index]) == _lenCompteur:
                            cp_234_count['i' + _index] = ['*']
                        elif '_' in iadresse:
                            _v1 = iadresse[0:iadresse.index('_')]
                            _tr = False
                            _j = 0
                            for _i in cp_234_count['i' + _index]:
                                if not '_' in _i[1]:
                                    if _i[0] == _v1:
                                        _tr = True
                                        cp_234_count['i' + _index] = cp_234_count['i' + _index][0:_j + 1] + [[iadresse, l_ville]] + cp_234_count['i' + _index][_j + 1:]
                                        break
                                _j += 1

                            if not _tr:
                                cp_234_count['i' + _index] = cp_234_count['i' + _index] + [[iadresse, l_ville]]
                        else:
                            cp_234_count['i' + _index] = cp_234_count['i' + _index] + [[iadresse, l_ville]]
            else:
                _fl = True

        ff.close()
        if not _pays in ['GBR', 'KOR', 'PRT']:
            if _flag_cp234:
                f = open(_pathinitial + 'International/' + _rep_pays + '/cp_234.dqe', 'wb')
                pickle.dump(cp_234, f)
                f.close()
            else:
                _cp_234 = {}
                for i in cp_234.keys():
                    _cp_234[i] = cp_234[i]

                f = open(_pathinitial + 'International/' + _rep_pays + '/cp_234.dqe', 'wb')
                pickle.dump(_cp_234, f)
                f.close()
                cp_234.close()
                if os.path.isfile('International/' + _rep_pays + '/cp_test.dqe'):
                    os.remove('International/' + _rep_pays + '/cp_test.dqe')
        else:
            cp_234.close()
        if tablocalecherchecp != {}:
            for i_mc_1 in tablocalecherchecp.keys():
                if len(tablocalecherchecp[i_mc_1]) <= 10:
                    mapcherchetypevoie[i_mc_1] = tablocalecherchecp[i_mc_1]

            tablocalecherchecp = {}
        mapcherchetypevoie.close()
        mapville.close()
        mapville2.close()
        mapville3.close()
        cpld_234.close()
        cp_234U.close()
        if _cns == 0:
            cp_234_ladr.close()
        try:
            mapcp.close()
        except:
            mapcp = {}

        for mi in mapadresse.keys():
            sh_mapadresse[str(mi)] = mapadresse[mi]

        sh_mapadresse.close()
        adresse.close()
        print 'Debut phase Concatenation Adresse --> '
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse1.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse1.dqe')
        sh_mapadresse = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse1.dqe', 'c', protocol=_protocol)
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse2.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse2.dqe')
        adresse = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse2.dqe', 'c', protocol=_protocol)
        for i in range(1, comptefichier + 1):
            print ('transfert fichier: ', i)
            sh_mapadresse_mem = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse1_' + str(i) + '.dqe')
            adresse_mem = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse2_' + str(i) + '.dqe')
            for j in sh_mapadresse_mem.keys():
                sh_mapadresse[j] = sh_mapadresse_mem[j][:]

            for j in adresse_mem.keys():
                adresse[j] = adresse_mem[j][:]

            sh_mapadresse_mem.close()
            adresse_mem.close()
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse1_' + str(i) + '.dqe')
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse2_' + str(i) + '.dqe')

        sh_mapadresse.close()
        adresse.close()
        pickle.dump(changenomvoie, _cnv)
        _cnv.close()
        pickle.dump(changenomvoieOld, _cnvOld)
        _cnvOld.close()
        print '< -- Fin phase Concatenation Adresse'
        if _pays == 'FRA':
            print ' --> Bornes de la base'
            init_bornes(_pathinitial + 'International/' + _rep_pays + '/' + _hexavia, _pathinitial + 'International/' + _rep_pays + '/mapadresse4a.dqe')
            print ' <-- Fin des bornes de la base'
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse3.dqe')
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3a.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse3a.dqe')
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse3c.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse3c.dqe')
        _mapnumvoie = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3.dqe', 'c', protocol=_protocol)
        _mapnumvoiecle = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3a.dqe', 'c', protocol=_protocol)
        _mapnumvoiecp = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse3c.dqe', 'c', protocol=_protocol)
        mem = ''
        _fl_concatene_numero = False
        if _hexacle != '':
            print 'Traitement des numeros'
            if _hexaligne3 != '':
                initialisehexacle3(_pathinitial + 'International/' + _rep_pays + '/' + _hexaligne3, _pays)
            if _flag_upu:
                if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/geocodage.dqe'):
                    os.remove(_pathinitial + 'International/' + _rep_pays + '/geocodage.dqe')
                fw_geo = shelve.open(_pathinitial + 'International/' + _rep_pays + '/geocodage.dqe', 'c')
            ff = open(_pathinitial + 'International/' + _rep_pays + '/' + _hexacle)
            sk = 1
            ensemble = []
            numexcept = []
            tabcp = []
            vide = []
            nb = 1
            lq = 1
            table_geo = []
            table_geo_mem = ''
            for line in ff:
                if sk == 0:
                    nb = nb + 1
                    if nb == 1000000:
                        print ('lignes:', lq * 1000000)
                        lq = lq + 1
                        nb = 1
                    encode_cp = ''
                    encode_ville = ''
                    if not _flag_upu:
                        matricule = str(int(line[0:8]))
                        numero = line[8:12].strip()
                        extension = line[12:13].strip()
                        clegeo = line[23:33]
                        maj = line[33:34]
                        encode_cp = line[34:39].strip()
                        _mapnumvoiecle[matricule + '_' + numero + extension] = clegeo
                    else:
                        tb = line.split('\n')[0].split('\t')
                        if len(tb) >= 6:
                            if table_geo_mem != tb[0]:
                                if table_geo_mem != '':
                                    fw_geo[table_geo_mem] = table_geo
                                table_geo_mem = tb[0]
                                table_geo = []
                            if not tb[1] in table_geo:
                                table_geo.extend([tb[1], [tb[4], tb[5]]])
                        matricule = tb[0]
                        numero = tb[1].strip()
                        extension = ''
                        clegeo = ''
                        maj = ''
                        if len(tb) >= 3:
                            encode_cp = tb[2].strip()
                            if len(tb) >= 4:
                                encode_ville = tb[3].strip()
                        if encode_cp != '' and ('>' in encode_cp or '<' in encode_cp):
                            if '>' in encode_cp:
                                _num = numero
                                _ecp = encode_cp
                            else:
                                _num = ''
                                _ecp = ''
                            encode_cp = encode_cp.replace('>', ' ').replace('<', ' ')
                            if not cp_234_count.has_key(encode_cp):
                                cp_234_count[encode_cp] = [[matricule,
                                  encode_ville,
                                  _num,
                                  _ecp]]
                            elif not [matricule,
                             encode_ville,
                             _num,
                             _ecp] in cp_234_count[encode_cp]:
                                if len(cp_234_count[encode_cp]) < 100:
                                    cp_234_count[encode_cp] += [[matricule,
                                      encode_ville,
                                      _num,
                                      _ecp]]
                            if _ecp != '' and _num == '':
                                _ecp1 = _ecp.split('>')[0]
                                if cp_234_count.has_key(_ecp1):
                                    _cpc = cp_234_count[_ecp1]
                                    if [matricule, encode_ville] in _cpc:
                                        _i_cpc = _cpc.index([matricule, encode_ville])
                                        _cpc.pop(_i_cpc)
                                        _cpc += [[matricule,
                                          encode_ville,
                                          _num,
                                          _ecp]]
                                    else:
                                        _cpc += [[matricule,
                                          encode_ville,
                                          _num,
                                          _ecp]]
                                    cp_234_count[_ecp1] = _cpc
                    try:
                        idcl = str(int(matricule)) + '_' + numero + extension
                    except:
                        idcl = matricule + '_' + numero + extension

                    if mem != matricule:
                        if mem != '':
                            if ensemble != [] or numexcept != []:
                                res1 = MefNumVoie(ensemble)
                                resu = [[], numexcept[:]]
                                if res1 != []:
                                    if res1[1] != []:
                                        resu[1].extend(res1[1][:])
                                    resu[0].extend(res1[0][:])
                                if resu != [[], []]:
                                    _mapnumvoie[mem] = resu[:]
                                    if tabcp != []:
                                        fl_tcp = False
                                        fl_tcpmem = tabcp[0][1]
                                        for tcp in tabcp[1:]:
                                            if fl_tcpmem != tcp[1] or len(tcp) > 2 and tcp[2] != '' and tcp[2] != mem:
                                                _mapnumvoiecp[mem + '_'] = 1
                                                fl_tcp = True
                                                break

                                        if fl_tcp:
                                            for tcp in tabcp:
                                                if len(tcp) >= 3 and tcp[2] != '':
                                                    _mapnumvoiecp[mem + '_' + tcp[0]] = tcp[1:]
                                                else:
                                                    _mapnumvoiecp[mem + '_' + tcp[0]] = tcp[1][:]

                        mem = matricule
                        ensemble = []
                        numexcept = []
                        tabcp = []
                        vide = []
                    if numero != '':
                        if extension == '':
                            try:
                                if numero[0] == '[':
                                    numero = numero.replace('[', 'range(').replace('-', ',').replace(']', ')')
                                    ensemble += eval(numero)
                                else:
                                    ensemble.append(int(numero))
                            except:
                                numexcept.append(numero)

                        else:
                            numexcept.append(numero + extension)
                        if encode_cp != '':
                            tabcp.append([numero + extension, encode_cp, encode_ville])
                    else:
                        vide = tb[:]
                else:
                    sk -= 1
                    if '#MAJ#' in line:
                        _fl_concatene_numero = True
                        break

            if _flag_upu:
                if table_geo != []:
                    fw_geo[table_geo_mem] = table_geo
                fw_geo.close()
            ff.close()
        if mem != '':
            if ensemble != [] or numexcept != []:
                res1 = MefNumVoie(ensemble)
                resu = [[], numexcept[:]]
                if res1 != []:
                    if res1[1] != []:
                        resu[1].extend(res1[1][:])
                    resu[0].extend(res1[0][:])
                if resu != [[], []]:
                    _mapnumvoie[mem] = resu[:]
                    if tabcp != []:
                        fl_tcp = False
                        fl_tcpmem = tabcp[0][1]
                        for tcp in tabcp[1:]:
                            if fl_tcpmem != tcp[1]:
                                _mapnumvoiecp[mem + '_'] = 1
                                fl_tcp = True

                        if fl_tcp:
                            for tcp in tabcp:
                                if len(tcp) >= 3 and tcp[2] != '':
                                    _mapnumvoiecp[mem + '_' + tcp[0]] = tcp[1:]
                                else:
                                    _mapnumvoiecp[mem + '_' + tcp[0]] = tcp[1][:]

        _mapnumvoie.close()
        _mapnumvoiecp.close()
        _mapnumvoiecle.close()
        _mapnouveaunom.close()
        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/mapadresse5.dqe'):
            os.remove(_pathinitial + 'International/' + _rep_pays + '/mapadresse5.dqe')
        if _hexaprovince != '':
            try:
                CreeProvince(_hexaprovince)
            except:
                print 'pb province'

        majbaseld(_pathinitial + 'International/' + _rep_pays + '/' + _hexavia, _pathinitial + 'International/' + _rep_pays + '/mapville6.dqe')
        if _hexacedex != '':
            _cedexa = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse5.dqe', 'c', protocol=_protocol)
            adresse = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse2.dqe')
            ff = open(_pathinitial + 'International/' + _rep_pays + '/' + _hexacedex)
            _fl = False
            print '** Etape 4: Cedex **'
            while True:
                line = ff.readline()
                if len(line) == 0:
                    break
                if _fl:
                    if not _flag_upu:
                        c_matvoie = line[8:16]
                        c_cp = line[16:21]
                        c_ville = ''
                        c_raison = line[22:60].strip()
                        c_craison = line[60:98].strip()
                        c_complement = line[136:174].strip()
                        try:
                            c_numero = str(int(line[174:178]))
                        except:
                            c_numero = line[174:178]

                        c_numero += line[178]
                        c_voie = line[179:211].strip()
                        c_bp = ((line[211:231].strip() + ' ' + line[231:236].strip()).strip() + ' ' + line[236:268].strip()).strip()
                        c_cedex = line[268:273]
                        c_libellecedex = line[273:305].strip()
                        c_insee = line[305:310]
                        if _cedexa.has_key(c_cedex):
                            _cedexa[c_cedex] = _cedexa[c_cedex] + [[encode(c_matvoie),
                              encode(c_raison),
                              encode(c_craison),
                              encode(c_complement),
                              encode(c_numero),
                              encode(c_voie),
                              encode(c_bp),
                              encode(c_cp),
                              encode(c_libellecedex),
                              encode(c_insee)]]
                        else:
                            _cedexa[c_cedex] = [[encode(c_matvoie),
                              encode(c_raison),
                              encode(c_craison),
                              encode(c_complement),
                              encode(c_numero),
                              encode(c_voie),
                              encode(c_bp),
                              encode(c_cp),
                              encode(c_libellecedex),
                              encode(c_insee)]]
                    else:
                        line1 = line.split('\n')[0].split('\t')
                        c_matvoie = line1[0]
                        c_ville = line1[1]
                        c_cp = line1[4].replace('-', '').replace(' ', '').replace('/', '').replace('_', '')
                        cm = line1[3].strip()
                        c_voie = ''
                        c_raison = ''
                        c_craison = ''
                        c_complement = ''
                        if ',' in cm:
                            _cm = cm.split(',')
                            c_raison = _cm[0]
                            c_craison = _cm[1].strip()
                            c_voie = _cm[2].strip()
                        else:
                            c_raison = cm
                        if line1[6] != '':
                            c_numero = line1[6] + '-' + line1[7]
                        else:
                            c_numero = ''
                        c_bp = ''
                        c_cedex = c_cp
                        c_libellecedex = line1[5].strip()
                        c_insee = ''
                        c_province = line1[-1].strip()
                        if _cedexa.has_key(c_cedex):
                            _cedexa[c_cedex] = _cedexa[c_cedex] + [[encode(c_matvoie),
                              encode(c_raison),
                              encode(c_craison),
                              encode(c_complement),
                              encode(c_numero),
                              encode(c_voie),
                              encode(c_bp),
                              encode(c_cp),
                              encode(c_libellecedex),
                              encode(c_insee),
                              encode(c_province)]]
                        else:
                            _cedexa[c_cedex] = [[encode(c_matvoie),
                              encode(c_raison),
                              encode(c_craison),
                              encode(c_complement),
                              encode(c_numero),
                              encode(c_voie),
                              encode(c_bp),
                              encode(c_cp),
                              encode(c_libellecedex),
                              encode(c_insee),
                              encode(c_province)]]
                        adresse[c_matvoie] = [encode(c_raison),
                         encode(c_craison),
                         encode(c_complement),
                         encode(c_numero),
                         encode(c_voie),
                         encode(c_bp),
                         encode(c_cp),
                         encode(c_libellecedex),
                         encode(c_insee),
                         c_matvoie,
                         line1[1],
                         line1[2],
                         encode(c_province)]
                        if not cp_234_count.has_key(c_cp):
                            cp_234_count[c_cp] = [['_' + c_matvoie, c_ville]]
                        elif cp_234_count[c_cp][0] != '*':
                            cp_234_count[c_cp] = cp_234_count[c_cp] + [['_' + c_matvoie, c_ville]]
                        else:
                            cp_234_count[c_cp] = [['_' + c_matvoie, c_ville]]
                else:
                    _fl = True

            ff.close()
            _cedexa.close()
            adresse.close()
        cp_234_count.close()
        if _fl_concatene_numero:
            ff = open(_pathinitial + 'International/' + _rep_pays + '/' + _hexacle)
            lequel = 0
            print '*** Etape de Fusion ***'
            for line in ff:
                if line.strip() != '':
                    if '#RENAME' in line:
                        lequel = 1
                    elif '#MERGE_CP_COUNT' in line:
                        lequel = 2
                    elif lequel == 1:
                        tb = line.strip().split('->')
                        if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/' + tb[0]):
                            if os.path.isfile(_pathinitial + 'International/' + _rep_pays + '/' + tb[1]):
                                os.remove(_pathinitial + 'International/' + _rep_pays + '/' + tb[1])
                            print ('   -> copy ',
                             tb[0],
                             '->',
                             tb[1])
                            shutil.copy(_pathinitial + 'International/' + _rep_pays + '/' + tb[0], _pathinitial + 'International/' + _rep_pays + '/' + tb[1])
                    elif lequel == 2:
                        tb = line.strip()
                        print '   -> Debut Merge cp_coun'
                        cp_234_count_cpy = shelve.open(_pathinitial + 'International/' + _rep_pays + '/_cp_count.tri')
                        cp_234_count_dst = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cp_count.dqe')
                        for i in cp_234_count_cpy.keys():
                            if not i in cp_234_count_dst:
                                cp_234_count_dst[i] = cp_234_count_cpy[i]
                            else:
                                _cpc = cp_234_count_dst[i]
                                for j in cp_234_count_cpy[i]:
                                    if not j in _cpc:
                                        _cpc += j

                                cp_234_count_dst[i] = _cpc

                        cp_234_count_cpy.close()
                        cp_234_count_dst.close()

            ff.close()
        if _pays == 'FRA':
            cpld_234 = shelve.open(_pathinitial + 'International/' + _rep_pays + '/cpld_234.dqe')
            ff = open(_pathinitial + 'International/' + _rep_pays + '/' + _hexaposte)
            print 'Phase1: lieudit communes'
            for line in ff:
                if line.strip() != '' and line[50] in 'MC':
                    __index0 = line[0:6].strip()
                    __cp = line[89:94]
                    __commune = line[94:126].strip()
                    __lieudit = line[51:89].strip()
                    if __index0 != '' and (__lieudit == '' or line[50] == 'C'):
                        if cpld_234.has_key(__index0 + '_'):
                            if not [__commune, __lieudit, __cp] in cpld_234[__index0 + '_']:
                                cpld_234[__index0 + '_'] = cpld_234[__index0 + '_'] + [[__commune, __lieudit, __cp]]
                        else:
                            cpld_234[__index0 + '_'] = [[__commune, __lieudit, __cp]]

            ff.close()
            cpld_234.close()
            adresse = shelve.open(_pathinitial + 'International/' + _rep_pays + '/mapadresse2.dqe')
            ff = open(_pathinitial + 'International/' + _rep_pays + '/' + _hexavia)
            i = 0
            j = 0
            tabv = {}
            tabw = []
            print 'Phase2: Controle des V / W'
            for line in ff:
                if line.strip() != '' and line[0] in 'VW':
                    if line[0] == 'V':
                        tabv[int(line[12:20])] = line[1:7].strip()
                    else:
                        tabw.append(['W' + str(int(line[20:28])), int(line[12:20])])

            ff.close()
            print 'Phase3: Ajout des uniques dans W'
            for line in tabw:
                if line[1] in tabv:
                    _v = tabv[line[1]]
                    if line[0] in adresse:
                        _va = adresse[line[0]]
                        _va[2] = _v
                        adresse[line[0]] = _va

            adresse.close()
        print ('--- subprocess kill  ---', os.getpid())
        subprocess.Popen('taskkill /F /T /PID %i' % os.getpid(), shell=True)

def InitialiseParam(sysparams):
    global _tps_rep
    global _avec_voie
    global _acao
    global ip
    global requette
    global _Taille_adresse
    global _flag_dbmail
    global _urltampon
    global _flag_bodacc
    global _patholdinsee
    global _pays
    global _urllicence
    global _tps_max
    global _nomfichierlicence
    global port
    global _ipmail
    global _ipelfy
    global _json_acao
    global NomFichierLicence
    global _flag_recup_count_cp
    global _flag_format
    global _maxbufferlines
    _avec_voie = True
    for i in sysparams:
        if i.upper().find('-IP:') == 0:
            ip = i.split(':')[1]
        if i.upper().find('-EXTERNAL_RESPONSE:') == 0:
            print 'URL EXTERNE>' + ''.join(i.split(':')[1:]) + '/dqeadresse'
            soapexternal_url(':'.join(i.split(':')[1:]) + '/dqeadresse')
        if i.upper().find('-GEO_DEFAULT:') == 0:
            geo = i.split(':')
            _geoTab[geo[1]] = [geo[2], geo[3]]
        if i.upper().find('-FICHIERLICENCE:') == 0:
            _nomfichierlicence = i.split(':')[1]
        if i.upper().find('-REQUEST:') == 0:
            requette = int(i.split(':')[1])
        if i.upper().find('-PORT:') == 0:
            try:
                port = int(i.split(':')[1])
            except:
                port = 7794

        if i.upper().find('-DEBUG_FORMAT') == 0:
            _flag_format = True
        if i.upper().find('-NO_STREETINZIP') == 0:
            _avec_voie = False
        if i.upper().find('-LICENCE:') == 0:
            NomFichierLicence = i.split(':')[1]
        if i.upper().find('-MAXCOUNTLINES:') == 0:
            _maxbufferlines = int(i.split(':')[1])
        if i.upper().find('-PAYS:') == 0:
            _pays = i.split(':')[1]
        if i.upper().find('-TPSMAX:') == 0:
            _tps_max = int(i.split(':')[1])
        if i.upper().find('-TAILLEMAX:') == 0:
            _Taille_adresse = int(i.split(':')[1])
        if i.upper().find('-MAXREP:') == 0:
            _tps_rep = int(i.split(':')[1])
        if i.upper().find('-ACCESS_CONTROL_ALLOW_ORIGIN') == 0:
            if ':' not in i:
                _acao = '*'
            else:
                _acao = i.split(':')[1]
        if i.upper().find('-CONTENT_TYPE_JSON') == 0:
            _json_acao = 'APPLICATION/JSON'
        if i.upper().find('-URLTAMPON:') == 0:
            _urltampon = ':'.join(i.split(':')[1:])
            _urltampon = _urltampon.replace('\\', '/')
            if _urltampon[-1] != '/':
                _urltampon += '/'
        if i.upper().find('-URLLICENCE:') == 0:
            _urllicence = ':'.join(i.split(':')[1:])
            _urllicence = _urllicence.replace('\\', '/')
            if _urllicence[-1] != '/':
                _urllicence += '/'
        if i.upper().find('-BODACC') == 0:
            _flag_bodacc = True
        if i.upper().find('-IPMAIL:') == 0:
            ch = i.split(':')
            if len(ch) == 3:
                _ipmail = 'http://' + ch[1] + ':' + ch[2]
            else:
                _ipmail = 'http://' + ch[1]
        if i.upper().find('-DBMAIL') == 0:
            _flag_dbmail = True
        if i.upper().find('-IPELFY:') == 0:
            ch = i.split(':')
            _ipelfy = 'http://' + ':'.join(ch[1:])
        if i.upper().find('-IPRNVP:') == 0:
            ch = i.split(':')
            _ipelfy = 'http://' + ':'.join(ch[1:])
        if i.upper().find('-OLDINSEE:') == 0:
            ch = i.split(':')
            _patholdinsee = ':'.join(ch[1:])
        if i.upper().find('-COUNTCP:') == 0:
            ch = i.upper().split(':')
            _flag_recup_count_cp = ch[-1] not in ('FALSE', 'N', 'NO')

    VerifLicence()
    MiseAJourLicence(False)
    if Licence != None:
        print 'Nom Licence   : ' + Licence.client_name
        if type(Licence.client_ref).__name__ == 'list':
            print 'MultiLicences----'
            for i in Licence.client_ref:
                print ('   * Licence: ',
                 i[1],
                 ' Client:',
                 i[0],
                 '   Date de fin : %02d/%02d/%d' % (i[2][2], i[2][1], i[2][0]))

        else:
            print ('Licence Client: ', Licence.client_ref)
        datefin = Licence.exp_date
        datecomp = datetime.date.today().timetuple()
        print 'Date de fin : ' + '%02d/%02d/%d' % (datefin[2], datefin[1], datefin[0])
        if '%d%02d%02d' % (datecomp[0], datecomp[1], datecomp[2]) <= '%d%02d%02d' % (datefin[0], datefin[1], datefin[2]):
            print (' PAYS: ', _pays)
            print '--> Initialisation en cours... '
            try:
                print ('repertoire Tables:', _pathinitial + 'International/' + _rep_pays + '/tables')
                if not initialise_vg(_pathinitial + 'International/' + _rep_pays + '/tables'):
                    print 'Arret'
                    write_error('end', 'initialise_vg', 'serveur stoppe' + str(e))
                    exit()
                initialise_structure(_pathinitial + 'International/' + _rep_pays + '/RN')
                print 'Chargement Fin Tables : ' + _pays
                if not chargement(_pays):
                    print 'Arret'
                    write_error('end', 'chargement', 'serveur stoppe' + str(e))
                    exit()
                if ServerDQETel is not None:
                    print 'Chargement Telephone'
                    ServerDQETel.chargement_basetel()
                print 'Chargement Pays iso2 / iso3'
                chargement_pays_iso()
                print 'Chargement Licence International'
                chargement_licence_melissa()
                print 'Chargement Licence biteplan'
                chargement_licence_OP()
                if ServerDQEMail != None:
                    print 'chargement des nom de domaines'
                    ServerDQEMail.chargement_domaine()
                if ServerDQEMail != None:
                    print 'Lancement du serveur Email json'
                    ServerDQEMail.initsmtp()
                    print '--> SERVEUR MAIL PRET'
                    print '--> OK'
            except:
                print 'KO'

    return


if not _demo:
    if __name__ != '__main__':
        print '*** ok'
    elif _flag_rnvp:
        if 'IN_DESCRIPTION' in _traite_file and 'OUT_DESCRIPTION' in _traite_file and 'FILE' in _traite_file and os.path.isfile(_traite_file['FILE']):
            ff = open(_traite_file['FILE'])
            if 'OUTPUT' in _traite_file:
                ffw = _traite_file['OUTPUT']
            else:
                ffw = _traite_file['FILE'] + '.RNVP'
            fw = open(ffw, 'w')
            if 'SEP' in _traite_file:
                _sep = _traite_file['SEP']
            else:
                _sep = ';'
            Licence = 'AD001010'
            _in_description = _traite_file['IN_DESCRIPTION'].split(',')
            _out_description = _traite_file['OUT_DESCRIPTION'].split(',')
            RNVP2 = VerifRnvp('RNVP2')
            _pays = 'MAR'
            if not initialise_vg(_pathinitial + 'International/' + _rep_pays + '/tables'):
                print 'Arret'
                write_error('end', 'initialise_vg', 'serveur stoppe' + str(e))
                exit()
            initialise_structure(_pathinitial + 'International/' + _rep_pays + '/RN')
            VerifLicence()
            print '***********************************'
            print '*  RESTRUCTURATION NORMALISATION  *'
            print '*  VALIDATION POSTALE             *'
            print '*  (c) DQE-SOFTWARE  Version 2.1  *'
            print '***********************************'
            print ('* Pays       : ', _pays)
            print ('* Fichier IN : ', _traite_file['FILE'])
            print ('* Fichier OUT: ', ffw)
            print '* Separateur : "' + _sep + '"'
            print '\n\n*>>Chargement de la base en cours'
            print '<< Chargement effectue'
            chargement_licence_melissa()
            chargement_pays_iso()
            chargement_licence_OP()
            if not chargement(_pays):
                print 'Arret'
                write_error('end', 'chargement', 'serveur stoppe' + str(e))
                exit()
            Entete = True
            taille = 0
            print '\n\nDebut du traitement des fichiers:'
            for line in ff:
                tb = line.strip().split(_sep)
                if Entete:
                    Entete = False
                    taille = len(tb)
                    for i in _out_description:
                        tb.append('DQE_' + i)

                    fw.write(_sep.join(tb) + '\n')
                else:
                    ligne3 = ''
                    ligne4 = ''
                    ligne5 = ''
                    cp = ''
                    ville = ''
                    while len(tb) < taille:
                        tb.append('')

                    for j in _in_description:
                        t = j.upper().split(':')
                        lequel = int(t[1]) - 1
                        if t[0] == 'LIGNE3':
                            ligne3 = tb[lequel]
                        elif t[0] == 'LIGNE4':
                            ligne4 = tb[lequel]
                        elif t[0] == 'LIGNE5':
                            ligne5 = tb[lequel]
                        elif t[0] == 'CP':
                            cp = tb[lequel]
                        elif t[0] == 'VILLE':
                            ville = tb[lequel]

                    if ville != '' and cp == '':
                        cp = '00000'
                    evalue = '%s|%s|%s|%s|%s' % (ligne3,
                     ligne4,
                     ligne5,
                     cp,
                     ville)
                    resu = eval(RNVP2.index(_pays, evalue, Licence='AD001010'))
                    for i in _out_description:
                        if i.upper() in 'LIGNE2':
                            if resu != {} and 'Ligne2' in resu['1']:
                                tb.append(resu['1']['Ligne2'])
                            else:
                                tb.append('')
                        if i.upper() in 'LIGNE3':
                            if resu == {}:
                                tb.append('')
                            else:
                                tb.append(resu['1']['Complement'])
                        if i.upper() in 'LIGNE4':
                            if resu == {}:
                                tb.append('')
                            else:
                                tb.append((resu['1']['Numero'] + ' ' + resu['1']['TypeVoie'] + ' ' + resu['1']['Voie']).strip())
                        if i.upper() in 'LIGNE5':
                            if resu == {}:
                                tb.append('')
                            else:
                                tb.append(resu['1']['LieuDit'])
                        if i.upper() in 'CP':
                            if resu == {}:
                                tb.append('')
                            elif resu['1']['CodePostal'] == '00000':
                                tb.append('')
                            else:
                                tb.append(resu['1']['CodePostal'])
                        if i.upper() in 'VILLE':
                            if resu == {}:
                                tb.append('')
                            else:
                                tb.append(resu['1']['Localite'])
                        if i.upper() in 'NUMERO':
                            if resu == {}:
                                tb.append('')
                            else:
                                tb.append(resu['1']['Numero'])
                        if i.upper() in 'TYPEVOIE':
                            if resu == {}:
                                tb.append('')
                            else:
                                tb.append(resu['1']['TypeVoie'])
                        if i.upper() in 'VOIE':
                            if resu == {}:
                                tb.append('')
                            else:
                                tb.append(resu['1']['Voie'])
                        if i.upper() in 'ERREUR':
                            if resu == {}:
                                tb.append('')
                            else:
                                tb.append(resu['1']['DQECodeDetail'])
                        if i.upper() in 'LIBERREUR':
                            if resu == {}:
                                tb.append('')
                            else:
                                tb.append(resu['1']['DQELibErreur'])

                    fw.write(_sep.join(tb) + '\n')

            ff.close()
            fw.close()
            subprocess.Popen('taskkill /F /T /PID %i' % os.getpid(), shell=True)
        else:
            if not 'DESCRIPTION' in _traite_file:
                print '** erreur: Fichier Description Manquant **'
            if not 'FILE' in _traite_file:
                print '** erreur: Fichier Input Manquant **'
    elif not _flag_init:
        if __name__ == 'DQEAddressMatchV9':
            print 'Chargement en mode DEvELOPPEMENT'
            VerifLicence()
            MiseAJourLicence(False)
            print ('repertoire Tables:', _pathinitial + 'International/' + _rep_pays + '/tables')
            if not initialise_vg(_pathinitial + 'International/' + _rep_pays + '/tables'):
                print 'Arret'
                write_error('end', 'initialise_vg', 'serveur stoppe' + str(e))
                exit()
            initialise_structure(_pathinitial + 'International/' + _rep_pays + '/RN')
            print 'Chargement Fin Tables : ' + _pays
            if not chargement(_pays):
                print 'Arret'
                write_error('end', 'chargement', 'serveur stoppe' + str(e))
                exit()
            if ServerDQETel is not None:
                print 'Chargement Telephone'
                ServerDQETel.chargement_basetel()
            print 'Chargement Pays iso2 / iso3'
            chargement_pays_iso()
            print 'Chargement Licence International'
            chargement_licence_melissa()
            print 'Chargement Licence biteplan'
            chargement_licence_OP()
            if ServerDQEMail != None:
                print 'chargement des nom de domaines'
                ServerDQEMail.chargement_domaine()
        elif _flag_json:
            if _python25:
                import cherrypy
                from cherrypy import _cperror
            else:
                import cherrypyOld as cherrypy
                from cherrypyOld import _cperror
            if _flag_https:
                import OpenSSL
            try:
                ip = socket.gethostbyname(socket.gethostname())
                _ipServeur = socket.gethostbyname(socket.gethostname())
            except:
                ip = '127.0.0.1'

            port = 7794
            requette = 10
            _ipelfy = ''
            _ipmail = ''
            if _flag_log:
                log('%s -> Lecture des param\xe8tres' % datetime.datetime.now())
            for i in sys.argv:
                if i.upper().find('-IP:') == 0:
                    ip = i.split(':')[1]
                if i.upper().find('-EXTERNAL_RESPONSE:') == 0:
                    print 'URL EXTERNE>' + ''.join(i.split(':')[1:]) + '/dqeadresse'
                    soapexternal_url(':'.join(i.split(':')[1:]) + '/dqeadresse')
                if i.upper().find('-GEO_DEFAULT:') == 0:
                    geo = i.split(':')
                    _geoTab[geo[1]] = [geo[2], geo[3]]
                if i.upper().find('-FICHIERLICENCE:') == 0:
                    _nomfichierlicence = i.split(':')[1]
                if i.upper().find('-REQUEST:') == 0:
                    requette = int(i.split(':')[1])
                if i.upper().find('-PORT:') == 0:
                    try:
                        port = int(i.split(':')[1])
                    except:
                        port = 7794

                if i.upper().find('-DEBUG_FORMAT') == 0:
                    _flag_format = True
                if i.upper().find('-LICENCE:') == 0:
                    NomFichierLicence = i.split(':')[1]
                if i.upper().find('-MAXCOUNTLINES:') == 0:
                    _maxbufferlines = int(i.split(':')[1])
                if i.upper().find('-PAYS:') == 0:
                    _pays = i.split(':')[1]
                if i.upper().find('-REP_PAYS:') == 0:
                    _rep_pays = i.split(':')[1]
                if i.upper().find('-TPSMAX:') == 0:
                    _tps_max = int(i.split(':')[1])
                if i.upper().find('-TAILLEMAX:') == 0:
                    _Taille_adresse = int(i.split(':')[1])
                if i.upper().find('-MAXREP:') == 0:
                    _tps_rep = int(i.split(':')[1])
                if i.upper().find('-ACCESS_CONTROL_ALLOW_ORIGIN') == 0:
                    if not ':' in i:
                        _acao = '*'
                    else:
                        _acao = i.split(':')[1]
                if i.upper().find('-CONTENT_TYPE_JSON') == 0:
                    _json_acao = 'APPLICATION/JSON'
                if i.upper().find('-URLTAMPON:') == 0:
                    _urltampon = ':'.join(i.split(':')[1:])
                    _urltampon = _urltampon.replace('\\', '/')
                    if _urltampon[-1] != '/':
                        _urltampon += '/'
                if i.upper().find('-URLLICENCE:') == 0:
                    _urllicence = ':'.join(i.split(':')[1:])
                    _urllicence = _urllicence.replace('\\', '/')
                    if _urllicence[-1] != '/':
                        _urllicence += '/'
                if i.upper().find('-BODACC') == 0:
                    _flag_bodacc = True
                if i.upper().find('-IPMAIL:') == 0:
                    ch = i.split(':')
                    if len(ch) == 3:
                        _ipmail = 'http://' + ch[1] + ':' + ch[2]
                    else:
                        _ipmail = 'http://' + ch[1]
                if i.upper().find('-DBMAIL') == 0:
                    _flag_dbmail = True
                if i.upper().find('-IPELFY:') == 0:
                    ch = i.split(':')
                    _ipelfy = 'http://' + ':'.join(ch[1:])
                if i.upper().find('-IPRNVP:') == 0:
                    ch = i.split(':')
                    _ipelfy = 'http://' + ':'.join(ch[1:])
                if i.upper().find('-OLDINSEE:') == 0:
                    ch = i.split(':')
                    _patholdinsee = ':'.join(ch[1:])

            VerifLicence()
            MiseAJourLicence(False)
            if _flag_log:
                log('%s -> Affichage des caract\xe9ristiques du serveur' % datetime.datetime.now())
            print '**   Server DQE-ADDRESS MATCH  **'
            print '* Version Server: ' + __version__
            print ''
            print '- Chemin: ' + _pathinitial
            print '  -- Version DQE SOAP/JSON 1.3 --'
            print '       -- partie JSON --'
            print ('* Serveur IP: ' + ip, '   Port: ', port)
            print ('* Nombre de requettes: ', requette)
            print ''
            if _flag_https:
                print 'serveur en mode HTTPS'
            else:
                print 'serveur en mode HTTP'
            print ''
            if _ipelfy != '':
                print u'serveur avec le service RNVP actif'
                print u'RNVP doit etre actif sur le serveur : ' + _ipelfy
            else:
                print u'serveur avec le service RNVP DQE actif'
            print ''
            if _flag_log:
                log('%s -> repertoire des fichiers log : %s' % (datetime.datetime.now(), _replog))
            if Licence != None:
                print 'Nom Licence   : ' + Licence.client_name
                if type(Licence.client_ref).__name__ == 'list':
                    print 'MultiLicences----'
                    for i in Licence.client_ref:
                        print ('   * Licence: ',
                         i[1],
                         ' Client:',
                         i[0],
                         '   Date de fin : %02d/%02d/%d' % (i[2][2], i[2][1], i[2][0]))

                else:
                    print ('Licence Client: ', Licence.client_ref)
                datefin = Licence.exp_date
                datecomp = datetime.date.today().timetuple()
                print 'Date de fin : ' + '%02d/%02d/%d' % (datefin[2], datefin[1], datefin[0])
                if '%d%02d%02d' % (datecomp[0], datecomp[1], datecomp[2]) <= '%d%02d%02d' % (datefin[0], datefin[1], datefin[2]):
                    print (' PAYS: ', _pays)
                    print '--> demarrage en cours... '
                    try:
                        print ('repertoire Tables:', _pathinitial + 'International/' + _rep_pays + '/tables')
                        if not initialise_vg(_pathinitial + 'International/' + _rep_pays + '/tables'):
                            print 'Arret'
                            write_error('end', 'initialise_vg', 'serveur stoppe' + str(e))
                            exit()
                        initialise_structure(_pathinitial + 'International/' + _rep_pays + '/RN')
                        print 'Chargement Fin Tables : ' + _pays
                        if not chargement(_pays):
                            print 'Arret'
                            write_error('end', 'chargement', 'serveur stoppe' + str(e))
                            exit()
                        if ServerDQETel is not None:
                            print 'Chargement Telephone'
                            ServerDQETel.chargement_basetel()
                        print 'Chargement Pays iso2 / iso3'
                        chargement_pays_iso()
                        print 'Chargement Licence International'
                        chargement_licence_melissa()
                        print 'Chargement Licence biteplan'
                        chargement_licence_OP()
                        if ServerDQEMail != None:
                            print 'chargement des nom de domaines'
                            ServerDQEMail.chargement_domaine()
                        if file_exists(_replog + 'sitev9_' + _port_num + '.log'):
                            os.remove(_replog + 'sitev9_' + _port_num + '.log')
                        if _flag_https:
                            server_config = {'server.socket_host': ip,
                             'server.socket_port': port,
                             'server.numthreads': requette,
                             'server.ssl_module': 'pyopenssl',
                             'server.ssl_certificate': _pathinitial + 'Certificats/STAR_dqe-software_com.crt',
                             'server.ssl_private_key': _pathinitial + 'Certificats/dqe-software.key',
                             'server.ssl_certificate_chain': _pathinitial + 'Certificats/dqe-software_paquet.crt',
                             'server.thread_pool': requette,
                             'log.error_file': _replog + 'sitev9_' + _port_num + '.log',
                             'environment': 'production'}
                        else:
                            server_config = {'server.socket_host': ip,
                             'server.socket_port': port,
                             'server.numthreads': requette,
                             'server.thread_pool': requette,
                             'log.error_file': _replog + 'sitev9_' + _port_num + '.log',
                             'environment': 'production'}
                        cherrypy.config.update(server_config)
                        if ServerDQEMail != None:
                            print 'Lancement du serveur Email json'
                            ServerDQEMail.initsmtp()
                            print '--> SERVEUR MAIL PRET'
                            print '--> OK'
                        print 'Lancement du serveur json'
                        print ('urltampon=', _urltampon)
                        print ('urllicence=', _urllicence)
                        print ('new_compteur=', _new_compteur)
                        try:
                            if _urltampon != '' and _new_compteur:
                                print '* serveur comptage OK'
                            print '--> SERVEUR PRET'
                            print '--> OK'
                            cherrypy.tree.mount(RacineServeur())
                            cherrypy.engine.start()
                            cherrypy.engine.block()
                        finally:
                            print '****** SERVEUR KO **********'
                            cherrypy.engine.stop()
                            cherrypy.engine.block()
                            if ServerDQEMail is not None:
                                ServerDQEMail.closesmtp()

                    except Exception as e:
                        print ('Exception: ', e)
                        if _flag_log:
                            log('%s -> probleme de demarrage du serveur' % datetime.datetime.now())
                        print '--> probleme de demarrage du serveur ---'

                else:
                    print '--> la licence a expir\xe9'
                    if _flag_log:
                        log('%s -> la licence a expir\xe9' % datetime.datetime.now())
            else:
                print '--> demarrage impossible sans licence'
                if _flag_log:
                    log('%s -> demarrage impossible sans licence' % datetime.datetime.now())
        elif _flag_soap:
            if _python25:
                from cherrypy.wsgiserver import CherryPyWSGIServer
                from cherrypy import config
            else:
                from cherrypyOld.wsgiserver import CherryPyWSGIServer
                from cherrypyOld import config
            if _flag_https:
                import OpenSSL
                log('1 ouverture openssl')
            try:
                ip = socket.gethostbyname(socket.gethostname())
                _ipServeur = socket.gethostbyname(socket.gethostname())
            except:
                ip = '127.0.0.1'

            port = 9000
            requette = 10
            if _flag_log:
                log('%s -> 1 adresse ip' % datetime.datetime.now())
            for i in sys.argv:
                if i.upper().find('-IP:') == 0:
                    ip = i.split(':')[1]
                if i.upper().find('-REQUEST:') == 0:
                    requette = int(i.split(':')[1])
                if i.upper().find('-PORT:') == 0:
                    try:
                        port = int(i.split(':')[1])
                    except:
                        port = 9000

                if i.upper().find('-EXTERNAL_RESPONSE:') == 0:
                    print 'URL EXTERNE>' + ''.join(i.split(':')[1:]) + '/dqeadresse'
                    soapexternal_url(':'.join(i.split(':')[1:]) + '/dqeadresse')
                if i.upper().find('-DEBUG_FORMAT') == 0:
                    _flag_format = True
                if i.upper().find('-GEO_DEFAULT:') == 0:
                    geo = i.split(':')
                    _geoTab[geo[1]] = [_geoTab[geo[2]], _geoTab[geo[3]]]
                if i.upper().find('-FICHIERLICENCE:') == 0:
                    _nomfichierlicence = i.split(':')[1]
                if i.upper().find('-LICENCE:') == 0:
                    NomFichierLicence = i.split(':')[1]
                if i.upper().find('-MAXCOUNTLINES:') == 0:
                    _maxbufferlines = int(i.split(':')[1])
                if i.upper().find('-PAYS:') == 0:
                    _pays = i.split(':')[1]
                if i.upper().find('-TPSMAX:') == 0:
                    _tps_max = int(i.split(':')[1])
                if i.upper().find('-MAXREP:') == 0:
                    _tps_rep = int(i.split(':')[1])
                if i.upper().find('-TAILLEMAX:') == 0:
                    _Taille_adresse = int(i.split(':')[1])
                if i.upper().find('-BODACC') == 0:
                    _flag_bodacc = True
                if i.upper().find('-DBMAIL') == 0:
                    _flag_dbmail = True
                if i.upper().find('-URLTAMPON:') == 0:
                    _urltampon = ':'.join(i.split(':')[1:])
                    _urltampon = _urltampon.replace('\\', '/')
                    if _urltampon[-1] != '/':
                        _urltampon += '/'
                if i.upper().find('-URLLICENCE:') == 0:
                    _urllicence = ':'.join(i.split(':')[1:])
                    _urllicence = _urllicence.replace('\\', '/')
                    if _urllicence[-1] != '/':
                        _urllicence += '/'
                if i.upper().find('-IPELFY:') == 0:
                    ch = i.split(':')
                    _ipelfy = 'http://' + ':'.join(ch[1:])
                if i.upper().find('-OLDINSEE:') == 0:
                    ch = i.split(':')
                    _patholdinsee = ':'.join(ch[1:])

            VerifLicence()
            MiseAJourLicence(False)
            if _flag_log:
                log('%s -> 2 licence valide' % datetime.datetime.now())
            print '**   Server DQE-ADDRESS MATCH  **'
            print '* Version Server: ' + __version__
            print ''
            print '- Chemin: ' + _pathinitial
            print '  -- Version DQE SOAP/JSON 1.2 --'
            print '        -- partie SOAP --'
            print ('* Serveur IP: ' + ip, '   Port: ', port)
            print ('* Nombre de requettes: ', requette)
            print ''
            if _flag_log:
                log('%s -> repertoire des fichiers log : %s' % (datetime.datetime.now(), _replog))
            if _flag_https:
                print 'serveur en mode HTTPS'
                if _flag_log:
                    log('%s -> 3 serveur en mode HTTPS' % datetime.datetime.now())
            else:
                print 'serveur en mode HTTP'
                if _flag_log:
                    log('%s -> 3 serveur en mode HTTP' % datetime.datetime.now())
            if Licence != None:
                print 'Nom Licence   : ' + Licence.client_name
                if type(Licence.client_ref).__name__ == 'list':
                    print 'MultiLicences----'
                    for i in Licence.client_ref:
                        print ('   * Licence: ',
                         i[1],
                         ' Client:',
                         i[0],
                         '   Date de fin : %02d/%02d/%d' % (i[2][2], i[2][1], i[2][0]))

                else:
                    print ('Licence Client: ', Licence.client_ref)
                if _urltampon != '' and _new_compteur:
                    print '* serveur comptage OK'
                datefin = Licence.exp_date
                datecomp = datetime.date.today().timetuple()
                print 'Date de fin : ' + '%02d/%02d/%d' % (datefin[2], datefin[1], datefin[0])
                if '%d%02d%02d' % (datecomp[0], datecomp[1], datecomp[2]) <= '%d%02d%02d' % (datefin[0], datefin[1], datefin[2]):
                    print ' PAYS: ', _pays
                    print '--> demarrage en cours... '
                    try:
                        print ('repertoire Tables:', _pathinitial + 'International/' + _rep_pays + '/tables')
                        if not initialise_vg(_pathinitial + 'International/' + _rep_pays + '/tables'):
                            print 'Arret'
                            write_error('end', 'initialise_vg', 'serveur stoppe' + str(e))
                            exit()
                        initialise_structure(_pathinitial + 'International/' + _rep_pays + '/RN')
                        print 'Chargement Fin Tables'
                        if not chargement(_pays):
                            print 'Arret'
                            write_error('end', 'chargement', 'serveur stoppe' + str(e))
                            exit()
                        if ServerDQETel is not None:
                            print 'Chargement Telephone : '
                            ServerDQETel.chargement_basetel()
                        print 'Chargement Pays iso2 / iso3'
                        chargement_pays_iso()
                        print 'Chargement Base Postale Internationale'
                        chargement_licence_melissa()
                        print '--> SERVEUR Adresse PRET'
                        print 'OK'
                        if ServerDQEMail is not None:
                            print '--> Service analyse eMail'
                            ServerDQEMail.initsmtp()
                            print 'serveur OK'
                        vlogfile = _replog + 'serveur_soap_' + str(port) + '.log'
                        vaccesfile = _replog + 'serveur_trace_soap_' + str(port) + '.log'
                        if file_exists(vlogfile):
                            os.remove(vlogfile)
                        if file_exists(vaccesfile):
                            os.remove(vaccesfile)
                        if _flag_log:
                            config.update({'log.screen': False,
                             'log.error_file': vlogfile,
                             'log.access_file': vaccesfile})
                        if _flag_https:
                            if _flag_log:
                                log('%s -> demarrage en https cherryPy sur ip : %s  port : %s' % (datetime.datetime.now(), str(ip), str(port)))
                            server = CherryPyWSGIServer((ip, port), DQEAddressMatch(), numthreads=requette, request_queue_size=50)
                        else:
                            if _flag_log:
                                log('%s -> demarrage en http cherryPy sur ip : %s  port : %s' % (datetime.datetime.now(), str(ip), str(port)))
                            server = CherryPyWSGIServer((ip, port), DQEAddressMatch(), numthreads=requette, request_queue_size=50)
                            if _flag_log:
                                log('%s -> server declare' % datetime.datetime.now())
                        server.start()
                        if _flag_log:
                            log('%s -> 3 - server demarre' % datetime.datetime.now())
                    except IOError as e:
                        if _flag_log:
                            log('4 - I/O error({0}): {1}'.format(e.errno, e.strerror))
                        print '--> probleme de demarrage du serveur ---'
                    except ValueError:
                        if _flag_log:
                            log('%s -> 4 - Probleme de conversion' % datetime.datetime.now())
                        print '--> probleme de demarrage du serveur ---'
                    except:
                        if _flag_log:
                            log('%s -> 4 - Unexpected error: %s' % (datetime.datetime.now(), str(sys.exc_info()[0])))
                        print '--> probleme de demarrage du serveur ---'

                else:
                    print '--> la licence a expir\xe9'
                    if _flag_log:
                        log('%s -> 5 - la licence a expir\xe9' % datetime.datetime.now())
            else:
                print '--> demarrage impossible sans licence'
                if _flag_log:
                    log('%s -> 6 - demarrage impossible sans licence' % datetime.datetime.now())
            fermeture()
            print 'Fin'
else:
    _pays = 'CHE'
    _pays = 'CZE'
    _pays = 'FIN'
    _pays = 'GBR'
    _pays = 'CZE'
    _pays = 'DEU'
    _pays = 'FRA'
    _pays = 'FRA'
    initialise_vg(_pathinitial + 'International/' + _rep_pays + '/tables')
    initialise_structure(_pathinitial + 'International/' + _rep_pays + '/RN')
    VerifLicence()
    chargement_licence_melissa()
    chargement_pays_iso()
    chargement_licence_OP()
    chargement(_pays)
    VRnvp = VerifRnvp('RNVP2')
    resu = VRnvp.index(Pays='FRA', Licence='EDF', ligne1='', ligne2='', ligne3='residence toto', ligne4='4 sq leon blum', ligne5='', cp='92800', ville='puteaux', Taille=38)
    res = DQEAddressMatch()
    liste = DQEDataAddress()
    liste.DQECle = 'AD001010'
    liste.Pays = 'DEU'
    liste.IDLocalite = '176026'
    liste.Voie = 'LEHD'
    res1 = res.LookupAddress(liste, 10)
    tel = VerifTel()
    r = tel.index('0987001010', 'COM17NE10', 'FRA')
    v = u'chemin du bois d aubig'
    adr = RecupAdr()
    p = adr.index(Pays='FRA', IDLocalite='27656', Instance='1', Licence='AD001010', Adresse=v.encode('utf-8'), Etendue='N')
    rci = RecupCpInter()
    res = rci.index(None, 62, '1', Licence, Alpha='True')
    res = RechAdresse('')
    cp = RecupCp()
    p = cp.index(Pays='FRA', CodePostal='paris', Instance='1', Alpha='True', Licence='AD001010', Etendue='Y')
    res = DQEAddressMatch()
    liste = DQEDataAddress()
    liste.DQECle = 'AD001010'
    liste.Pays = 'LUX'
    liste.CodePostal = 'brandenbourg'
    res1 = res.LookupCP(liste, 10)
    cp = RecupCp()
    p = cp.index(Pays='FRA', CodePostal='01500', Instance='1', Alpha='True', Licence='AD001010', Etendue='Y')
    p = cp.index(Pays='FRA', CodePostal='paris', Instance='1', Alpha='True', Licence='AD001010', Etendue='Y')
    cp = RecupCp()
    p = cp.index(Pays='AUT', CodePostal='1150', Instance='1', Alpha='True', Licence='AD001010')
    adr = RecupAdr()
    p = adr.index(Pays='AUT', IDLocalite='442356', Instance='1', Licence='AD001010', Adresse='Alberich', Etendue='N')
global _lock_numclient ## Warning: Unused global